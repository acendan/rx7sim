{"version":3,"file":"index-DnfQqgHi.js","sources":["../../src/systems/constants.js","../../src/systems/helpers.js","../../src/systems/exhaust.js","../../src/systems/meters.js","../../src/systems/controls.js","../../src/systems/stats.js","../../src/script.js"],"sourcesContent":["/**\r\n * @fileoverview Centralized constants and configuration for rx7sim\r\n * @module systems/constants\r\n */\r\n\r\n/**\r\n * Vehicle drive states for animation and audio control\r\n * @enum {string}\r\n * @readonly\r\n */\r\nexport const DriveState = {\r\n    /** Vehicle is stationary with engine at idle */\r\n    STOP: 'stop',\r\n    /** Vehicle is cruising at constant speed */\r\n    DRIVE: 'drive',\r\n    /** Vehicle is accelerating (transitioning from idle to drive) */\r\n    ACCEL: 'accel',\r\n    /** Vehicle is decelerating (transitioning from drive to stop) */\r\n    DECEL: 'decel'\r\n}\r\n\r\n/**\r\n * Audio solo/mix states for microphone perspective control\r\n * @enum {string}\r\n * @readonly\r\n */\r\nexport const SoloState = {\r\n    /** Mix of all audio perspectives */\r\n    MIX: 'mix',\r\n    /** Intake/front perspective only */\r\n    INTAKE: 'intake',\r\n    /** Exhaust/rear perspective only */\r\n    EXHAUST: 'exhaust',\r\n    /** Interior/cabin perspective only */\r\n    INTERIOR: 'interior'\r\n}\r\n\r\n/**\r\n * Color values for solo button UI elements\r\n * @enum {number}\r\n * @readonly\r\n */\r\nexport const SoloBtnColors = {\r\n    /** Purple - Mix perspective color */\r\n    MIX: 0xa056aa,\r\n    /** Blue - Intake perspective color */\r\n    INTAKE: 0x4e9eff,\r\n    /** Green - Exhaust perspective color */\r\n    EXHAUST: 0x9cff7f,\r\n    /** Yellow - Interior perspective color */\r\n    INTERIOR: 0xffe894\r\n}\r\n\r\n/**\r\n * Global per-emitter volume multipliers for balancing audio perspectives\r\n * @type {Object.<string, number>}\r\n * @property {number} MIX - Applied to each emitter during mix solo state (0-1)\r\n * @property {number} INTAKE - Intake emitter volume multiplier\r\n * @property {number} EXHAUST - Exhaust emitter volume multiplier\r\n * @property {number} INTERIOR - Interior emitter volume multiplier\r\n */\r\nexport const EmitterVolMults = {\r\n    MIX: 0.8,       // Applied to each individually during mix solo state\r\n    INTAKE: 0.5,\r\n    EXHAUST: 0.8,\r\n    INTERIOR: 0.3\r\n}\r\n\r\n/**\r\n * Configuration for directional audio emitters (intake/exhaust)\r\n * @type {Object}\r\n * @property {number} innerAngle - Inner cone angle in degrees where volume is at maximum\r\n * @property {number} outerAngle - Outer cone angle in degrees where volume starts to attenuate\r\n * @property {number} outerGain - Volume multiplier outside the outer cone (0-1)\r\n */\r\nexport const ConeEmitterSettings = {\r\n    innerAngle: 45.0, // degrees\r\n    outerAngle: 120.0, // degrees\r\n    outerGain: 0.3    // volume multiplier outside outer cone\r\n}\r\n\r\n/**\r\n * Mapping of throttle press durations to action types\r\n * @type {Object.<string, number>}\r\n * @property {number} Press duration in milliseconds\r\n */\r\nexport const ThrottleMap = {\r\n    short: 150,\r\n    medium: 300,\r\n    long: 600\r\n}\r\n\r\n/**\r\n * Default lighting configuration for the scene\r\n * @type {Object}\r\n * @property {Object} ambient - Ambient light settings\r\n * @property {number} ambient.color - Hex color value\r\n * @property {number} ambient.intensity - Light intensity (0-1+)\r\n * @property {Object} hemisphere - Hemisphere light settings\r\n * @property {number} hemisphere.skyColor - Sky color hex value\r\n * @property {number} hemisphere.groundColor - Ground color hex value\r\n * @property {number} hemisphere.intensity - Light intensity (0-1+)\r\n * @property {Array<Object>} directional - Array of directional light configurations\r\n */\r\nexport const LightingDefaults = {\r\n    ambient: { color: 0xffffff, intensity: 0.5 },\r\n    hemisphere: { skyColor: 0xffffff, groundColor: 0x8d8d8d, intensity: 0.4 },\r\n    directional: [\r\n        { color: 0xfeffed, intensity: 1.0 },\r\n        { color: 0xfff7f2, intensity: 1.0 },\r\n        { color: 0xf8feff, intensity: 0.2 }\r\n    ]\r\n}\r\n\r\n/**\r\n * HDRI environment presets with associated reverb and lighting overrides\r\n * Each preset defines the visual environment, audio reverb, and custom lighting\r\n * @type {Object.<string, Object>}\r\n * @property {Object} Garage - Enclosed garage environment\r\n * @property {string} Garage.path - Path to HDR texture file\r\n * @property {string} Garage.reverb - Name of reverb preset to apply\r\n * @property {Object} Garage.lighting - Custom lighting override\r\n * @property {Object} Track - Open track environment\r\n * @property {string} Track.path - Path to HDR texture file\r\n * @property {string} Track.reverb - Name of reverb preset to apply\r\n * @property {Object} Track.lighting - Custom lighting override\r\n */\r\nexport const EnvironmentPresets = {\r\n    'Garage': {\r\n        path: './hdri/garage.hdr',\r\n        reverb: 'Garage',\r\n        lighting: {\r\n            ambient: { color: 0xf0f0f0, intensity: 0.2 },\r\n            hemisphere: { skyColor: 0xc0c0c0, groundColor: 0x3a3a3a, intensity: 0.15 },\r\n            directional: [\r\n                { color: 0xbcd4ff, intensity: 1.5 },\r\n                { color: 0xffddaa, intensity: 0.5 },\r\n                { color: 0x888888, intensity: 0.1 }\r\n            ]\r\n        }\r\n    },\r\n    'Track': {\r\n        path: './hdri/track.hdr',\r\n        reverb: 'Outdoors',\r\n        lighting: {\r\n            ambient: { color: 0xfff693, intensity: 0.25 },\r\n            hemisphere: { skyColor: 0xcce6ff, groundColor: 0x5a5a5a, intensity: 0.15 },\r\n            directional: [\r\n                { color: 0xffffff, intensity: 0.1 },\r\n                { color: 0xfff2d1, intensity: 0.1 },\r\n                { color: 0xaaccff, intensity: 0.0 }\r\n            ]\r\n        }\r\n    }\r\n}\r\n\r\nexport default {\r\n    DriveState,\r\n    SoloState,\r\n    SoloBtnColors,\r\n    EmitterVolMults,\r\n    ThrottleMapping: ThrottleMap,\r\n    ConeEmitterSettings,\r\n    LightingDefaults,\r\n    EnvironmentPresets\r\n}\r\n","/**\r\n * @fileoverview Utility functions for 3D objects, audio, UI, and resource management\r\n * @module systems/helpers\r\n */\r\n\r\nimport * as THREE from 'three'\r\nimport { ConeEmitterSettings } from './constants.js'\r\n// Note: colorToHex is defined below; forward usage inside file is fine.\r\n\r\n/**\r\n * Checks if WebGL is available and supported by the browser\r\n * Tests for WebGL context and required extensions\r\n * @returns {{available: boolean, error: string|null}} Support status and error message if unavailable\r\n */\r\nexport function checkWebGLSupport() {\r\n    try {\r\n        const canvas = document.createElement('canvas')\r\n        const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl')\r\n        \r\n        if (!gl) {\r\n            return { \r\n                available: false, \r\n                error: 'WebGL is not supported by your browser or graphics driver.' \r\n            }\r\n        }\r\n\r\n        // Check for required extensions\r\n        const requiredExtensions = ['OES_element_index_uint']\r\n        for (const ext of requiredExtensions) {\r\n            if (!gl.getExtension(ext)) {\r\n                return { \r\n                    available: false, \r\n                    error: `WebGL extension ${ext} is not supported.` \r\n                }\r\n            }\r\n        }\r\n\r\n        return { available: true, error: null }\r\n    } catch (err) {\r\n        return { \r\n            available: false, \r\n            error: `WebGL check failed: ${err.message}` \r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Checks if Web Audio API is available and supported by the browser\r\n * @returns {{available: boolean, error: string|null}} Support status and error message if unavailable\r\n */\r\nexport function checkWebAudioSupport() {\r\n    try {\r\n        const AudioContext = window.AudioContext || window.webkitAudioContext\r\n        if (!AudioContext) {\r\n            return { \r\n                available: false, \r\n                error: 'Web Audio API is not supported by your browser.' \r\n            }\r\n        }\r\n        return { available: true, error: null }\r\n    } catch (err) {\r\n        return { \r\n            available: false, \r\n            error: `Web Audio API check failed: ${err.message}` \r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Creates and displays an error overlay with a message\r\n * Used for critical errors and non-blocking warnings\r\n * @param {string} title - Error title displayed prominently\r\n * @param {string} message - Detailed error message with optional line breaks\r\n * @param {boolean} [blocking=true] - Whether this error prevents the app from running\r\n */\r\nexport function showErrorUI(title, message, blocking = true) {\r\n    // Remove existing error overlay if any\r\n    const existing = document.getElementById('error-overlay')\r\n    if (existing) {\r\n        existing.remove()\r\n    }\r\n\r\n    const overlay = document.createElement('div')\r\n    overlay.id = 'error-overlay'\r\n    Object.assign(overlay.style, {\r\n        position: 'fixed',\r\n        top: '0',\r\n        left: '0',\r\n        width: '100%',\r\n        height: '100%',\r\n        backgroundColor: blocking ? 'rgba(0, 0, 0, 0.95)' : 'rgba(0, 0, 0, 0.7)',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        zIndex: '99999',\r\n        fontFamily: 'system-ui, -apple-system, sans-serif',\r\n        color: '#fff',\r\n        padding: '20px',\r\n        boxSizing: 'border-box'\r\n    })\r\n\r\n    const container = document.createElement('div')\r\n    Object.assign(container.style, {\r\n        maxWidth: '500px',\r\n        backgroundColor: '#1a1a1a',\r\n        borderRadius: '12px',\r\n        padding: '32px',\r\n        boxShadow: '0 8px 32px rgba(0, 0, 0, 0.5)',\r\n        border: '1px solid #333'\r\n    })\r\n\r\n    const titleEl = document.createElement('h2')\r\n    titleEl.textContent = title\r\n    Object.assign(titleEl.style, {\r\n        margin: '0 0 16px 0',\r\n        fontSize: '24px',\r\n        fontWeight: '600',\r\n        color: '#ff6b6b'\r\n    })\r\n\r\n    const messageEl = document.createElement('p')\r\n    messageEl.textContent = message\r\n    Object.assign(messageEl.style, {\r\n        margin: '0 0 24px 0',\r\n        fontSize: '16px',\r\n        lineHeight: '1.6',\r\n        color: '#ccc'\r\n    })\r\n\r\n    container.appendChild(titleEl)\r\n    container.appendChild(messageEl)\r\n\r\n    if (!blocking) {\r\n        const closeBtn = document.createElement('button')\r\n        closeBtn.textContent = 'Dismiss'\r\n        Object.assign(closeBtn.style, {\r\n            backgroundColor: '#444',\r\n            color: '#fff',\r\n            border: 'none',\r\n            borderRadius: '6px',\r\n            padding: '12px 24px',\r\n            fontSize: '14px',\r\n            cursor: 'pointer',\r\n            fontWeight: '500'\r\n        })\r\n        closeBtn.addEventListener('click', () => overlay.remove())\r\n        closeBtn.addEventListener('mouseenter', () => closeBtn.style.backgroundColor = '#555')\r\n        closeBtn.addEventListener('mouseleave', () => closeBtn.style.backgroundColor = '#444')\r\n        container.appendChild(closeBtn)\r\n    }\r\n\r\n    overlay.appendChild(container)\r\n    document.body.appendChild(overlay)\r\n}\r\n\r\n/**\r\n * Shows a loading overlay with a spinner and progress message\r\n * Returns an object with methods to update the message or remove the overlay\r\n * @param {string} [message='Loading...'] - Initial loading message\r\n * @returns {{update: function(string): void, remove: function(): void}} Controller object\r\n * @returns {function(string): void} return.update - Updates the loading message\r\n * @returns {function(): void} return.remove - Removes the loading overlay\r\n */\r\nexport function showLoadingUI(message = 'Loading...') {\r\n    // Remove existing loading overlay if any\r\n    const existing = document.getElementById('loading-overlay')\r\n    if (existing) {\r\n        existing.remove()\r\n    }\r\n\r\n    const overlay = document.createElement('div')\r\n    overlay.id = 'loading-overlay'\r\n    Object.assign(overlay.style, {\r\n        position: 'fixed',\r\n        top: '0',\r\n        left: '0',\r\n        width: '100%',\r\n        height: '100%',\r\n        backgroundColor: 'rgba(0, 0, 0, 0.9)',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        zIndex: '99998',\r\n        fontFamily: 'system-ui, -apple-system, sans-serif',\r\n        color: '#fff'\r\n    })\r\n\r\n    const container = document.createElement('div')\r\n    Object.assign(container.style, {\r\n        textAlign: 'center'\r\n    })\r\n\r\n    const spinner = document.createElement('div')\r\n    Object.assign(spinner.style, {\r\n        width: '50px',\r\n        height: '50px',\r\n        margin: '0 auto 20px',\r\n        border: '4px solid #333',\r\n        borderTop: '4px solid #fff',\r\n        borderRadius: '50%',\r\n        animation: 'spin 1s linear infinite'\r\n    })\r\n\r\n    const messageEl = document.createElement('div')\r\n    messageEl.textContent = message\r\n    Object.assign(messageEl.style, {\r\n        fontSize: '16px',\r\n        color: '#ccc'\r\n    })\r\n\r\n    // Add keyframe animation for spinner\r\n    if (!document.getElementById('spinner-style')) {\r\n        const style = document.createElement('style')\r\n        style.id = 'spinner-style'\r\n        style.textContent = `\r\n            @keyframes spin {\r\n                0% { transform: rotate(0deg); }\r\n                100% { transform: rotate(360deg); }\r\n            }\r\n        `\r\n        document.head.appendChild(style)\r\n    }\r\n\r\n    container.appendChild(spinner)\r\n    container.appendChild(messageEl)\r\n    overlay.appendChild(container)\r\n    document.body.appendChild(overlay)\r\n\r\n    return {\r\n        update: (newMessage) => {\r\n            messageEl.textContent = newMessage\r\n        },\r\n        remove: () => {\r\n            overlay.remove()\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Ensure audio context is resumed (handles autoplay policy)\r\n * @param {AudioContext} audioContext - The audio context to resume\r\n * @returns {Promise<boolean>} Resolves to true if resumed successfully\r\n */\r\nexport async function resumeAudioContext(audioContext) {\r\n    if (!audioContext) return false\r\n\r\n    if (audioContext.state === 'suspended') {\r\n        try {\r\n            await audioContext.resume()\r\n            return true\r\n        } catch (err) {\r\n            console.error('Failed to resume audio context:', err)\r\n            return false\r\n        }\r\n    }\r\n    \r\n    return audioContext.state === 'running'\r\n}\r\n\r\n/**\r\n * Loads a GLTF model asynchronously with comprehensive error handling\r\n * @param {THREE.GLTFLoader} loader - The GLTF loader instance\r\n * @param {string} path - Path to the .gltf or .glb model file\r\n * @param {function(ProgressEvent): void} [onProgress=null] - Optional progress callback\r\n * @returns {Promise<Object>} Promise that resolves with loaded GLTF object containing scene, animations, etc.\r\n * @throws {Error} If the model fails to load\r\n */\r\nexport function loadGLTFModel(loader, path, onProgress = null) {\r\n    return new Promise((resolve, reject) => {\r\n        loader.load(\r\n            path,\r\n            (gltf) => {\r\n                console.log(`✓ Loaded model: ${path}`)\r\n                resolve(gltf)\r\n            },\r\n            onProgress,\r\n            (error) => {\r\n                console.error(`✗ Failed to load model: ${path}`, error)\r\n                reject(new Error(`Failed to load model ${path}: ${error.message}`))\r\n            }\r\n        )\r\n    })\r\n}\r\n\r\n/**\r\n * Loads an audio file asynchronously with error handling\r\n * @param {THREE.AudioLoader} loader - The Three.js audio loader instance\r\n * @param {string} path - Path to the audio file (.ogg, .mp3, etc.)\r\n * @returns {Promise<AudioBuffer>} Promise that resolves with decoded audio buffer\r\n * @throws {Error} If the audio file fails to load or decode\r\n */\r\nexport function loadAudioFile(loader, path) {\r\n    return new Promise((resolve, reject) => {\r\n        loader.load(\r\n            path,\r\n            (buffer) => {\r\n                console.log(`✓ Loaded audio: ${path}`)\r\n                resolve(buffer)\r\n            },\r\n            null,\r\n            (error) => {\r\n                console.error(`✗ Failed to load audio: ${path}`, error)\r\n                reject(new Error(`Failed to load audio ${path}: ${error.message}`))\r\n            }\r\n        )\r\n    })\r\n}\r\n\r\n/**\r\n * Loads an HDR texture for environment mapping with error handling\r\n * @param {THREE.RGBELoader} loader - The RGBE (HDR) loader instance\r\n * @param {string} path - Path to the .hdr file\r\n * @returns {Promise<THREE.DataTexture>} Promise that resolves with loaded HDR texture\r\n * @throws {Error} If the HDR file fails to load\r\n */\r\nexport function loadHDRTexture(loader, path) {\r\n    return new Promise((resolve, reject) => {\r\n        loader.load(\r\n            path,\r\n            (texture) => {\r\n                console.log(`✓ Loaded HDR: ${path}`)\r\n                resolve(texture)\r\n            },\r\n            null,\r\n            (error) => {\r\n                console.error(`✗ Failed to load HDR: ${path}`, error)\r\n                reject(new Error(`Failed to load HDR ${path}: ${error.message}`))\r\n            }\r\n        )\r\n    })\r\n}\r\n\r\n/**\r\n * Recursively dispose of Three.js object and all its children\r\n * Cleans up geometries, materials, textures, and render targets\r\n * @param {THREE.Object3D} object - Object to dispose\r\n */\r\nexport function disposeObject(object) {\r\n    if (!object) return\r\n\r\n    // Traverse all children first\r\n    if (object.children) {\r\n        for (let i = object.children.length - 1; i >= 0; i--) {\r\n            disposeObject(object.children[i])\r\n        }\r\n    }\r\n\r\n    // Dispose geometry\r\n    if (object.geometry) {\r\n        object.geometry.dispose()\r\n    }\r\n\r\n    // Dispose material(s)\r\n    if (object.material) {\r\n        if (Array.isArray(object.material)) {\r\n            object.material.forEach(material => disposeMaterial(material))\r\n        } else {\r\n            disposeMaterial(object.material)\r\n        }\r\n    }\r\n\r\n    // Dispose render target\r\n    if (object.renderTarget) {\r\n        object.renderTarget.dispose()\r\n    }\r\n\r\n    // Remove from parent\r\n    if (object.parent) {\r\n        object.parent.remove(object)\r\n    }\r\n}\r\n\r\n/**\r\n * Dispose of a material and its textures\r\n * @private\r\n * @param {THREE.Material} material - Material to dispose\r\n */\r\nfunction disposeMaterial(material) {\r\n    if (!material) return\r\n\r\n    // Dispose all texture properties\r\n    Object.keys(material).forEach(prop => {\r\n        const value = material[prop]\r\n        if (value && typeof value === 'object' && 'minFilter' in value) {\r\n            // It's a texture\r\n            value.dispose()\r\n        }\r\n    })\r\n\r\n    material.dispose()\r\n}\r\n\r\n/**\r\n * Dispose of an HDR texture with error handling\r\n * @param {THREE.Texture} texture - Texture to dispose\r\n */\r\nexport function disposeTexture(texture) {\r\n    if (!texture) return\r\n    \r\n    try {\r\n        texture.dispose()\r\n    } catch (err) {\r\n        console.error('Failed to dispose texture:', err)\r\n    }\r\n}\r\n\r\n/**\r\n * Stop and disconnect a positional audio emitter, cleaning up its resources\r\n * @param {THREE.PositionalAudio} emitter - Audio emitter to clean up\r\n */\r\nexport function disposeAudioEmitter(emitter) {\r\n    if (!emitter) return\r\n\r\n    try {\r\n        // Stop playback\r\n        if (emitter.isPlaying) {\r\n            emitter.stop()\r\n        }\r\n\r\n        // Disconnect custom reverb nodes if present\r\n        if (emitter._reverbNodes) {\r\n            const { dryGain, wetGain, convolver } = emitter._reverbNodes\r\n            try {\r\n                dryGain.disconnect()\r\n                wetGain.disconnect()\r\n                convolver.disconnect()\r\n            } catch (err) {\r\n                console.warn('Error disconnecting reverb nodes:', err)\r\n            }\r\n            emitter._reverbNodes = null\r\n        }\r\n\r\n        // Disconnect the emitter itself\r\n        emitter.disconnect()\r\n\r\n        // Clear buffer reference\r\n        emitter.buffer = null\r\n    } catch (err) {\r\n        console.error('Failed to dispose audio emitter:', err)\r\n    }\r\n}\r\n\r\n/**\r\n * Clean up an audio analyser\r\n * @param {THREE.AudioAnalyser} analyser - Analyser to clean up\r\n */\r\nexport function disposeAudioAnalyser(analyser) {\r\n    if (!analyser) return\r\n\r\n    try {\r\n        if (analyser.analyser) {\r\n            analyser.analyser.disconnect()\r\n        }\r\n    } catch (err) {\r\n        console.warn('Error disposing audio analyser:', err)\r\n    }\r\n}\r\n\r\n/**\r\n * Create a configured directional light with shadow mapping\r\n * @param {Object} opts - Configuration options\r\n * @param {number} [opts.color=0xffffff] - Hex color value\r\n * @param {number} [opts.intensity=1.0] - Light intensity\r\n * @param {number} [opts.mapSize=1024] - Shadow map resolution (power of 2)\r\n * @param {number} [opts.far=15] - Shadow camera frustum far plane\r\n * @param {Object} [opts.bounds={left: -7, right: 7, top: 7, bottom: -7}] - Shadow camera frustum bounds\r\n * @param {Array<number>} [opts.position=[5, 3, 4]] - Light position [x, y, z]\r\n * @returns {THREE.DirectionalLight} Configured directional light with shadows\r\n */\r\nexport function createDirectionalLight({ color = 0xffffff, intensity = 1.0, mapSize = 1024, far = 15, bounds = { left: -7, right: 7, top: 7, bottom: -7 }, position = [5, 3, 4] } = {}) {\r\n    const light = new THREE.DirectionalLight(color, intensity)\r\n    light.castShadow = true\r\n    light.shadow.mapSize.set(mapSize, mapSize)\r\n    light.shadow.camera.far = far\r\n    light.shadow.camera.left = bounds.left\r\n    light.shadow.camera.right = bounds.right\r\n    light.shadow.camera.top = bounds.top\r\n    light.shadow.camera.bottom = bounds.bottom\r\n    light.position.set(...position)\r\n    return light\r\n}\r\n\r\n/**\r\n * Convenience function to create multiple directional lights from an array of configs\r\n * @param {Array<Object>} [configs=[]] - Array of config objects passed to createDirectionalLight\r\n * @returns {Array<THREE.DirectionalLight>} Array of configured directional lights\r\n */\r\nexport function createDirectionalLights(configs = []) {\r\n    return configs.map(cfg => createDirectionalLight(cfg))\r\n}\r\n\r\n/**\r\n * Convert a numeric color to a #RRGGBB hex string\r\n * Safely handles already-string inputs (returns them unchanged if they look like a hex color)\r\n * @param {number|string} c - Color as number (0xff00aa) or string\r\n * @returns {string} Color formatted as #RRGGBB hex string\r\n * @example\r\n * colorToHex(0xff00aa) // \"#ff00aa\"\r\n * colorToHex(\"#ff00aa\") // \"#ff00aa\"\r\n * colorToHex(\"0xff00aa\") // \"#ff00aa\"\r\n */\r\nexport function colorToHex(c) {\r\n    if (typeof c === 'string') {\r\n        if (c.startsWith('#') && (c.length === 7 || c.length === 9)) return c.slice(0,7)\r\n        // Attempt to parse numeric from string\r\n        try {\r\n            const n = Number(c)\r\n            if (!Number.isNaN(n)) return `#${(n >>> 0).toString(16).padStart(6, '0')}`\r\n        } catch (_) { /* ignore */ }\r\n        return c // fallback\r\n    }\r\n    return `#${(c >>> 0).toString(16).padStart(6, '0')}`\r\n}\r\n\r\n/**\r\n * Create a visual helper for an audio emitter showing its position and details\r\n * @param {THREE.PositionalAudio} emitter - The audio emitter to debug\r\n * @param {Object} opts - options\r\n * @param {number} opts.size - Size of the helper\r\n * @param {number} opts.color - Color of the helper\r\n * @param {boolean} opts.showCone - If true, show a cone instead of sphere (for directional audio)\r\n * @param {number} opts.coneAngle - Cone angle in degrees (if showCone is true, defaults to ConeEmitterSettings.innerAngle)\r\n * @param {THREE.Vector3} opts.coneDirection - Direction the cone points (if showCone is true)\r\n * @returns {THREE.Group} The helper object\r\n */\r\nexport function createAudioEmitterDebugger(emitter, { size = 0.2, color = 0xffff00, showCone = false, coneAngle = ConeEmitterSettings.innerAngle, coneDirection = new THREE.Vector3(0, 0, 1) } = {}) {\r\n    const helper = new THREE.Group()\r\n    \r\n    if (showCone) {\r\n        // Create a cone geometry to visualize directional audio\r\n        const coneHeight = size * 3\r\n        const coneAngleRad = THREE.MathUtils.degToRad(coneAngle)\r\n        const coneRadius = Math.tan(coneAngleRad) * coneHeight\r\n        const geometry = new THREE.ConeGeometry(coneRadius, coneHeight, 16, 1, true)\r\n        const material = new THREE.MeshBasicMaterial({ \r\n            color, \r\n            wireframe: true,\r\n            transparent: true,\r\n            opacity: 0.6,\r\n            side: THREE.DoubleSide\r\n        })\r\n        const cone = new THREE.Mesh(geometry, material)\r\n        \r\n        // Rotate cone to point in the specified direction\r\n        // Default cone points along Y axis, we need to align it with coneDirection\r\n        const defaultDir = new THREE.Vector3(0, -1, 0)\r\n        const quaternion = new THREE.Quaternion()\r\n        quaternion.setFromUnitVectors(defaultDir, coneDirection.clone().normalize())\r\n        cone.quaternion.copy(quaternion)\r\n        \r\n        // Offset cone so its tip is at the emitter position\r\n        cone.position.copy(coneDirection.clone().normalize().multiplyScalar(coneHeight / 2))\r\n        \r\n        helper.add(cone)\r\n        \r\n        // Add a small sphere at the tip (emitter position)\r\n        const tipGeometry = new THREE.SphereGeometry(size * 0.3)\r\n        const tipMaterial = new THREE.MeshBasicMaterial({ \r\n            color, \r\n            transparent: true,\r\n            opacity: 0.9 \r\n        })\r\n        const tip = new THREE.Mesh(tipGeometry, tipMaterial)\r\n        helper.add(tip)\r\n    } else {\r\n        // Sphere at emitter position\r\n        const geometry = new THREE.SphereGeometry(size)\r\n        const material = new THREE.MeshBasicMaterial({ \r\n            color, \r\n            wireframe: true,\r\n            transparent: true,\r\n            opacity: 0.8 \r\n        })\r\n        const sphere = new THREE.Mesh(geometry, material)\r\n        helper.add(sphere)\r\n    }\r\n\r\n    // Match position to emitter\r\n    helper.position.copy(emitter.position)\r\n\r\n    return helper\r\n}\r\n\r\n/**\r\n * Create a pair of headlight SpotLights (left and right) with shadow mapping\r\n * @param {Object} opts - Configuration options\r\n * @param {number} [opts.color=0xFFFFDE] - Hex color value (warm white)\r\n * @param {number} [opts.intensity=3.0] - Light intensity\r\n * @param {number} [opts.distance=10] - Maximum light distance\r\n * @param {number} [opts.angle=Math.PI/6] - Cone angle in radians\r\n * @param {number} [opts.penumbra=0.5] - Penumbra value (0-1)\r\n * @param {number} [opts.decay=1.0] - Light decay factor\r\n * @param {Array<number>} [opts.leftPosition=[0.75, 0.76, 1.8]] - Left headlight position [x, y, z]\r\n * @param {Array<number>} [opts.rightPosition=[-0.75, 0.76, 1.8]] - Right headlight position [x, y, z]\r\n * @param {Array<number>} [opts.targetPosition=[0, 0, 10]] - Light target position [x, y, z]\r\n * @returns {Object} Object with left and right SpotLight instances: { left: THREE.SpotLight, right: THREE.SpotLight }\r\n */\r\nexport function createHeadlightSpots({ color = 0xFFFFDE, intensity = 3.0, distance = 10, angle = Math.PI / 6, penumbra = 0.5, decay = 1.0, leftPosition = [0.75, 0.76, 1.8], rightPosition = [-0.75, 0.76, 1.8], targetPosition = [0, 0, 10] } = {}) {\r\n    const left = new THREE.SpotLight(color, intensity, distance, angle, penumbra, decay)\r\n    left.position.set(...leftPosition)\r\n    left.target.position.set(...targetPosition)\r\n    left.castShadow = true\r\n    left.shadow.mapSize.width = 1024\r\n    left.shadow.mapSize.height = 1024\r\n    left.shadow.camera.near = 0.5\r\n    left.shadow.camera.far = 20\r\n    left.shadow.camera.fov = 30\r\n\r\n    const right = new THREE.SpotLight(color, intensity, distance, angle, penumbra, decay)\r\n    right.position.set(...rightPosition)\r\n    right.target.position.set(...targetPosition)\r\n    right.castShadow = true\r\n    right.shadow.mapSize.width = 1024\r\n    right.shadow.mapSize.height = 1024\r\n    right.shadow.camera.near = 0.5\r\n    right.shadow.camera.far = 20\r\n    right.shadow.camera.fov = 30\r\n\r\n    return { left, right }\r\n}\r\n\r\n/**\r\n * Load (if needed) and play audio on a THREE.PositionalAudio emitter with caching support\r\n * If a `store` object and `storeKey` are provided, the loaded buffer will be cached there and reused\r\n * @param {THREE.AudioLoader} audioLoader - Instance used to load audio files\r\n * @param {THREE.PositionalAudio} emitter - The positional audio emitter to play the buffer on\r\n * @param {string} path - URL/path to the audio file\r\n * @param {Object} [opts] - Configuration options\r\n * @param {Object} [opts.store=null] - Optional object to cache loaded buffers (e.g., soundEngine)\r\n * @param {string} [opts.storeKey=null] - Key on the store where the buffer will be saved/loaded\r\n * @param {boolean} [opts.loop=false] - Whether to loop the audio\r\n * @param {number} [opts.refDistance=20] - Emitter reference distance for spatial audio falloff\r\n * @param {number|null} [opts.volume=null] - Optional volume to set (0..1)\r\n * @param {number} [opts.offset=0] - Playback start offset in seconds\r\n * @param {function(): void|null} [opts.onEnded=null] - Optional onEnded callback to set on emitter\r\n * @example\r\n * playPositionalAudio(audioLoader, exhaustEmitter, 'audio/exhaust/idle.ogg', {\r\n *   store: soundEngine,\r\n *   storeKey: 'exhaustIdleBuffer',\r\n *   loop: true,\r\n *   refDistance: 15,\r\n *   volume: 0.8\r\n * });\r\n */\r\nexport function playPositionalAudio(audioLoader, emitter, path, { store = null, storeKey = null, loop = false, refDistance = 20, volume = null, offset = 0, onEnded = null } = {}) {\r\n    const playBuffer = (buffer) => {\r\n        try {\r\n            emitter.stop()\r\n            emitter.setBuffer(buffer)\r\n            emitter.setRefDistance(refDistance)\r\n            emitter.setLoop(loop)\r\n            if (typeof volume === 'number' && emitter.setVolume) emitter.setVolume(volume)\r\n            if (onEnded) emitter.onEnded = onEnded\r\n            emitter.play()\r\n        } catch (err) {\r\n            console.error('Failed to play positional audio:', err)\r\n        }\r\n    }\r\n\r\n    if (store && storeKey && store[storeKey]) {\r\n        playBuffer(store[storeKey])\r\n        return\r\n    }\r\n\r\n    loadAudioFile(audioLoader, path).then(buffer => {\r\n        if (store && storeKey) store[storeKey] = buffer\r\n        playBuffer(buffer)\r\n    }).catch(err => {\r\n        console.error('Failed to load and play audio:', path, err)\r\n    })\r\n}\r\n\r\n/**\r\n * Create a line with a clickable button that connects a 2D screen anchor to a 3D world position\r\n * Useful for creating interactive UI elements that point to specific parts of the 3D scene\r\n * @param {Object} opts - Configuration options\r\n * @param {THREE.Vector2} [opts.screenAnchor=new THREE.Vector2(-0.9, 0.9)] - NDC coordinates (x,y) in range [-1,1] for the fixed screen point (e.g. upper-left = [-0.9,0.9])\r\n * @param {THREE.Vector3} [opts.targetLocalPos=new THREE.Vector3(0, 0, 0)] - Position in local space of the target object (e.g. point on car model)\r\n * @param {THREE.Object3D|null} [opts.targetObject=null] - Object3D that the local position belongs to (used to compute world position and raycast intersection)\r\n * @param {string} [opts.label='btn'] - Button text label\r\n * @param {number} [opts.color=0x00ff00] - Hex color for line and button\r\n * @returns {Object} Controller object with methods: { line: THREE.Line, button: HTMLButtonElement, update(camera): void, setVisible(visible): void, getClickable(): HTMLButtonElement, dispose(): void }\r\n * @example\r\n * const exhaustBtn = createLineButton({\r\n *   screenAnchor: new THREE.Vector2(-0.9, 0.8),\r\n *   targetLocalPos: new THREE.Vector3(0, 0, -2),\r\n *   targetObject: carModel,\r\n *   label: 'Exhaust',\r\n *   color: 0xff6600\r\n * });\r\n * // In render loop:\r\n * exhaustBtn.update(camera);\r\n * // Add click handler:\r\n * exhaustBtn.getClickable().addEventListener('click', () => console.log('Exhaust clicked'));\r\n */\r\nexport function createLineButton({ screenAnchor = new THREE.Vector2(-0.9, 0.9), targetLocalPos = new THREE.Vector3(0, 0, 0), targetObject = null, label = 'btn', color = 0x00ff00 } = {}) {\r\n    // Line geometry (two points)\r\n    const points = [new THREE.Vector3(), new THREE.Vector3()]\r\n    const lineGeom = new THREE.BufferGeometry().setFromPoints(points)\r\n    const lineMat = new THREE.LineBasicMaterial({ color: color })\r\n    const line = new THREE.Line(lineGeom, lineMat)\r\n    line.set\r\n\r\n    // Create a DOM button that will be positioned at the line's start point\r\n    let domButton = null\r\n    if (typeof document !== 'undefined') {\r\n        domButton = document.createElement('button')\r\n        domButton.color = color\r\n        domButton.dimmed = false\r\n        domButton.className = 'three-linebutton'\r\n        domButton.style.position = 'absolute'\r\n        domButton.style.padding = '4px 12px'\r\n        domButton.style.border = 'none'\r\n        domButton.style.borderRadius = '12px'\r\n    domButton.style.backgroundColor = colorToHex(color)\r\n        domButton.style.color = '#272727ff'\r\n        domButton.style.fontFamily = 'sans-serif'\r\n        domButton.style.fontSize = '14px'\r\n        domButton.style.cursor = 'pointer'\r\n        domButton.style.transform = 'translate(-50%, -50%)'\r\n        domButton.style.boxShadow = '0 2px 2px rgba(255, 255, 255, 0.24)'\r\n        domButton.style.userSelect = 'none'\r\n        domButton.textContent = label\r\n        document.body.appendChild(domButton)\r\n\r\n        // Add hover effect\r\n        domButton.addEventListener('mouseenter', () => {\r\n            domButton.style.backgroundColor = colorToHex(Math.min(color * 4, 0xffffff))\r\n        })\r\n        domButton.addEventListener('mouseleave', () => {\r\n            domButton.style.backgroundColor = domButton.dimmed ? `#444444` : colorToHex(color)\r\n        })\r\n    }\r\n\r\n    // Raycaster used internally to find intersection point on targetObject\r\n    const raycaster = new THREE.Raycaster()\r\n\r\n    // Track visibility state\r\n    let isVisible = true\r\n    \r\n    // Cache frequently accessed values\r\n    const _ndc = new THREE.Vector3()\r\n    const _dir = new THREE.Vector3()\r\n    const _startPoint = new THREE.Vector3()\r\n    const _targetWorld = new THREE.Vector3()\r\n    const _rayDir = new THREE.Vector3()\r\n    const _endPoint = new THREE.Vector3()\r\n    const _proj = new THREE.Vector3()\r\n    let _canvas = null\r\n    let _canvasRect = null\r\n    let _frameCount = 0\r\n\r\n    // Update function to be called each frame\r\n    function update(camera) {\r\n        // Cache canvas rect every 30 frames to avoid constant DOM queries\r\n        if (_frameCount % 30 === 0 || !_canvas) {\r\n            _canvas = document.querySelector('canvas.webgl')\r\n            if (_canvas) {\r\n                _canvasRect = _canvas.getBoundingClientRect()\r\n            }\r\n        }\r\n        _frameCount++\r\n        \r\n        // Compute world start point from screenAnchor (NDC) at z = 0.5\r\n        _ndc.set(screenAnchor.x, screenAnchor.y, 0.5)\r\n        _ndc.unproject(camera)\r\n        _dir.copy(_ndc).sub(camera.position).normalize()\r\n        // set a reasonable distance for the start point along the ray (near camera)\r\n        _startPoint.copy(camera.position).add(_dir.multiplyScalar(1.0))\r\n\r\n        // Compute target world position from targetLocalPos / targetObject\r\n        if (targetObject) {\r\n            _targetWorld.copy(targetLocalPos)\r\n            targetObject.localToWorld(_targetWorld)\r\n        } else {\r\n            _targetWorld.copy(targetLocalPos)\r\n        }\r\n\r\n        // Raycast from camera towards targetWorld to find intersection with targetObject (car)\r\n        _rayDir.copy(_targetWorld).sub(camera.position).normalize()\r\n        raycaster.set(camera.position, _rayDir)\r\n        _endPoint.copy(_targetWorld)\r\n        \r\n        if (targetObject) {\r\n            const hits = raycaster.intersectObject(targetObject, true)\r\n            if (hits && hits.length > 0) {\r\n                _endPoint.copy(hits[0].point)\r\n            }\r\n        }\r\n\r\n        // Update line geometry positions (startPoint -> endPoint)\r\n        const posAttr = line.geometry.attributes.position\r\n        posAttr.setXYZ(0, _startPoint.x, _startPoint.y, _startPoint.z)\r\n        posAttr.setXYZ(1, _endPoint.x, _endPoint.y, _endPoint.z)\r\n        posAttr.needsUpdate = true\r\n\r\n        // Update DOM button position at the line's start point\r\n        if (domButton && _canvasRect) {\r\n            _proj.copy(_startPoint).project(camera)\r\n            // Hide if behind camera or offscreen\r\n            if (!isVisible || _proj.z > 1 || _proj.z < -1 || _proj.x < -1.2 || _proj.x > 1.2 || _proj.y < -1.2 || _proj.y > 1.2) {\r\n                domButton.style.display = 'none'\r\n            } else {\r\n                domButton.style.display = ''\r\n                const x = (_proj.x * 0.5 + 0.5) * _canvasRect.width + _canvasRect.left\r\n                const y = (-_proj.y * 0.5 + 0.5) * _canvasRect.height + _canvasRect.top\r\n                domButton.style.left = `${x}px`\r\n                domButton.style.top = `${y}px`\r\n            }\r\n        }\r\n    }\r\n\r\n    // Toggle visibility of both line and DOM button\r\n    function setVisible(visible) {\r\n        isVisible = visible\r\n        line.visible = visible\r\n        if (domButton) {\r\n            domButton.style.display = visible ? '' : 'none'\r\n        }\r\n    }\r\n\r\n    // Clean up DOM element and event listeners\r\n    function dispose() {\r\n        if (domButton && domButton.parentElement) {\r\n            domButton.removeEventListener('mouseenter', null)\r\n            domButton.removeEventListener('mouseleave', null)\r\n            domButton.parentElement.removeChild(domButton)\r\n            domButton = null\r\n        }\r\n        if (line.geometry) {\r\n            line.geometry.dispose()\r\n        }\r\n        if (line.material) {\r\n            line.material.dispose()\r\n        }\r\n    }\r\n\r\n    return {\r\n        line,\r\n        button: domButton,\r\n        update,\r\n        setVisible,\r\n        dispose\r\n    }\r\n}\r\n","/**\r\n * @fileoverview Particle system for exhaust smoke visualization with object pooling\r\n * @module systems/exhaust\r\n */\r\n\r\nimport * as THREE from 'three'\r\n\r\n/** Maximum number of particles that can be active simultaneously */\r\nconst MAX_PARTICLES = 1000\r\n\r\n/** Shared geometry for all smoke particles */\r\nconst smokeGeometry = new THREE.BufferGeometry()\r\n\r\n/** Position buffer for particle vertices (xyz per particle) */\r\nconst smokePositions = new Float32Array(MAX_PARTICLES * 3)\r\n\r\n/** Color buffer for particles (RGBA per particle) */\r\nconst smokeColors = new Float32Array(MAX_PARTICLES * 4)\r\n\r\n/** Size buffer for particles */\r\nconst smokeSizes = new Float32Array(MAX_PARTICLES)\r\n\r\nsmokeGeometry.setAttribute('position', new THREE.BufferAttribute(smokePositions, 3))\r\nsmokeGeometry.setAttribute('color', new THREE.BufferAttribute(smokeColors, 4))\r\nsmokeGeometry.setAttribute('size', new THREE.BufferAttribute(smokeSizes, 1))\r\n\r\n/** Material for smoke particles with additive blending */\r\nconst smokeMaterial = new THREE.PointsMaterial({\r\n    size: 0.1,\r\n    vertexColors: true,\r\n    transparent: true,\r\n    opacity: 0.5,\r\n    blending: THREE.AdditiveBlending\r\n})\r\n\r\n/** Three.js Points mesh for rendering all particles */\r\nconst smokePoints = new THREE.Points(smokeGeometry, smokeMaterial)\r\n\r\n/**\r\n * Object pool for particle management\r\n * Reuses particle objects to minimize garbage collection pressure\r\n * @namespace\r\n */\r\nconst particlePool = {\r\n    /** @type {Array<Object>} Pool of reusable particle objects */\r\n    pool: [],\r\n    /** @type {Array<Object>} Active particles currently in use */\r\n    active: [],\r\n    \r\n    /**\r\n     * Acquires a particle from the pool or creates a new one if pool is empty\r\n     * @returns {Object} A particle object with default properties\r\n     */\r\n    acquire() {\r\n        let particle\r\n        if (this.pool.length > 0) {\r\n            particle = this.pool.pop()\r\n        } else {\r\n            // Create new particle object if pool is empty\r\n            particle = {\r\n                offset: [0, 0, 0],\r\n                scale: [0, 0],\r\n                quaternion: [0, 0, 0, 0],\r\n                rotation: 0,\r\n                color: [1, 1, 1, 1],\r\n                blend: 0,\r\n                texture: 0,\r\n                live: 0,\r\n                scaleIncrease: 0,\r\n                opacityDecrease: 0,\r\n                colorFrom: [0, 0, 0],\r\n                colorTo: [0, 0, 0],\r\n                colorSpeed: 0,\r\n                colorProgress: 0\r\n            }\r\n        }\r\n        this.active.push(particle)\r\n        return particle\r\n    },\r\n    \r\n    /**\r\n     * Returns a particle to the pool for later reuse\r\n     * @param {Object} particle - The particle to release\r\n     */\r\n    release(particle) {\r\n        const index = this.active.indexOf(particle)\r\n        if (index > -1) {\r\n            this.active.splice(index, 1)\r\n            this.pool.push(particle)\r\n        }\r\n    },\r\n    \r\n    /**\r\n     * Gets the count of currently active particles\r\n     * @returns {number} Number of particles in use\r\n     */\r\n    getActiveCount() {\r\n        return this.active.length\r\n    },\r\n    \r\n    /**\r\n     * Clears all active particles and returns them to the pool\r\n     */\r\n    clear() {\r\n        // Return all active particles to pool\r\n        while (this.active.length > 0) {\r\n            this.pool.push(this.active.pop())\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Particle system for exhaust smoke effects\r\n * Manages smoke particle emission, animation, and rendering\r\n * @namespace\r\n */\r\nexport const particleSystem = {\r\n    /** @type {Array<Object>} Array of particle emitters */\r\n    emitters: [],\r\n    /** @type {boolean} Global enable/disable flag */\r\n    enabled: true,\r\n    /** @type {boolean} Visibility flag for culling when off-screen */\r\n    visible: true,\r\n    /** @type {boolean} Backfire effect active flag */\r\n    backfireActive: false,\r\n    /** @type {number} Backfire elapsed time tracker */\r\n    backfireElapsed: 0,\r\n    /** @type {number} Backfire duration in seconds */\r\n    backfireDuration: 0.5,\r\n    \r\n    /**\r\n     * Initializes the particle system and creates exhaust emitters\r\n     */\r\n    initialize: () => {\r\n        // Create exhaust emitter for tailpipe\r\n        const exhaustEmitter = {\r\n            enabled: false,\r\n            position: new THREE.Vector3(-0.5, 0.3, -2.0), // Tailpipe position relative to car\r\n            settings: {\r\n                radius1: 0.02,\r\n                radius2: 0.1,\r\n                radiusHeight: 0.2,\r\n                addTime: 0.02,\r\n                elapsed: 0,\r\n                liveTimeFrom: 1.0,\r\n                liveTimeTo: 1.5,\r\n                opacityDecrease: 0.008,\r\n                rotationFrom: 0.5,\r\n                rotationTo: 1.0,\r\n                speedFrom: 0.003,\r\n                speedTo: 0.006,\r\n                scaleFrom: 0.1,\r\n                scaleIncrease: 0.002,\r\n                colorFrom: [0.9, 0.9, 0.9],\r\n                colorTo: [0.5, 0.5, 0.5],\r\n                colorSpeedFrom: 1.0,\r\n                colorSpeedTo: 1.0,\r\n                brightnessFrom: 0.5,\r\n                brightnessTo: 0.9,\r\n                opacity: 0.6,\r\n                blend: 0.8,\r\n                texture: 0.5  // Smoke texture\r\n            },\r\n            // Backfire particle settings - red/orange/yellow flames shooting backward\r\n            backfireSettings: {\r\n                radius1: 0.02,\r\n                radius2: 0.03,\r\n                radiusHeight: 0.01, // Positive for slight upward trajectory\r\n                addTime: 0.005, // Rapid emission\r\n                elapsed: 0,\r\n                liveTimeFrom: 0.2,\r\n                liveTimeTo: 0.4,\r\n                opacityDecrease: 0.02,\r\n                rotationFrom: 2.0,\r\n                rotationTo: 4.0,\r\n                speedFrom: 0.01, // Reduced from 0.03\r\n                speedTo: 0.02,   // Reduced from 0.06\r\n                scaleFrom: 0.15,\r\n                scaleIncrease: -0.003, // Shrink over time\r\n                colorFrom: [1.0, 0.3, 0.1], // Bright red-orange\r\n                colorTo: [0.9, 0.6, 0.0], // Yellow-orange\r\n                colorSpeedFrom: 2.0,\r\n                colorSpeedTo: 3.0,\r\n                brightnessFrom: 0.8,\r\n                brightnessTo: 1.0,\r\n                opacity: 0.8,\r\n                blend: 1.0,\r\n                texture: 0.3\r\n            }\r\n        }\r\n        particleSystem.emitters.push(exhaustEmitter)\r\n    },\r\n    \r\n    /**\r\n     * Updates particle system - creates new particles and updates existing ones\r\n     * @param {number} deltaTime - Time elapsed since last frame in seconds\r\n     * @param {string} engineState - Current engine state ('stop', 'drive', 'accel', 'decel')\r\n     */\r\n    update: (deltaTime, engineState) => {\r\n        // Skip particle updates if system is disabled or not visible\r\n        if (!particleSystem.enabled || !particleSystem.visible) {\r\n            return\r\n        }\r\n        \r\n        // Track backfire effect timing\r\n        if (particleSystem.backfireActive) {\r\n            particleSystem.backfireElapsed += deltaTime\r\n            if (particleSystem.backfireElapsed >= particleSystem.backfireDuration) {\r\n                particleSystem.backfireActive = false\r\n                particleSystem.backfireElapsed = 0\r\n            }\r\n        }\r\n        \r\n        // Update emitters and create new particles\r\n        particleSystem.emitters.forEach(emitter => {\r\n            // Determine which settings to use based on backfire state\r\n            const activeSettings = particleSystem.backfireActive ? emitter.backfireSettings : emitter.settings\r\n            \r\n            if (engineState !== 'stop' || particleSystem.backfireActive) {\r\n                emitter.enabled = true\r\n                \r\n                // Use backfire settings if active, otherwise adjust based on engine state\r\n                if (particleSystem.backfireActive) {\r\n                    activeSettings.elapsed += deltaTime\r\n                } else {\r\n                    activeSettings.addTime = engineState === 'accel' ? 0.01 : 0.02 // More particles during acceleration  \r\n                    activeSettings.speedFrom = engineState === 'accel' ? 0.005 : 0.003\r\n                    activeSettings.speedTo = engineState === 'accel' ? 0.008 : 0.006\r\n                    activeSettings.elapsed += deltaTime\r\n                }\r\n            } else {\r\n                emitter.enabled = false\r\n            }\r\n\r\n            if (emitter.enabled) {\r\n                let add = 0\r\n                add = Math.floor(activeSettings.elapsed / activeSettings.addTime)\r\n                activeSettings.elapsed -= add * activeSettings.addTime\r\n\r\n                while (add--) {\r\n                    // Enforce max particle limit to prevent unbounded memory growth\r\n                    if (particlePool.getActiveCount() >= MAX_PARTICLES) {\r\n                        break\r\n                    }\r\n\r\n                    // Acquire particle from pool\r\n                    const p = particlePool.acquire()\r\n\r\n                    // Initialize particle position\r\n                    const radius1 = activeSettings.radius1 * Math.sqrt(Math.random())\r\n                    const theta = 2 * Math.PI * Math.random()\r\n                    const x1 = emitter.position.x + radius1 * Math.cos(theta)\r\n                    const z1 = emitter.position.z + radius1 * Math.sin(theta)\r\n\r\n                    const radius2 = activeSettings.radius2 * Math.sqrt(Math.random())\r\n                    const x2 = x1 + radius2 * Math.cos(theta)\r\n                    const z2 = z1 + radius2 * Math.sin(theta)\r\n\r\n                    const direction = new THREE.Vector3(\r\n                        x2 - x1,\r\n                        activeSettings.radiusHeight,\r\n                        z2 - z1\r\n                    ).normalize()\r\n\r\n                    const speed = Math.random() * (activeSettings.speedTo - activeSettings.speedFrom) + activeSettings.speedFrom\r\n                    direction.multiplyScalar(speed)\r\n\r\n                    const brightness = Math.random() * (activeSettings.brightnessTo - activeSettings.brightnessFrom) + activeSettings.brightnessFrom\r\n\r\n                    // Reuse particle object instead of creating new one\r\n                    p.offset[0] = x1\r\n                    p.offset[1] = emitter.position.y\r\n                    p.offset[2] = z1\r\n                    p.scale[0] = activeSettings.scaleFrom\r\n                    p.scale[1] = activeSettings.scaleFrom\r\n                    p.quaternion[0] = direction.x\r\n                    p.quaternion[1] = direction.y\r\n                    p.quaternion[2] = direction.z\r\n                    p.quaternion[3] = 3\r\n                    p.rotation = Math.random() * (activeSettings.rotationTo - activeSettings.rotationFrom) + activeSettings.rotationFrom\r\n                    p.color[0] = 1\r\n                    p.color[1] = 1\r\n                    p.color[2] = 1\r\n                    p.color[3] = activeSettings.opacity\r\n                    p.blend = activeSettings.blend\r\n                    p.texture = activeSettings.texture\r\n                    p.live = Math.random() * (activeSettings.liveTimeTo - activeSettings.liveTimeFrom) + activeSettings.liveTimeFrom\r\n                    p.scaleIncrease = activeSettings.scaleIncrease\r\n                    p.opacityDecrease = activeSettings.opacityDecrease\r\n                    p.colorFrom[0] = activeSettings.colorFrom[0] * brightness\r\n                    p.colorFrom[1] = activeSettings.colorFrom[1] * brightness\r\n                    p.colorFrom[2] = activeSettings.colorFrom[2] * brightness\r\n                    p.colorTo[0] = activeSettings.colorTo[0] * brightness\r\n                    p.colorTo[1] = activeSettings.colorTo[1] * brightness\r\n                    p.colorTo[2] = activeSettings.colorTo[2] * brightness\r\n                    p.colorSpeed = Math.random() * (activeSettings.colorSpeedTo - activeSettings.colorSpeedFrom) + activeSettings.colorSpeedFrom\r\n                    p.colorProgress = 0\r\n                }\r\n            }\r\n        });\r\n\r\n        // Update existing particles (iterate backwards for safe removal)\r\n        const activeParticles = particlePool.active\r\n        for (let i = activeParticles.length - 1; i >= 0; i--) {\r\n            const p = activeParticles[i]\r\n\r\n            // Update particle position based on quaternion direction\r\n            p.offset[0] += p.quaternion[0]\r\n            p.offset[1] += p.quaternion[1]\r\n            p.offset[2] += p.quaternion[2]\r\n\r\n            // Update scale\r\n            p.scale[0] += p.scaleIncrease\r\n            p.scale[1] += p.scaleIncrease\r\n\r\n            // Update color\r\n            p.colorProgress += p.colorSpeed\r\n            if (p.colorProgress > 1) p.colorProgress = 1\r\n            p.color[0] = p.colorFrom[0] + (p.colorTo[0] - p.colorFrom[0]) * p.colorProgress\r\n            p.color[1] = p.colorFrom[1] + (p.colorTo[1] - p.colorFrom[1]) * p.colorProgress\r\n            p.color[2] = p.colorFrom[2] + (p.colorTo[2] - p.colorFrom[2]) * p.colorProgress\r\n\r\n            // Update opacity\r\n            p.color[3] -= p.opacityDecrease\r\n\r\n            // Remove dead particles and return to pool\r\n            p.live -= deltaTime\r\n            if (p.live <= 0 || p.color[3] <= 0 || p.scale[0] <= 0) {\r\n                particlePool.release(p)\r\n                continue\r\n            }\r\n        }\r\n\r\n        // Update geometry buffers from active particles (forward iteration for correct indexing)\r\n        const activeCount = particlePool.getActiveCount()\r\n        for (let i = 0; i < activeCount; i++) {\r\n            const p = activeParticles[i]\r\n            \r\n            // Update particle attributes in geometry\r\n            const idx = i * 3\r\n            smokePositions[idx] = p.offset[0]\r\n            smokePositions[idx + 1] = p.offset[1]\r\n            smokePositions[idx + 2] = p.offset[2]\r\n\r\n            const colorIdx = i * 4\r\n            smokeColors[colorIdx] = p.color[0]\r\n            smokeColors[colorIdx + 1] = p.color[1]\r\n            smokeColors[colorIdx + 2] = p.color[2]\r\n            smokeColors[colorIdx + 3] = p.color[3]\r\n\r\n            smokeSizes[i] = p.scale[0]\r\n        }\r\n\r\n        // Tell Three.js to only render the active particles by setting draw range\r\n        smokeGeometry.setDrawRange(0, activeCount)\r\n\r\n        // Only update geometry if we have active particles\r\n        if (activeCount > 0) {\r\n            smokeGeometry.attributes.position.needsUpdate = true\r\n            smokeGeometry.attributes.color.needsUpdate = true\r\n            smokeGeometry.attributes.size.needsUpdate = true\r\n        }\r\n    },\r\n    \r\n    /**\r\n     * Gets the Three.js Points mesh for rendering\r\n     * @returns {THREE.Points} The smoke particles mesh\r\n     */\r\n    getMesh: () => {\r\n        return smokePoints\r\n    },\r\n    \r\n    /**\r\n     * Disposes of all particle system resources\r\n     * Cleans up geometry, material, and particle pool\r\n     */\r\n    dispose: () => {\r\n        // Clear particle pool\r\n        particlePool.clear()\r\n        \r\n        // Dispose geometry and material\r\n        if (smokeGeometry) {\r\n            smokeGeometry.dispose()\r\n        }\r\n        if (smokeMaterial) {\r\n            smokeMaterial.dispose()\r\n        }\r\n        \r\n        // Clear emitters\r\n        particleSystem.emitters.length = 0\r\n    },\r\n    \r\n    /**\r\n     * Gets performance statistics about the particle system\r\n     * @returns {Object} Stats object\r\n     * @returns {number} return.activeParticles - Number of currently active particles\r\n     * @returns {number} return.pooledParticles - Number of particles available in pool\r\n     * @returns {number} return.totalAllocated - Total particles allocated in memory\r\n     */\r\n    getStats: () => {\r\n        return {\r\n            activeParticles: particlePool.getActiveCount(),\r\n            pooledParticles: particlePool.pool.length,\r\n            totalAllocated: particlePool.active.length + particlePool.pool.length\r\n        }\r\n    },\r\n    \r\n    /**\r\n     * Triggers a backfire particle effect - shoots red/orange/yellow particles backward\r\n     * Effect lasts for approximately 0.5 seconds then returns to normal smoke\r\n     * @param {number} [duration=0.5] - Optional duration override in seconds\r\n     */\r\n    triggerBackfire: (duration = 0.5) => {\r\n        particleSystem.backfireActive = true\r\n        particleSystem.backfireElapsed = 0\r\n        particleSystem.backfireDuration = duration\r\n        console.log(`🔥 Backfire triggered (${duration}s)`)\r\n    }\r\n}","/**\r\n * @fileoverview Audio volume meters for visualizing positional audio emitter levels\r\n * @module systems/meters\r\n */\r\n\r\nimport * as THREE from 'three'\r\nimport { SoloBtnColors } from './constants.js'\r\nimport { colorToHex } from './helpers.js'\r\n\r\n/**\r\n * Creates an audio mixer panel with volume meters for each emitter\r\n * Displays real-time volume levels with color-coded bars\r\n * \r\n * @param {Object} options - Configuration options\r\n * @param {Object.<string, THREE.PositionalAudio>} [options.emitters={}] - Map of audio emitters to monitor\r\n * @param {boolean} [options.initialVisible=false] - Whether the panel should be visible initially\r\n * @returns {Object} Mixer instance with control methods\r\n * @returns {Function} return.update - Updates all volume meters (call once per frame)\r\n * @returns {Function} return.setVisible - Shows/hides the mixer panel\r\n * @returns {Function} return.dispose - Removes panel and cleans up resources\r\n * \r\n * @example\r\n * const audioMeters = createMixer({ \r\n *     emitters: { intake, exhaust, interior },\r\n *     initialVisible: true \r\n * })\r\n * \r\n * function animate() {\r\n *     audioMeters.update()\r\n *     // ... rendering code\r\n * }\r\n */\r\nexport function createMixer({ emitters = {}, initialVisible = false } = {}) {\r\n    let visible = initialVisible\r\n    let panel = null\r\n    const analysers = new Map() // Store audio analysers for each emitter\r\n\r\n    /**\r\n     * Ensures the mixer panel DOM element exists\r\n     * @private\r\n     * @returns {HTMLDivElement} The mixer panel element\r\n     */\r\n    function ensurePanel() {\r\n        if (panel) return panel\r\n        panel = document.createElement('div')\r\n        panel.id = 'audio-volume-panel'\r\n        Object.assign(panel.style, {\r\n            position: 'fixed',\r\n            bottom: '10px', // Lower right corner\r\n            right: '10px',\r\n            padding: '8px',\r\n            background: 'rgba(0,0,0,0.6)',\r\n            color: '#fff',\r\n            borderRadius: '6px',\r\n            zIndex: 9999,\r\n            fontFamily: 'monospace',\r\n            fontSize: '12px',\r\n            pointerEvents: 'none',\r\n            display: visible ? '' : 'none'\r\n        })\r\n        document.body.appendChild(panel)\r\n        return panel\r\n    }\r\n\r\n    /**\r\n     * Builds a single volume meter row for an emitter\r\n     * @private\r\n     * @param {string} pos - Emitter position name (intake, exhaust, interior, mix)\r\n     * @returns {HTMLDivElement} The meter row element\r\n     */\r\n    function buildRow(pos) {\r\n        const row = document.createElement('div')\r\n        row.dataset.pos = pos\r\n        Object.assign(row.style, {\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            marginBottom: '6px',\r\n            pointerEvents: 'auto',\r\n            flexDirection: 'row'\r\n        })\r\n\r\n        const label = document.createElement('div')\r\n        label.className = 'vol-label'\r\n        label.textContent = pos\r\n        Object.assign(label.style, {\r\n            width: '70px',\r\n            textTransform: 'capitalize'\r\n        })\r\n\r\n        const barContainer = document.createElement('div')\r\n        barContainer.className = 'vol-bar-container'\r\n        Object.assign(barContainer.style, {\r\n            width: '64px',\r\n            height: '12px',\r\n            background: 'rgba(255,255,255,0.08)',\r\n            borderRadius: '3px',\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            overflow: 'hidden',\r\n            marginLeft: '8px',\r\n            marginRight: '8px'\r\n        })\r\n\r\n        const barInner = document.createElement('div')\r\n        barInner.className = 'vol-bar'\r\n        Object.assign(barInner.style, {\r\n            width: '0%',\r\n            height: '100%',\r\n            background: '#666', // fallback until mapped color applied\r\n            transition: 'width 0.08s linear'\r\n        })\r\n\r\n        // const value = document.createElement('div')\r\n        // value.className = 'vol-value'\r\n        // Object.assign(value.style, {\r\n        //     marginLeft: '8px',\r\n        //     minWidth: '36px',\r\n        //     textAlign: 'right'\r\n        // })\r\n        // value.textContent = '0%'\r\n\r\n        // Apply color from SoloBtnColors mapping based on position key\r\n        const soloColorKey = pos.toUpperCase()\r\n        if (SoloBtnColors[soloColorKey] !== undefined) {\r\n            barInner.style.background = colorToHex(SoloBtnColors[soloColorKey])\r\n        }\r\n\r\n        barContainer.appendChild(barInner)\r\n        row.appendChild(label)\r\n        row.appendChild(barContainer)\r\n        // row.appendChild(value)\r\n        return row\r\n    }\r\n\r\n    /**\r\n     * Creates an audio analyser for an emitter if one doesn't exist\r\n     * @private\r\n     * @param {string} pos - Emitter position name\r\n     * @param {THREE.PositionalAudio} emitter - The audio emitter to analyze\r\n     * @returns {THREE.AudioAnalyser|undefined} The analyser instance\r\n     */\r\n    function ensureAnalyser(pos, emitter) {\r\n        if (!analysers.has(pos) && emitter?.getOutput()) {\r\n            const analyser = new THREE.AudioAnalyser(emitter, 32)\r\n            analysers.set(pos, analyser)\r\n        }\r\n        return analysers.get(pos)\r\n    }\r\n\r\n    /**\r\n     * Calculates the current volume level for an emitter\r\n     * @private\r\n     * @param {string} pos - Emitter position name\r\n     * @param {THREE.PositionalAudio} emitter - The audio emitter\r\n     * @returns {number} Volume level (0-1)\r\n     */\r\n    function getEmitterVolume(pos, emitter) {\r\n        const analyser = ensureAnalyser(pos, emitter)\r\n        if (!analyser) return 0\r\n\r\n        const volume = analyser.getAverageFrequency() / 255 // Normalize to 0-1\r\n        const soloScaling = emitter && emitter.getVolume ? emitter.getVolume() : 0\r\n        return volume * soloScaling\r\n    }\r\n\r\n    /**\r\n     * Updates all volume meters with current audio levels\r\n     * Should be called once per frame\r\n     */\r\n    function update() {\r\n        const p = ensurePanel()\r\n        Object.entries(emitters).forEach(([pos, emitter]) => {\r\n            // Disabling mix row, as now just using separate assets for mix\r\n            if (pos === 'mix') return\r\n            \r\n            let row = p.querySelector(`[data-pos=\"${pos}\"]`)\r\n            if (!row) {\r\n                row = buildRow(pos)\r\n                p.appendChild(row)\r\n            }\r\n\r\n            const volume = getEmitterVolume(pos, emitter) * 3\r\n            const barInner = row.querySelector('.vol-bar')\r\n            barInner.style.width = `${Math.max(0, Math.min(1, volume)) * 100}%`\r\n            \r\n            // const value = row.querySelector('.vol-value')\r\n            // value.textContent = `${Math.round(volume * 100)}%`\r\n        })\r\n        panel.style.display = visible ? '' : 'none'\r\n    }\r\n\r\n    /**\r\n     * Sets the visibility of the mixer panel\r\n     * @param {boolean} v - Whether the panel should be visible\r\n     */\r\n    function setVisible(v) {\r\n        visible = !!v\r\n        if (panel) panel.style.display = visible ? '' : 'none'\r\n    }\r\n\r\n    /**\r\n     * Cleans up audio analysers and removes the mixer panel from DOM\r\n     */\r\n    function dispose() {\r\n        // Clean up analysers\r\n        analysers.forEach(analyser => {\r\n            if (analyser && analyser.analyser) {\r\n                try {\r\n                    analyser.analyser.disconnect()\r\n                } catch (err) {\r\n                    console.warn('Error disposing analyser:', err)\r\n                }\r\n            }\r\n        })\r\n        analysers.clear()\r\n\r\n        // Remove DOM panel\r\n        if (panel && panel.parentElement) {\r\n            panel.parentElement.removeChild(panel)\r\n            panel = null\r\n        }\r\n    }\r\n\r\n    return {\r\n        update,\r\n        setVisible,\r\n        isVisible: () => visible,\r\n        dispose\r\n    }\r\n}\r\n","/**\r\n * @fileoverview Control panel for ignition, throttle, and other inputs\r\n * @module systems/controls\r\n */\r\n\r\nimport { ThrottleMap } from './constants.js'\r\n\r\n/**\r\n * Creates the controls panel\r\n * \r\n * @param {Object} options - Configuration options\r\n * @param {boolean} [options.initialVisible=false] - Whether the panel should be visible initially\r\n * @returns {Object} Panel instance with control methods\r\n * @returns {Function} return.update - Updates all controls (call once per frame)\r\n * @returns {Function} return.setVisible - Shows/hides the controls panel\r\n * @returns {Function} return.dispose - Removes panel and cleans up resources\r\n * \r\n * @example\r\n * const controls = createControls({\r\n *     initialVisible: true \r\n * })\r\n * \r\n * function animate() {\r\n *     controls.update()\r\n *     // ... rendering code\r\n * }\r\n */\r\nexport function createControls({ initVisible = false, initIgnition = false, initHeadlights = true } = {}) {\r\n    let panel = null\r\n    let visible = initVisible\r\n\r\n    let ignitionBtn = null\r\n    let ignitionOn = initIgnition\r\n    let ignitionCallback = null\r\n\r\n    let headlightsBtn = null\r\n    let headlightsOn = initHeadlights\r\n    let headlightsCallback = null\r\n\r\n    let throttleBtn = null\r\n    let throttlePressStart = 0\r\n    let throttlePressed = false\r\n    let throttleCallback = null\r\n\r\n    /**  \r\n     * Sets the callback for ignition toggle\r\n     * @param {Function} callback - The callback function to call on ignition toggle\r\n     */\r\n    function registerIgnitionCallback(callback) {\r\n        ignitionCallback = callback\r\n    }\r\n\r\n    /**\r\n     * Sets the callback for headlights toggle\r\n     * @param {Function} callback - The callback function to call on headlights toggle\r\n     */\r\n    function registerHeadlightsCallback(callback) {\r\n        headlightsCallback = callback\r\n    }\r\n\r\n    /**\r\n     * Sets the callback for throttle change\r\n     * @param {Function} callback - The callback function to call on throttle change\r\n     */\r\n    function registerThrottleCallback(callback) {\r\n        throttleCallback = callback\r\n    }\r\n\r\n    /**\r\n     * Ensures the controls panel DOM element exists\r\n     * @private\r\n     * @returns {HTMLDivElement} The controls panel element\r\n     */\r\n    function ensurePanel() {\r\n        if (panel) return panel\r\n        panel = document.createElement('div')\r\n        panel.id = 'controls-panel'\r\n        Object.assign(panel.style, {\r\n            position: 'fixed',\r\n            top: '10px', // Upper left corner\r\n            left: '10px',\r\n            padding: '8px',\r\n            background: 'rgba(0,0,0,0.0)', // Transparent\r\n            color: '#fff',\r\n            border: 'none',\r\n            zIndex: 9999,\r\n            fontFamily: 'monospace',\r\n            fontSize: '12px',\r\n            pointerEvents: 'auto',\r\n            display: visible ? '' : 'none'\r\n        })\r\n\r\n        // Circular \"Push to Start/Stop\" button\r\n        ignitionBtn = document.createElement('button')\r\n        ignitionBtn.className = 'ignition-toggle'\r\n        ignitionBtn.innerHTML = `\r\n            <span class=\"ignition-start\" style=\"font-weight:bold;color:#fff;\">START</span>\r\n            <span class=\"ignition-stop\" style=\"color:#aaa;\">STOP</span>\r\n        `\r\n        Object.assign(ignitionBtn.style, {\r\n            display: 'block',\r\n            margin: '4px auto 0 auto', // top margin, auto left/right for centering\r\n            padding: '0',\r\n            width: '75px',\r\n            height: '75px',\r\n            borderRadius: '50%',\r\n            background: 'radial-gradient(circle at 60% 40%, #a00 80%, #cc2f2f 100%)',\r\n            border: '2px solid #fff',\r\n            boxShadow: '0 2px 8px rgba(0,0,0,0.4)',\r\n            cursor: 'pointer',\r\n            color: '#fff',\r\n            fontFamily: 'inherit',\r\n            fontSize: '16px',\r\n            textAlign: 'center',\r\n            lineHeight: '16px',\r\n            position: 'relative',\r\n            transition: 'background 0.2s'\r\n        })\r\n\r\n        // Track ignition state\r\n        function updateIgnitionButton() {\r\n            const startSpan = ignitionBtn.querySelector('.ignition-start')\r\n            const stopSpan = ignitionBtn.querySelector('.ignition-stop')\r\n            if (ignitionOn) {\r\n                startSpan.style.fontWeight = 'normal'\r\n                startSpan.style.color = '#888'\r\n                stopSpan.style.fontWeight = 'bold'\r\n                stopSpan.style.color = '#fff'\r\n                ignitionBtn.style.background = 'radial-gradient(circle at 60% 40%, #cc2f2f 80%, #a00 100%)'\r\n            } else {\r\n                startSpan.style.fontWeight = 'bold'\r\n                startSpan.style.color = '#fff'\r\n                stopSpan.style.fontWeight = 'normal'\r\n                stopSpan.style.color = '#888'\r\n                ignitionBtn.style.background = 'radial-gradient(circle at 60% 40%, #a00 80%, #cc2f2f 100%)'\r\n            }\r\n            if (ignitionCallback) {\r\n                ignitionCallback(ignitionOn)\r\n            }\r\n        }\r\n        panel.appendChild(ignitionBtn)\r\n\r\n        // Headlights toggle button, with dashboard-style headlight symbol\r\n        headlightsBtn = document.createElement('button')\r\n        headlightsBtn.className = 'headlights-toggle'\r\n        headlightsBtn.innerHTML = `\r\n            <span style=\"\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            height: 100%;\r\n            width: 100%;\r\n            position: absolute;\r\n            left: 0; top: 0;\r\n            \">\r\n            <svg width=\"36\" height=\"36\" viewBox=\"0 0 48 48\" xmlns=\"http://www.w3.org/2000/svg\">\r\n            <!-- Bulb -->\r\n            <path d=\"M18 36 A6 6 0 0 1 18 12\" fill=\"none\" stroke=\"#fff\" stroke-width=\"2.2\"/>\r\n            <line x1=\"18\" y1=\"12\" x2=\"18\" y2=\"36\" stroke=\"#fff\" stroke-width=\"2.2\"/>\r\n            <!-- Beams, angled downwards -->\r\n            <line class=\"beam beam-1\" x1=\"26\" y1=\"19\" x2=\"40\" y2=\"23\" stroke=\"#ff0\" stroke-width=\"3\" stroke-linecap=\"round\" opacity=\"1\"/>\r\n            <line class=\"beam beam-2\" x1=\"26\" y1=\"24\" x2=\"40\" y2=\"28\" stroke=\"#ff0\" stroke-width=\"3\" stroke-linecap=\"round\" opacity=\"1\"/>\r\n            <line class=\"beam beam-3\" x1=\"26\" y1=\"29\" x2=\"40\" y2=\"33\" stroke=\"#ff0\" stroke-width=\"3\" stroke-linecap=\"round\" opacity=\"1\"/>\r\n            </svg>\r\n            </span>\r\n        `\r\n        Object.assign(headlightsBtn.style, {\r\n            display: 'block',\r\n            margin: '12px auto 0 auto', // top margin, auto left/right for centering\r\n            padding: '0',\r\n            width: '56px',\r\n            height: '28px',\r\n            borderRadius: '10px',\r\n            background: 'radial-gradient(circle at 60% 40%, #181818 80%, #222 100%)', // dark grey\r\n            border: '2px solid #fff',\r\n            boxShadow: '0 2px 8px rgba(0,0,0,0.4)',\r\n            cursor: 'pointer',\r\n            color: '#fff',\r\n            fontFamily: 'inherit',\r\n            fontSize: '14px',\r\n            textAlign: 'center',\r\n            lineHeight: '14px',\r\n            position: 'relative',\r\n            transition: 'background 0.2s',\r\n            overflow: 'hidden'\r\n        })\r\n\r\n        // Animation helpers\r\n        let beams = null\r\n        let beamsAnimating = false\r\n        function getBeams() {\r\n            if (!beams) {\r\n                beams = [\r\n                    headlightsBtn.querySelector('.beam-1'),\r\n                    headlightsBtn.querySelector('.beam-2'),\r\n                    headlightsBtn.querySelector('.beam-3')\r\n                ]\r\n            }\r\n            return beams\r\n        }\r\n\r\n        function setBeamState(idx, on) {\r\n            const beam = getBeams()[idx]\r\n            beam.setAttribute('stroke', on ? '#ff0' : '#888')\r\n            beam.style.opacity = on ? '1' : '0.5'\r\n        }\r\n\r\n        function animateBeams(turnOn, callback) {\r\n            if (beamsAnimating) return\r\n            beamsAnimating = true\r\n            const beamsArr = getBeams()\r\n            const order = turnOn ? [0, 1, 2] : [2, 1, 0]\r\n            let i = 0\r\n            function step() {\r\n                setBeamState(order[i], turnOn)\r\n                i++\r\n                if (i < order.length) {\r\n                    setTimeout(step, 70)\r\n                } else {\r\n                    beamsAnimating = false\r\n                    if (callback) callback()\r\n                }\r\n            }\r\n            step()\r\n        }\r\n\r\n        function updateHeadlightsButton(animated = false) {\r\n            if (animated) {\r\n                animateBeams(headlightsOn, () => {\r\n                    headlightsBtn.style.background = headlightsOn\r\n                        ? 'radial-gradient(circle at 60% 40%, #222 80%, #333 100%)'\r\n                        : 'radial-gradient(circle at 60% 40%, #181818 80%, #222 100%)'\r\n                    if (headlightsCallback) headlightsCallback(headlightsOn)\r\n                })\r\n            } else {\r\n                getBeams().forEach((beam, idx) => setBeamState(idx, headlightsOn))\r\n                headlightsBtn.style.background = headlightsOn\r\n                    ? 'radial-gradient(circle at 60% 40%, #222 80%, #333 100%)'\r\n                    : 'radial-gradient(circle at 60% 40%, #181818 80%, #222 100%)'\r\n                if (headlightsCallback) headlightsCallback(headlightsOn)\r\n            }\r\n        }\r\n        updateHeadlightsButton(false)\r\n\r\n        panel.appendChild(headlightsBtn)\r\n\r\n        // Throttle pedal button to the right of the ignition button (only visible when ignition is on)\r\n        throttleBtn = document.createElement('button')\r\n        throttleBtn.className = 'throttle-pedal'\r\n        throttleBtn.innerHTML = `\r\n            <span style=\"\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            height: 100%;\r\n            width: 100%;\r\n            position: absolute;\r\n            left: 0; top: 0;\r\n            \">\r\n            <svg width=\"22\" height=\"48\" viewBox=\"0 0 22 48\" xmlns=\"http://www.w3.org/2000/svg\">\r\n            <!-- Pedal body -->\r\n            <rect x=\"4\" y=\"6\" width=\"14\" height=\"36\" rx=\"7\" fill=\"#fff\" stroke=\"#bbb\" stroke-width=\"1.5\"/>\r\n            <!-- Pedal shadow -->\r\n            <rect x=\"6\" y=\"10\" width=\"10\" height=\"28\" rx=\"5\" fill=\"#222\" opacity=\"0.3\"/>\r\n            <!-- Pedal grip lines -->\r\n            <line x1=\"7\" y1=\"13\" x2=\"15\" y2=\"13\" stroke=\"#888\" stroke-width=\"1.2\"/>\r\n            <line x1=\"7\" y1=\"19\" x2=\"15\" y2=\"19\" stroke=\"#888\" stroke-width=\"1.2\"/>\r\n            <line x1=\"7\" y1=\"25\" x2=\"15\" y2=\"25\" stroke=\"#888\" stroke-width=\"1.2\"/>\r\n            <line x1=\"7\" y1=\"31\" x2=\"15\" y2=\"31\" stroke=\"#888\" stroke-width=\"1.2\"/>\r\n            <line x1=\"7\" y1=\"37\" x2=\"15\" y2=\"37\" stroke=\"#888\" stroke-width=\"1.2\"/>\r\n            </svg>\r\n            </span>\r\n        `\r\n        Object.assign(throttleBtn.style, {\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            position: 'absolute',\r\n            left: '92px',\r\n            top: '0',\r\n            height: '60px',\r\n            width: '24px',\r\n            margin: '20px auto 0 auto',\r\n            padding: '0',\r\n            borderRadius: '12px',\r\n            background: 'linear-gradient(to bottom, #444 0%, #222 100%)',\r\n            border: '2px solid #fff',\r\n            boxShadow: '0 2px 8px rgba(0,0,0,0.4)',\r\n            cursor: 'pointer',\r\n            color: '#fff',\r\n            fontFamily: 'inherit',\r\n            fontSize: '12px',\r\n            textAlign: 'center',\r\n            lineHeight: '14px',\r\n            transition: 'background 0.2s',\r\n            visibility: ignitionOn ? 'visible' : 'hidden'\r\n        })\r\n        panel.appendChild(throttleBtn)\r\n\r\n        function updateThrottleVisibility() {\r\n            throttleBtn.style.visibility = ignitionOn ? 'visible' : 'hidden'\r\n        }\r\n        updateThrottleVisibility()\r\n\r\n        // Event listeners\r\n        ignitionBtn.addEventListener('click', () => {\r\n            ignitionOn = !ignitionOn\r\n            updateIgnitionButton()\r\n            updateThrottleVisibility()\r\n        })\r\n\r\n        headlightsBtn.addEventListener('click', () => {\r\n            headlightsOn = !headlightsOn\r\n            updateHeadlightsButton(true)\r\n        })\r\n\r\n        // Use mouse down and mouse up events to simulate pedal press and pass short medium or long presses to throttle callback\r\n        throttleBtn.addEventListener('mousedown', () => {\r\n            throttlePressStart = performance.now()\r\n            throttlePressed = true\r\n        })\r\n        throttleBtn.addEventListener('mouseup', () => {\r\n            throttleBtn.style.background = 'linear-gradient(to bottom, #444 0%, #222 100%)'\r\n            throttlePressed = false\r\n        })\r\n\r\n        document.body.appendChild(panel)\r\n        return panel\r\n    }\r\n\r\n    /**\r\n     * Handle throttle button press duration and trigger callbacks\r\n     */\r\n    function handleThrottlePress() {\r\n        if (throttlePressStart > 0) {\r\n            const pressDuration = performance.now() - throttlePressStart\r\n            \r\n            // Taper button color based on press duration\r\n            const colorValue = Math.max(0, 1 - pressDuration / ThrottleMap.long)    // Goes from 1 down to 0 over time\r\n            throttleBtn.style.background = `linear-gradient(to bottom, rgba(20, 20, 20, ${colorValue}) 100%, rgba(255, 255, 255, ${colorValue}) 100%)`\r\n\r\n            // Fire callback based on thresholds\r\n            if (pressDuration >= ThrottleMap.long) {\r\n                if (throttleCallback) throttleCallback(ThrottleMap.long)\r\n                throttlePressStart = 0\r\n            } else if (pressDuration >= ThrottleMap.medium && !throttlePressed) {\r\n                if (throttleCallback) throttleCallback(ThrottleMap.medium)\r\n                throttlePressStart = 0\r\n            } else if (pressDuration < ThrottleMap.short && !throttlePressed) {\r\n                if (throttleCallback) throttleCallback(ThrottleMap.short)\r\n                throttlePressStart = 0\r\n            } else {\r\n                return // Still pressing\r\n            }\r\n\r\n            // Button released, reset style (or long press threshold reached)\r\n            throttleBtn.style.background = 'linear-gradient(to bottom, #444 0%, #222 100%)'\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates all controls once per frame\r\n     */\r\n    function update() {\r\n        const p = ensurePanel()\r\n\r\n        handleThrottlePress()\r\n\r\n        panel.style.display = visible ? '' : 'none'\r\n    }\r\n\r\n    /**\r\n     * Sets the visibility of the controls panel\r\n     * @param {boolean} v - Whether the panel should be visible\r\n     */\r\n    function setVisible(v) {\r\n        visible = !!v\r\n        if (panel) panel.style.display = visible ? '' : 'none'\r\n    }\r\n\r\n    /**\r\n     * Cleans up removes the controls panel from DOM\r\n     */\r\n    function dispose() {\r\n        // Do other disposal...\r\n\r\n        // Remove DOM panel\r\n        if (panel && panel.parentElement) {\r\n            panel.parentElement.removeChild(panel)\r\n            panel = null\r\n        }\r\n    }\r\n\r\n    return {\r\n        registerIgnitionCallback,\r\n        registerHeadlightsCallback,\r\n        registerThrottleCallback,\r\n        update,\r\n        setVisible,\r\n        isVisible: () => visible,\r\n        dispose\r\n    }\r\n}\r\n","/**\r\n * @fileoverview Lightweight performance monitor for FPS and frame time tracking\r\n * @module systems/stats\r\n */\r\n\r\n/**\r\n * Creates a performance monitor overlay for tracking FPS and frame times\r\n * \r\n * @param {Object} options - Configuration options\r\n * @param {boolean} [options.initialVisible=false] - Whether the stats panel should be visible initially\r\n * @returns {Object} Performance monitor instance with methods for control and data access\r\n * @returns {Function} return.update - Updates performance metrics (call once per frame)\r\n * @returns {Function} return.setVisible - Shows/hides the stats panel\r\n * @returns {Function} return.isVisible - Returns current visibility state\r\n * @returns {Function} return.dispose - Removes the stats panel from DOM\r\n * @returns {Function} return.getStats - Returns current FPS and frame time data\r\n * \r\n * @example\r\n * const perfMonitor = createPerformanceMonitor({ initialVisible: true })\r\n * \r\n * function animate() {\r\n *     perfMonitor.update()\r\n *     renderer.render(scene, camera)\r\n *     requestAnimationFrame(animate)\r\n * }\r\n */\r\nexport function createPerformanceMonitor({ initialVisible = false } = {}) {\r\n    let visible = initialVisible\r\n    let panel = null\r\n    \r\n    // Performance tracking\r\n    let frames = 0\r\n    let prevTime = performance.now()\r\n    let fps = 0\r\n    let frameTime = 0\r\n\r\n    /**\r\n     * Ensures the stats panel DOM element exists\r\n     * @private\r\n     * @returns {HTMLDivElement} The stats panel element\r\n     */\r\n    function ensurePanel() {\r\n        if (panel) return panel\r\n        panel = document.createElement('div')\r\n        panel.id = 'performance-stats'\r\n        Object.assign(panel.style, {\r\n            position: 'fixed',\r\n            bottom: '10px',\r\n            left: '10px',\r\n            padding: '8px',\r\n            background: 'rgba(0,0,0,0.6)',\r\n            color: '#fff',\r\n            borderRadius: '6px',\r\n            zIndex: 9999,\r\n            fontFamily: 'monospace',\r\n            fontSize: '12px',\r\n            pointerEvents: 'none',\r\n            display: visible ? '' : 'none',\r\n            minWidth: '120px'\r\n        })\r\n        document.body.appendChild(panel)\r\n        return panel\r\n    }\r\n\r\n    /**\r\n     * Updates FPS and frame time calculations\r\n     * Should be called once per frame before rendering\r\n     */\r\n    function update() {\r\n        frames++\r\n        const currentTime = performance.now()\r\n        const delta = currentTime - prevTime\r\n\r\n        // Update FPS every second\r\n        if (delta >= 1000) {\r\n            fps = Math.round((frames * 1000) / delta)\r\n            frameTime = delta / frames\r\n            frames = 0\r\n            prevTime = currentTime\r\n        }\r\n\r\n        // Update panel if visible\r\n        if (visible) {\r\n            const p = ensurePanel()\r\n            \r\n            // Color code FPS\r\n            let fpsColor = '#00ff00' // Green\r\n            if (fps < 60) fpsColor = '#ffff00' // Yellow\r\n            if (fps < 30) fpsColor = '#ff0000' // Red\r\n            \r\n            p.innerHTML = `\r\n                <div style=\"margin-bottom: 4px;\">\r\n                    <span style=\"color: #888;\">FPS:</span> \r\n                    <span style=\"color: ${fpsColor}; font-weight: bold;\">${fps}</span>\r\n                </div>\r\n                <div>\r\n                    <span style=\"color: #888;\">Frame:</span> \r\n                    <span>${frameTime.toFixed(2)}ms</span>\r\n                </div>\r\n            `\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the visibility of the performance stats panel\r\n     * @param {boolean} v - Whether the panel should be visible\r\n     */\r\n    function setVisible(v) {\r\n        visible = !!v\r\n        if (panel) panel.style.display = visible ? '' : 'none'\r\n    }\r\n\r\n    /**\r\n     * Removes the stats panel from the DOM and cleans up resources\r\n     */\r\n    function dispose() {\r\n        if (panel && panel.parentElement) {\r\n            panel.parentElement.removeChild(panel)\r\n            panel = null\r\n        }\r\n    }\r\n\r\n    return {\r\n        update,\r\n        setVisible,\r\n        isVisible: () => visible,\r\n        dispose,\r\n        getStats: () => ({ fps, frameTime })\r\n    }\r\n}\r\n","/**\r\n * @fileoverview Main application entry point for rx7sim\r\n * Three.js-based 3D car visualization with spatial audio engine\r\n * Features positional audio with intake/exhaust/interior perspectives,\r\n * particle-based exhaust smoke, dynamic lighting, and HDR environments\r\n * @module script\r\n */\r\n\r\nimport * as THREE from 'three'\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js'\r\nimport { RGBELoader } from 'three/examples/jsm/loaders/RGBELoader.js'\r\nimport { HDRCubeTextureLoader  } from 'three/examples/jsm/loaders/HDRCubeTextureLoader.js'\r\nimport * as dat from 'lil-gui'\r\n\r\nTHREE.ColorManagement.enabled = false\r\n\r\nimport { DriveState, SoloState, SoloBtnColors, EmitterVolMults, ConeEmitterSettings, ThrottleMap, LightingDefaults, EnvironmentPresets } from './systems/constants.js'\r\nimport { colorToHex, disposeObject, disposeTexture, disposeAudioEmitter, disposeAudioAnalyser, checkWebGLSupport, checkWebAudioSupport, showErrorUI, showLoadingUI, loadGLTFModel, loadAudioFile, loadHDRTexture } from './systems/helpers.js'\r\n\r\n/** @type {string} Current driving state (STOP, DRIVE, ACCEL, DECEL) */\r\nvar driveState = DriveState.STOP\r\n\r\n/** @type {string} Current audio solo state (MIX, INTAKE, EXHAUST, INTERIOR) */\r\nvar soloState = SoloState.MIX\r\n\r\nimport { particleSystem } from './systems/exhaust.js'\r\nimport { createDirectionalLights, createHeadlightSpots, playPositionalAudio, createLineButton, createAudioEmitterDebugger } from './systems/helpers.js'\r\nimport { createMixer } from './systems/meters.js'\r\nimport { createControls } from './systems/controls.js'\r\nimport { createPerformanceMonitor } from './systems/stats.js'\r\nimport { resumeAudioContext } from './systems/helpers.js'\r\n\r\n/**\r\n * Feature Detection & Browser Compatibility Check\r\n */\r\nconst webglCheck = checkWebGLSupport()\r\nif (!webglCheck.available) {\r\n    showErrorUI('WebGL Not Supported', webglCheck.error, true)\r\n    throw new Error(webglCheck.error)\r\n}\r\n\r\nconst audioCheck = checkWebAudioSupport()\r\nif (!audioCheck.available) {\r\n    showErrorUI('Web Audio Not Supported', audioCheck.error, true)\r\n    throw new Error(audioCheck.error)\r\n}\r\n\r\n/**\r\n * Setup\r\n */\r\n/**\r\n * Initialization state flags to prevent race conditions during async loading\r\n * @type {Object}\r\n * @property {boolean} modelsLoaded - Whether GLTF models have finished loading\r\n * @property {boolean} audioLoaded - Whether audio files have finished loading\r\n * @property {boolean} sceneReady - Whether the complete scene is ready for rendering\r\n */\r\nconst initState = {\r\n    modelsLoaded: false,\r\n    audioLoaded: false,\r\n    sceneReady: false\r\n}\r\n\r\n/** @type {HTMLCanvasElement} Main WebGL canvas element */\r\nconst canvas = document.querySelector('canvas.webgl')\r\n\r\n/** @type {THREE.Scene} Main Three.js scene */\r\nconst scene = new THREE.Scene()\r\nscene.background = new THREE.Color(0xa0a0a0);\r\nscene.fog = new THREE.FogExp2(0xefd1b5, 0.05);\r\n\r\n/**\r\n * Debug UI controls using lil-gui\r\n */\r\n/** @type {dat.GUI} Main debug GUI controller */\r\nconst dbg = new dat.GUI()\r\n\r\n/** @type {Object} Audio debug settings */\r\nconst dbgAudioSettings = {\r\n    'Meters': true,\r\n    'Emitters': false\r\n}\r\n/** @type {dat.GUI} Audio folder in debug UI */\r\nconst dbgAudio = dbg.addFolder('Audio')\r\n/** @type {dat.Controller|null} Reverb debug controller */\r\nlet dbgAudioReverb = null\r\n/** @type {dat.Controller|null} Meters debug controller */\r\nlet dbgAudioMeters = null\r\n/** @type {dat.Controller|null} Emitters debug controller */\r\nlet dbgAudioEmitters = null\r\n/** @type {dat.Controller|null} Microphone perspective debug controller */\r\nlet dbgAudioMicPersp = null\r\n\r\n/** @type {dat.GUI} Vehicle folder in debug UI */\r\nconst dbgVehicle = dbg.addFolder('Vehicle')\r\n/** @type {dat.Controller|null} Level/environment selector */\r\nlet dbgVehLevelSelect = null\r\n/** @type {dat.Controller|null} Car model selector */\r\nlet dbgVehCarSelect = null\r\n\r\n/** @type {dat.GUI} Performance folder in debug UI */\r\nconst dbgPerformance = dbg.addFolder('Performance')\r\n/** @type {Object} Performance debug settings */\r\nconst dbgPerfSettings = {\r\n    'Show Stats': false\r\n}\r\n/** @type {dat.Controller|null} Stats display controller */\r\nlet dbgPerfStats = null\r\n\r\n// Axes\r\n// const axes = new THREE.AxesHelper(1)\r\n// axes.visible = false\r\n// scene.add(axes)\r\n// dbgUtils.add(axes, 'visible').name('Axes')\r\n\r\n/**\r\n * Asset loaders for models, audio, and HDR textures\r\n */\r\n/** @type {GLTFLoader} Loader for GLTF/GLB 3D models */\r\nconst gltfLoader = new GLTFLoader()\r\n/** @type {THREE.AudioLoader} Loader for audio files */\r\nconst audioLoader = new THREE.AudioLoader()\r\n/** @type {RGBELoader} Loader for RGBE/HDR image files */\r\nconst rgbeLoader = new RGBELoader()\r\n/** @type {HDRCubeTextureLoader} Loader for HDR cube map textures */\r\nconst hdrCubeLoader = new HDRCubeTextureLoader()\r\n\r\n/**\r\n * Floor plane with shadow receiving\r\n * @type {THREE.Mesh}\r\n */\r\nconst floor = new THREE.Mesh(\r\n    new THREE.PlaneGeometry(10, 10),\r\n    new THREE.MeshStandardMaterial({\r\n        color: '#444444',\r\n        metalness: 0,\r\n        roughness: 0.5\r\n    })\r\n)\r\nfloor.receiveShadow = true\r\nfloor.rotation.x = - Math.PI * 0.5\r\nscene.add(floor)\r\n\r\n/**\r\n * HDR Environment Management\r\n */\r\n\r\n/** @type {THREE.Color} Original scene background color to restore when HDR is disabled */\r\nconst originalBackground = scene.background ? scene.background.clone() : new THREE.Color(0xa0a0a0)\r\n\r\n/** @type {THREE.DataTexture|null} Currently loaded HDR texture */\r\nlet currentHDRTexture = null\r\n\r\n/** @type {Array<string>} Available HDR environment options */\r\nconst hdrOptions = ['None', ...Object.keys(EnvironmentPresets)]\r\n\r\n/** @type {Object} Current HDR selection parameter */\r\nconst hdrParams = { HDR: 'None' }\r\ndbgVehLevelSelect = dbgVehicle.add(hdrParams, 'HDR', hdrOptions).name('Level Select').onChange(name => {\r\n    if (name === 'None') {\r\n        // Dispose previously loaded HDR texture and restore defaults\r\n        if (currentHDRTexture) {\r\n            disposeTexture(currentHDRTexture)\r\n            currentHDRTexture = null\r\n        }\r\n        scene.background = originalBackground.clone ? originalBackground.clone() : originalBackground\r\n        scene.environment = null\r\n        floor.visible = true\r\n\r\n        // Reset lighting & atmospheric settings\r\n        applyLightingOverride(null)\r\n        if (scene.fog) {\r\n            scene.fog.color.set(0xefd1b5)\r\n            scene.fog.density = 0.05\r\n        }\r\n        if (typeof renderer.toneMappingExposure === 'number') renderer.toneMappingExposure = baseLightingSnapshot.exposure\r\n\r\n        // Force material refresh (remove stale env-dependent shader variants)\r\n        scene.traverse(obj => {\r\n            if (obj.isMesh && obj.material) {\r\n                if (Array.isArray(obj.material)) obj.material.forEach(m => m.needsUpdate = true)\r\n                else obj.material.needsUpdate = true\r\n            }\r\n        })\r\n\r\n        // Debug log comparison\r\n        console.log('[HDR Reset] Ambient', ambientLight.intensity, ambientLight.color.getHexString())\r\n        directionalLights.forEach((dl,i)=>console.log(`[HDR Reset] Dir${i}`, dl.intensity, dl.color.getHexString()))\r\n        console.log('[HDR Reset] Hemi', hemiLight.intensity, hemiLight.color.getHexString(), hemiLight.groundColor.getHexString())\r\n\r\n        // Remove reverb\r\n        soundEngine.removeConvolutionReverb()\r\n        reverbParams.Reverb = 'None'\r\n        if (dbgAudioReverb) {\r\n            dbgAudioReverb.updateDisplay()\r\n        }\r\n\r\n        return\r\n    }\r\n\r\n    const preset = EnvironmentPresets[name]\r\n    if (!preset) return\r\n    \r\n    const path = typeof preset === 'string' ? preset : preset.path\r\n    const reverbPreset = typeof preset === 'object' ? preset.reverb : null\r\n\r\n    loadHDRTexture(rgbeLoader, path).then((texture) => {\r\n        if (currentHDRTexture) {\r\n            disposeTexture(currentHDRTexture)\r\n        }\r\n\r\n        texture.mapping = THREE.EquirectangularReflectionMapping\r\n        currentHDRTexture = texture\r\n\r\n        scene.background = texture\r\n        scene.environment = texture\r\n\r\n        floor.visible = false\r\n\r\n        if (preset.lighting) {\r\n            applyLightingOverride(preset.lighting)\r\n        }\r\n\r\n        if (reverbPreset && reverbParams) {\r\n            reverbParams.Reverb = reverbPreset\r\n            if (dbgAudioReverb) {\r\n                dbgAudioReverb.updateDisplay()\r\n                const reverbMapEntry = reverbMap[reverbPreset]\r\n                if (reverbMapEntry) {\r\n                    const { path: reverbPath, blend = 0.5, scalingFactor = 1.0 } = reverbMapEntry\r\n                    soundEngine.currentReverbBlend = blend\r\n                    soundEngine.currentReverbScalingFactor = scalingFactor\r\n                    loadAudioFile(new THREE.AudioLoader(), reverbPath).then((buffer) => {\r\n                        soundEngine.applyConvolutionReverb(buffer)\r\n                    }).catch(err => {\r\n                        console.error('Failed to load reverb:', err)\r\n                        showErrorUI('Reverb Load Failed', `Could not load reverb: ${err.message}`, false)\r\n                    })\r\n                }\r\n            }\r\n        }\r\n    }).catch(err => {\r\n        console.error('Failed to load HDR:', err)\r\n        showErrorUI('HDR Load Failed', `Could not load environment: ${err.message}`, false)\r\n    })\r\n})\r\n\r\n\r\n/**\r\n * 3D Objects & Models\r\n */\r\n\r\n/** @type {THREE.Group} Main group container for car model and related objects */\r\nlet carGroup = new THREE.Group()\r\nscene.add(carGroup)\r\ncarGroup.add(particleSystem.getMesh())\r\n\r\n/** @type {Array<Object>} Collection of interactive line button UI elements */\r\nconst lineButtons = []\r\n\r\n/**\r\n * Animation system\r\n * Central object managing all animation mixers and actions for wheels, lights, and headlights\r\n * @type {Object}\r\n * @property {THREE.AnimationMixer|null} mixerWheels - Animation mixer for wheel rotations\r\n * @property {THREE.AnimationAction|null} actWheelsRot - Wheel rotation animation action\r\n * @property {THREE.AnimationAction|null} actTiresRot - Tire rotation animation action\r\n * @property {THREE.AnimationMixer|null} mixerLights - Animation mixer for popup headlights\r\n * @property {THREE.AnimationAction|null} actLights0-4 - Individual light animation actions (5 total)\r\n * @property {THREE.SpotLight|null} headLightL - Left headlight spot light\r\n * @property {THREE.SpotLight|null} headLightR - Right headlight spot light\r\n * @property {boolean} lightsFlipFlop - State toggle for headlight animation direction\r\n * @property {number} lightsIntensity - Current headlight intensity multiplier\r\n * @property {function(): void} lightsTimeScaleToggle - Toggles headlight animation direction\r\n */\r\nlet anims = {\r\n    mixerWheels: null,\r\n    actWheelsRot: null, actTiresRot: null,\r\n\r\n    mixerLights: null,\r\n    actLights0: null, actLights1: null, actLights2: null, actLights3: null, actLights4: null,\r\n    headLightL: null, headLightR: null,\r\n    lightsFlipFlop: true,\r\n    lightsIntensity: 3.0,\r\n    lightsTimeScaleToggle: () => {\r\n        if (!anims.mixerLights) return\r\n\r\n        if (anims.lightsFlipFlop) {\r\n            anims.mixerLights.timeScale = 1.5\r\n            for (let i = 0; i < 5; i++) {\r\n                const key = `actLights${i}`\r\n                if (anims[key]) anims[key].time = 0\r\n            }\r\n            anims.lightsFlipFlop = false\r\n        } else {\r\n            anims.mixerLights.timeScale = -1.5\r\n            for (let i = 0; i < 5; i++) {\r\n                const key = `actLights${i}`\r\n                if (anims[key]) anims[key].time = anims[key].getClip().duration - anims[key].time\r\n            }\r\n            anims.lightsFlipFlop = true\r\n        }\r\n    },\r\n    lights: () => { \r\n        if (!anims.mixerLights) return\r\n        \r\n        anims.mixerLights.stopAllAction()\r\n        anims.lightsTimeScaleToggle()\r\n        if (anims.actLights0) anims.actLights0.play()\r\n        if (anims.actLights1) anims.actLights1.play()\r\n        if (anims.actLights2) anims.actLights2.play()\r\n        if (anims.actLights3) anims.actLights3.play()\r\n        if (anims.actLights4) anims.actLights4.play()\r\n    }\r\n}\r\n\r\n/**\r\n * Asynchronously loads all 3D models (car, wheels, lights) with parallel loading\r\n * Sets up animations, headlights, and solo buttons after models are loaded\r\n * @async\r\n * @throws {Error} If any model fails to load\r\n */\r\nasync function initializeModels() {\r\n    const loadingUI = showLoadingUI('Loading models...')\r\n    \r\n    try {\r\n        loadingUI.update('Loading car model...')\r\n        const [gltfCar, gltfWheels, gltfLights] = await Promise.all([\r\n            loadGLTFModel(gltfLoader, './model/rx7/rx7.gltf'),\r\n            loadGLTFModel(gltfLoader, './model/rx7_wheels/rx7_wheels.gltf'),\r\n            loadGLTFModel(gltfLoader, './model/rx7_lights/rx7_lights.gltf')\r\n        ])\r\n\r\n        loadingUI.update('Setting up scene...')\r\n\r\n        // Setup car\r\n        gltfCar.scene.scale.set(1.0, 1.0, 1.0)\r\n        carGroup.add(gltfCar.scene)\r\n        particleSystem.initialize()\r\n\r\n        // Setup wheels\r\n        gltfWheels.scene.scale.set(1.0, 1.0, 1.0)\r\n        gltfWheels.scene.position.set(0, 0, 0)\r\n        carGroup.add(gltfWheels.scene)\r\n\r\n        const wheelFL = gltfWheels.scene.clone()\r\n        wheelFL.position.set(0, 0, 2.45)\r\n        carGroup.add(wheelFL)\r\n\r\n        const wheelFR = gltfWheels.scene.clone()\r\n        wheelFR.position.set(0, 0, 2.45)\r\n        wheelFR.scale.set(-1, 1, 1)\r\n        carGroup.add(wheelFR)\r\n\r\n        const wheelRR = gltfWheels.scene.clone()\r\n        wheelRR.position.set(0, 0, 0)\r\n        wheelRR.scale.set(-1, 1, 1)\r\n        carGroup.add(wheelRR)\r\n\r\n        anims.mixerWheels = new THREE.AnimationMixer(new THREE.AnimationObjectGroup(gltfWheels.scene, wheelFL, wheelFR, wheelRR))\r\n        anims.actWheelsRot = anims.mixerWheels.clipAction(gltfWheels.animations[0])\r\n        anims.actTiresRot = anims.mixerWheels.clipAction(gltfWheels.animations[1])\r\n\r\n        gltfLights.scene.scale.set(1.0, 1.0, 1.0)\r\n        carGroup.add(gltfLights.scene)\r\n\r\n        anims.mixerLights = new THREE.AnimationMixer(gltfLights.scene)\r\n        for (let i = 0; i < 5; i++) {\r\n            const key = `actLights${i}`\r\n            anims[key] = anims.mixerLights.clipAction(gltfLights.animations[i])\r\n            anims[key].setLoop(THREE.LoopOnce)\r\n            anims[key].clampWhenFinished = true\r\n        }\r\n\r\n        const { left: headLightL, right: headLightR } = createHeadlightSpots({ intensity: anims.lightsIntensity })\r\n        anims.headLightL = headLightL\r\n        anims.headLightR = headLightR\r\n        carGroup.add(anims.headLightL)\r\n        carGroup.add(anims.headLightL.target)\r\n        carGroup.add(anims.headLightR)\r\n        carGroup.add(anims.headLightR.target)\r\n\r\n        setupSoloButtons(gltfCar.scene)\r\n\r\n        initState.modelsLoaded = true\r\n\r\n        loadingUI.remove()\r\n        console.log('✓ All models loaded successfully')\r\n    } catch (error) {\r\n        loadingUI.remove()\r\n        console.error('Failed to load models:', error)\r\n        showErrorUI(\r\n            'Failed to Load Models',\r\n            `Could not load required 3D models. Please check your connection and refresh the page.\\n\\nError: ${error.message}`,\r\n            false\r\n        )\r\n    }\r\n}\r\n\r\n/**\r\n * Creates interactive solo buttons for switching audio perspectives\r\n * Buttons connect screen UI to 3D positions on the car (intake, exhaust, interior)\r\n * @param {THREE.Object3D} carScene - The loaded car model to attach button targets to\r\n */\r\nfunction setupSoloButtons(carScene) {\r\n    const intakeSoloBtn = createLineButton({ \r\n        screenAnchor: new THREE.Vector2(-0.5, -0.8), \r\n        targetLocalPos: new THREE.Vector3(0, 0.2, 2.1), \r\n        targetObject: carScene, \r\n        label: 'Intake', \r\n        color: SoloBtnColors.INTAKE \r\n    })\r\n    const exhaustSoloBtn = createLineButton({ \r\n        screenAnchor: new THREE.Vector2(0.5, -0.8), \r\n        targetLocalPos: new THREE.Vector3(-0.5, 0.3, -2.0), \r\n        targetObject: carScene, \r\n        label: 'Exhaust', \r\n        color: SoloBtnColors.EXHAUST \r\n    })\r\n    const interiorSoloBtn = createLineButton({ \r\n        screenAnchor: new THREE.Vector2(0.0, -0.8), \r\n        targetLocalPos: new THREE.Vector3(0.0, 0.1, -0.2), \r\n        targetObject: carScene, \r\n        label: 'Interior', \r\n        color: SoloBtnColors.INTERIOR \r\n    })\r\n\r\n    ;[intakeSoloBtn, exhaustSoloBtn, interiorSoloBtn].forEach(btn => {\r\n        scene.add(btn.line)\r\n        lineButtons.push(btn)\r\n\r\n        btn.button.addEventListener('click', () => {\r\n            if (SoloState[btn.button.textContent.toUpperCase()] === soloState) {\r\n                soloState = SoloState.MIX\r\n\r\n                // Reset all button styles\r\n                lineButtons.forEach(otherBtn => {\r\n                    if (otherBtn !== btn) {\r\n                        otherBtn.button.style.backgroundColor = colorToHex(SoloBtnColors[otherBtn.button.textContent.toUpperCase()])\r\n                        otherBtn.button.style.color = `#272727ff`\r\n                        otherBtn.line.visible = true\r\n                        otherBtn.button.dimmed = false\r\n                    }\r\n                })\r\n\r\n                // If emitter debuggers are visible, ensure emitterDebuggers are all visible\r\n                if (dbgAudioSettings['Emitters']) {\r\n                    emitterDebuggers.forEach(helper => helper.visible = true)\r\n                }\r\n            } else {\r\n                soloState = SoloState[btn.button.textContent.toUpperCase()]\r\n\r\n                lineButtons.forEach(otherBtn => {\r\n                    if (otherBtn !== btn) {\r\n                        otherBtn.button.style.backgroundColor = `#444444`\r\n                        otherBtn.button.style.color = `#888888`\r\n                        otherBtn.line.visible = false\r\n                        otherBtn.button.dimmed = true\r\n\r\n                        if (dbgAudioSettings['Emitters']) {\r\n                            const posKey = otherBtn.button.textContent.toLowerCase()\r\n                            const helper = emitterDebuggers.get(posKey)\r\n                            if (helper) helper.visible = false\r\n                        }\r\n                    } else {\r\n                        otherBtn.button.style.color = `#272727ff`\r\n                        otherBtn.line.visible = true\r\n                        otherBtn.button.dimmed = false\r\n\r\n                        if (dbgAudioSettings['Emitters']) {\r\n                            const posKey = otherBtn.button.textContent.toLowerCase()\r\n                            const helper = emitterDebuggers.get(posKey)\r\n                            if (helper) helper.visible = true\r\n                        }\r\n                    }\r\n                })\r\n            }\r\n        })\r\n    })\r\n\r\n    // Line button visibility\r\n    const buttonVisibility = { 'Solo Buttons': true }\r\n    dbgAudioMicPersp = dbgAudio.add(buttonVisibility, 'Solo Buttons').onChange(visible => {\r\n        intakeSoloBtn.setVisible(visible)\r\n        exhaustSoloBtn.setVisible(visible)\r\n        interiorSoloBtn.setVisible(visible)\r\n    })\r\n}\r\n\r\n// Call the new async initialization\r\ninitializeModels().then(() => {\r\n    // Check if everything is ready\r\n    checkSceneReady()\r\n}).catch(err => {\r\n    console.error('Critical error during model initialization:', err)\r\n})\r\n\r\n/**\r\n * Checks if all async loading operations are complete and marks scene as ready\r\n * Called after models and audio finish loading\r\n */\r\nfunction checkSceneReady() {\r\n    if (initState.modelsLoaded && initState.audioLoaded && !initState.sceneReady) {\r\n        initState.sceneReady = true\r\n        console.log('✓ Scene fully initialized and ready')\r\n    }\r\n}\r\n\r\n/**\r\n * Scene Lighting Setup\r\n * Uses default values from constants.js with support for environment-based overrides\r\n */\r\n\r\n/** @type {THREE.HemisphereLight} Sky/ground hemisphere light */\r\nconst hemiLight = new THREE.HemisphereLight(\r\n    LightingDefaults.hemisphere.skyColor,\r\n    LightingDefaults.hemisphere.groundColor,\r\n    LightingDefaults.hemisphere.intensity\r\n)\r\nhemiLight.position.set(0, 100, 0)\r\nscene.add(hemiLight)\r\n\r\n/** @type {THREE.AmbientLight} Global ambient illumination */\r\nconst ambientLight = new THREE.AmbientLight(\r\n    LightingDefaults.ambient.color,\r\n    LightingDefaults.ambient.intensity\r\n)\r\nscene.add(ambientLight)\r\n\r\n/** @type {Array<THREE.DirectionalLight>} Array of directional shadow-casting lights */\r\nconst directionalLights = createDirectionalLights([\r\n    { color: LightingDefaults.directional[0].color, intensity: LightingDefaults.directional[0].intensity, position: [5, 3, 4] },\r\n    { color: LightingDefaults.directional[1].color, intensity: LightingDefaults.directional[1].intensity, position: [8, 3, -1] },\r\n    { color: LightingDefaults.directional[2].color, intensity: LightingDefaults.directional[2].intensity, position: [-5, 5, -5] }\r\n])\r\ndirectionalLights.forEach(l => scene.add(l))\r\n\r\n/**\r\n * Lighting snapshot system for environment-based lighting overrides\r\n * Captures baseline lighting state to enable reset after environment changes\r\n */\r\n\r\n/** @type {Object|null} Snapshot of baseline lighting configuration */\r\nlet baseLightingSnapshot = null\r\n\r\n/**\r\n * Captures current lighting state as baseline\r\n * Called after renderer initialization to include tone mapping exposure\r\n */\r\nfunction buildLightingSnapshot() {\r\n    baseLightingSnapshot = {\r\n        ambient: { color: ambientLight.color.getHex(), intensity: ambientLight.intensity },\r\n        hemi: { sky: hemiLight.color.getHex(), ground: hemiLight.groundColor.getHex(), intensity: hemiLight.intensity },\r\n        directional: directionalLights.map(dl => ({ color: dl.color.getHex(), intensity: dl.intensity })),\r\n        fog: scene.fog ? { color: scene.fog.color.getHex(), density: scene.fog.density } : null,\r\n        exposure: (typeof renderer !== 'undefined' && typeof renderer.toneMappingExposure === 'number') ? renderer.toneMappingExposure : 1.0\r\n    }\r\n}\r\n\r\n/**\r\n * Restores lighting to baseline snapshot state\r\n * Used when switching back from environment presets to default lighting\r\n */\r\nfunction resetLightingFromSnapshot() {\r\n    if (!baseLightingSnapshot) buildLightingSnapshot()\r\n    ambientLight.color.setHex(baseLightingSnapshot.ambient.color)\r\n    ambientLight.intensity = baseLightingSnapshot.ambient.intensity\r\n    hemiLight.color.setHex(baseLightingSnapshot.hemi.sky)\r\n    hemiLight.groundColor.setHex(baseLightingSnapshot.hemi.ground)\r\n    hemiLight.intensity = baseLightingSnapshot.hemi.intensity\r\n    directionalLights.forEach((dl,i) => {\r\n        dl.color.setHex(baseLightingSnapshot.directional[i].color)\r\n        dl.intensity = baseLightingSnapshot.directional[i].intensity\r\n    })\r\n    if (scene.fog && baseLightingSnapshot.fog) {\r\n        scene.fog.color.setHex(baseLightingSnapshot.fog.color)\r\n        scene.fog.density = baseLightingSnapshot.fog.density\r\n    }\r\n    if (baseLightingSnapshot && typeof renderer !== 'undefined' && typeof renderer.toneMappingExposure === 'number') {\r\n        renderer.toneMappingExposure = baseLightingSnapshot.exposure\r\n    }\r\n}\r\n\r\n/**\r\n * Applies environment-specific lighting override or resets to baseline\r\n * @param {Object|null} override - Lighting override configuration or null to reset\r\n * @param {Object} [override.ambient] - Ambient light overrides\r\n * @param {number} [override.ambient.color] - Ambient color as hex\r\n * @param {number} [override.ambient.intensity] - Ambient intensity\r\n * @param {Object} [override.hemisphere] - Hemisphere light overrides\r\n * @param {number} [override.hemisphere.skyColor] - Sky color as hex\r\n * @param {number} [override.hemisphere.groundColor] - Ground color as hex\r\n * @param {number} [override.hemisphere.intensity] - Hemisphere intensity\r\n * @param {Array<Object>} [override.directional] - Directional light overrides\r\n */\r\nfunction applyLightingOverride(override) {\r\n    if (!override) {\r\n        resetLightingFromSnapshot()\r\n        return\r\n    }\r\n    if (override.ambient) {\r\n        if (override.ambient.color !== undefined) ambientLight.color.setHex(override.ambient.color)\r\n        if (override.ambient.intensity !== undefined) ambientLight.intensity = override.ambient.intensity\r\n    }\r\n    if (override.hemisphere) {\r\n        if (override.hemisphere.skyColor !== undefined) hemiLight.color.setHex(override.hemisphere.skyColor)\r\n        if (override.hemisphere.groundColor !== undefined) hemiLight.groundColor.setHex(override.hemisphere.groundColor)\r\n        if (override.hemisphere.intensity !== undefined) hemiLight.intensity = override.hemisphere.intensity\r\n    }\r\n    if (override.directional && Array.isArray(override.directional)) {\r\n        directionalLights.forEach((dl, i) => {\r\n            const ov = override.directional[i]\r\n            if (!ov) return\r\n            if (ov.color !== undefined) dl.color.setHex(ov.color)\r\n            if (ov.intensity !== undefined) dl.intensity = ov.intensity\r\n        })\r\n    }\r\n}\r\n\r\n/**\r\n * Viewport sizing and responsive handling\r\n */\r\n\r\n/** @type {Object} Current viewport dimensions */\r\nconst sizes = {\r\n    width: window.innerWidth,\r\n    height: window.innerHeight\r\n}\r\n\r\n/**\r\n * Handles window resize events\r\n * Updates camera aspect ratio, renderer size, and pixel ratio\r\n */\r\nconst handleResize = () => {\r\n    sizes.width = window.innerWidth\r\n    sizes.height = window.innerHeight\r\n\r\n    camera.aspect = sizes.width / sizes.height\r\n    camera.updateProjectionMatrix()\r\n\r\n    renderer.setSize(sizes.width, sizes.height)\r\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\r\n}\r\n\r\nwindow.addEventListener('resize', handleResize)\r\n\r\n/**\r\n * Camera and Controls\r\n */\r\n\r\n/** @type {THREE.PerspectiveCamera} Main perspective camera */\r\nconst camera = new THREE.PerspectiveCamera(75, sizes.width / sizes.height, 0.1, 100)\r\ncamera.position.set(4, 2, 3)\r\nscene.add(camera)\r\n\r\n/** @type {OrbitControls} Orbit camera controls with damping */\r\nconst controls = new OrbitControls(camera, canvas)\r\ncontrols.target.set(0, 0.75, 0)\r\ncontrols.enableDamping = true\r\n\r\n/**\r\n * WebGL Renderer\r\n * Configured with shadow mapping and linear color space\r\n */\r\n\r\n/** @type {THREE.WebGLRenderer} Main WebGL renderer */\r\nconst renderer = new THREE.WebGLRenderer({\r\n    canvas: canvas\r\n})\r\nrenderer.outputColorSpace = THREE.LinearSRGBColorSpace\r\nrenderer.shadowMap.enabled = true\r\nrenderer.shadowMap.type = THREE.PCFSoftShadowMap\r\nrenderer.setSize(sizes.width, sizes.height)\r\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\r\n\r\n// Build baseline lighting snapshot now that renderer exists\r\nbuildLightingSnapshot()\r\nresetLightingFromSnapshot()\r\n\r\n/**\r\n * Spatial Audio System\r\n * Web Audio API-based positional audio with directional cones for intake/exhaust\r\n */\r\n\r\n/** @type {THREE.AudioListener} Main audio listener attached to camera */\r\nconst listener = new THREE.AudioListener();\r\ncamera.add(listener);\r\n\r\n/** @type {AudioContext} Web Audio API context */\r\nconst audioContext = listener.context\r\n\r\n/** @type {boolean} Audio enabled state flag */\r\nlet audioEnabled = false\r\n\r\n/**\r\n * Positional audio emitters for different microphone perspectives\r\n * @type {Object<string, THREE.PositionalAudio>}\r\n * @property {THREE.PositionalAudio} mix - Mix perspective (unused, legacy)\r\n * @property {THREE.PositionalAudio} intake - Intake microphone position (front of car)\r\n * @property {THREE.PositionalAudio} exhaust - Exhaust microphone position (rear of car)\r\n * @property {THREE.PositionalAudio} interior - Interior microphone position (inside cabin)\r\n */\r\nconst audioEmitters = {\r\n    mix: new THREE.PositionalAudio(listener),\r\n    intake: new THREE.PositionalAudio(listener),\r\n    exhaust: new THREE.PositionalAudio(listener),\r\n    interior: new THREE.PositionalAudio(listener)\r\n};\r\n\r\nconsole.log(\"Audio Emitters:\", audioEmitters);\r\n\r\nObject.entries(audioEmitters).forEach(([pos, emitter]) => {\r\n    carGroup.add(emitter);\r\n    switch (pos) {\r\n        case 'intake':\r\n            emitter.position.set(0, 0.2, 2.1);\r\n            emitter.setVolume(0);\r\n            emitter.setDirectionalCone(\r\n                THREE.MathUtils.degToRad(ConeEmitterSettings.innerAngle), \r\n                THREE.MathUtils.degToRad(ConeEmitterSettings.outerAngle), \r\n                ConeEmitterSettings.outerGain\r\n            );\r\n            break;\r\n        case 'exhaust':\r\n            emitter.position.set(-0.5, 0.3, -2.0);\r\n            emitter.setVolume(0);\r\n            emitter.rotation.y = Math.PI;\r\n            emitter.setDirectionalCone(\r\n                THREE.MathUtils.degToRad(ConeEmitterSettings.innerAngle), \r\n                THREE.MathUtils.degToRad(ConeEmitterSettings.outerAngle), \r\n                ConeEmitterSettings.outerGain\r\n            );\r\n            break;\r\n        case 'interior':\r\n            emitter.position.set(0.0, 0.5, -0.2);\r\n            emitter.setVolume(0);\r\n            break;\r\n        case 'mix':\r\n            emitter.position.set(0, 0, 0);\r\n            emitter.setVolume(1.0);\r\n            break;\r\n        default:\r\n            emitter.position.set(0, 0, 0);\r\n            break;\r\n    }\r\n});\r\n\r\n/**\r\n * Sound engine - manages audio playback, buffers, and state transitions\r\n * Handles ignition sequences, emitter volume mixing, and convolution reverb\r\n * @type {Object}\r\n */\r\nconst soundEngine = {\r\n    /**\r\n     * Audio buffer storage organized by microphone position and sound type\r\n     * @type {Object<string, Object<string, AudioBuffer>>}\r\n     */\r\n    buffers: {\r\n        mix: {},\r\n        intake: { ignitionOn: null, idle: null, ignitionOff: null, revShort: null, revMedium: null, revLong: null },\r\n        exhaust: { ignitionOn: null, idle: null, ignitionOff: null, revShort: null, revMedium: null, revLong: null },\r\n        interior: { ignitionOn: null, idle: null, ignitionOff: null, revShort: null, revMedium: null, revLong: null }\r\n    },\r\n\r\n    /** @type {THREE.PositionalAudio|null} Currently active audio emitter */\r\n    currentEmitter: null,\r\n\r\n    /**\r\n     * Sets volume levels for all positional audio emitters based on solo state\r\n     * Handles smooth volume transitions and applies global multipliers from constants\r\n     * @param {string} currSoloState - Current solo state (MIX, INTAKE, EXHAUST, INTERIOR)\r\n     */\r\n    setEmitterVolumes(currSoloState) {\r\n        const individualEmitters = ['intake', 'exhaust', 'interior'];\r\n\r\n        individualEmitters.forEach(pos => {\r\n            const emitter = audioEmitters[pos];\r\n            if (!emitter) return;\r\n\r\n            const baseTarget = (currSoloState === SoloState.MIX)\r\n                ? EmitterVolMults.MIX\r\n                : (pos === currSoloState)\r\n                    ? 1.0\r\n                    : 0.0;\r\n\r\n            // Apply global multiplier\r\n            const multiplier = EmitterVolMults[pos.toUpperCase()] !== undefined ? EmitterVolMults[pos.toUpperCase()] : 1.0\r\n            const targetVolume = Math.max(0, Math.min(1, baseTarget * multiplier))\r\n\r\n            // Smooth volume transition\r\n            const currentVol = emitter.getVolume();\r\n            if (currentVol < targetVolume) {\r\n                emitter.setVolume(Math.min(targetVolume, currentVol + 0.2));\r\n            } else if (currentVol > targetVolume) {\r\n                emitter.setVolume(Math.max(targetVolume, currentVol - 0.2));\r\n            }\r\n        });\r\n\r\n        audioEmitters.mix.setVolume(0);\r\n    },\r\n\r\n    /**\r\n     * Transitions to engine idle (for use after ignition, revs, etc.)\r\n     */\r\n    idle: (audioLoader, emitter, pos) => {\r\n        playPositionalAudio(audioLoader, emitter, `./audio/${pos}/idle.ogg`, {\r\n            store: soundEngine.buffers[pos],\r\n            storeKey: 'idle',\r\n            loop: true,\r\n            onEnded: () => { }\r\n        });\r\n    },\r\n\r\n    /**\r\n     * Starts engine ignition sequence across all audio emitters\r\n     * Resumes audio context on first user interaction (handles browser autoplay policy)\r\n     * Plays ignition sound followed by idle loop, starts wheel animations\r\n     */\r\n    ignitionOn: () => {\r\n        if (audioContext.state === 'suspended') {\r\n            audioContext.resume().then(() => {\r\n                audioEnabled = true\r\n                console.log('Audio context enabled via user interaction')\r\n            }).catch(err => {\r\n                console.error('Failed to resume audio context:', err)\r\n            })\r\n        }\r\n\r\n        Object.entries(audioEmitters).forEach(([pos, emitter]) => {\r\n            if (pos === 'mix') return;\r\n\r\n            playPositionalAudio(audioLoader, emitter, `./audio/${pos}/ignitionOn.ogg`, {\r\n                store: soundEngine.buffers[pos],\r\n                storeKey: 'ignitionOn',\r\n                loop: false,\r\n                onEnded: () => {\r\n                    soundEngine.idle(audioLoader, emitter, pos);\r\n                }\r\n            });\r\n        });\r\n\r\n        driveState = DriveState.ACCEL;\r\n        \r\n        if (anims.mixerWheels) {\r\n            anims.mixerWheels.stopAllAction();\r\n            anims.actWheelsRot.play();\r\n            anims.actTiresRot.play();\r\n            anims.mixerWheels.timeScale = 0.01;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Stops engine and plays ignition off sequence\r\n     * Triggers shutdown sound then stops all audio playback\r\n     */\r\n    ignitionOff: () => {\r\n        Object.entries(audioEmitters).forEach(([pos, emitter]) => {\r\n            if (pos === 'mix') return;\r\n\r\n            playPositionalAudio(audioLoader, emitter, `./audio/${pos}/ignitionOff.ogg`, {\r\n                store: soundEngine.buffers[pos],\r\n                storeKey: 'ignitionOff',\r\n                loop: false,\r\n                onEnded: () => {\r\n                    emitter.stop();\r\n                }\r\n            });\r\n        });\r\n\r\n        driveState = DriveState.DECEL;\r\n    },\r\n\r\n    /**\r\n     * Revs engine based on throttle input duration\r\n     * @param {number} duration - The duration the throttle is pressed\r\n     */\r\n    revEngine(duration) {\r\n        const revType = duration >= ThrottleMap.long ? 'revLong' : duration >= ThrottleMap.medium ? 'revMedium' : 'revShort';\r\n        Object.entries(audioEmitters).forEach(([pos, emitter]) => {\r\n            if (pos === 'mix') return;\r\n\r\n            playPositionalAudio(audioLoader, emitter, `./audio/${pos}/${revType}.ogg`, {\r\n                store: soundEngine.buffers[pos],\r\n                storeKey: revType,\r\n                loop: false,\r\n                onEnded: () => {\r\n                    soundEngine.idle(audioLoader, emitter, pos);\r\n                }\r\n            });\r\n        });\r\n        // Shoot flames!!!\r\n        if (duration >= ThrottleMap.long) {\r\n            particleSystem.triggerBackfire();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Preloads all audio files into buffers\r\n     * Caches audio for ignitionOn, idle, and ignitionOff for each microphone position\r\n     * Updates initialization state when complete\r\n     */\r\n    load() {\r\n        const engine = this\r\n        const loadPromises = []\r\n        \r\n        Object.keys(engine.buffers).forEach(pos => {\r\n            Object.keys(engine.buffers[pos]).forEach(key => {\r\n                const promise = loadAudioFile(audioLoader, `./audio/${pos}/${key}.ogg`)\r\n                    .then(buffer => {\r\n                        engine.buffers[pos][key] = buffer\r\n                    })\r\n                    .catch(err => {\r\n                        console.error(`Failed to load audio ${pos}/${key}:`, err)\r\n                })\r\n                loadPromises.push(promise)\r\n            })\r\n        })\r\n\r\n        Promise.all(loadPromises).then(() => {\r\n            initState.audioLoaded = true\r\n            console.log('✓ All audio files loaded')\r\n            checkSceneReady()\r\n        }).catch(() => {\r\n            initState.audioLoaded = true\r\n            showErrorUI(\r\n                'Audio Load Warning',\r\n                'Some audio files failed to load. The experience may be incomplete.',\r\n                false\r\n            )\r\n            checkSceneReady()\r\n        })\r\n    },\r\n\r\n    /**\r\n     * Applies convolution reverb to all audio emitters with wet/dry mixing\r\n     * Creates parallel signal path: dry gain + (convolver -> wet gain)\r\n     * @param {AudioBuffer} reverbBuffer - Impulse response buffer for convolution\r\n     */\r\n    applyConvolutionReverb(reverbBuffer) {\r\n        const blend = this.currentReverbBlend ?? 0.5\r\n        Object.values(audioEmitters).forEach(emitter => {\r\n            if (emitter._reverbNodes) {\r\n                try {\r\n                    const { dryGain, wetGain, convolver } = emitter._reverbNodes\r\n                    dryGain.disconnect()\r\n                    wetGain.disconnect()\r\n                    convolver.disconnect()\r\n                } catch(_) {}\r\n                emitter._reverbNodes = null\r\n            }\r\n\r\n            const ctx = listener.context\r\n            const convolver = ctx.createConvolver()\r\n            convolver.buffer = reverbBuffer\r\n\r\n            const wetGain = ctx.createGain()\r\n            const dryGain = ctx.createGain()\r\n            wetGain.gain.value = blend * this.currentReverbScalingFactor\r\n            dryGain.gain.value = (1.0 - blend) * this.currentReverbScalingFactor\r\n\r\n            const sourceNode = emitter.panner\r\n            if (!sourceNode) {\r\n                console.warn('PositionalAudio panner node missing; cannot apply reverb graph')\r\n                return\r\n            }\r\n\r\n            sourceNode.connect(dryGain)\r\n            dryGain.connect(ctx.destination)\r\n            sourceNode.connect(convolver)\r\n            convolver.connect(wetGain)\r\n            wetGain.connect(ctx.destination)\r\n\r\n            emitter._reverbNodes = { convolver, wetGain, dryGain }\r\n        })\r\n    },\r\n\r\n    /**\r\n     * Removes convolution reverb by disconnecting custom filter graph\r\n     * Restores direct audio path without reverb processing\r\n     */\r\n    removeConvolutionReverb() {\r\n        Object.values(audioEmitters).forEach(em => {\r\n            if (em._reverbNodes) {\r\n                try {\r\n                    const { dryGain, wetGain, convolver } = em._reverbNodes\r\n                    dryGain.disconnect()\r\n                    wetGain.disconnect()\r\n                    convolver.disconnect()\r\n                } catch (err) {\r\n                    console.warn('Error disconnecting reverb nodes:', err)\r\n                }\r\n                em._reverbNodes = null\r\n            }\r\n        })\r\n        this.currentReverbBlend = null\r\n        this.currentReverbScalingFactor = null\r\n    }\r\n}\r\nsoundEngine.load()\r\n\r\n/**\r\n * Convolution Reverb Configuration\r\n * Maps reverb preset names to impulse response files with wet/dry blend and scaling\r\n */\r\n\r\n/** @type {Object<string, Object>} Reverb preset definitions */\r\nconst reverbMap = {\r\n    'Garage': { path: './audio/ir/garage.ogg', blend: 0.8, scalingFactor: 0.33 },\r\n    'Outdoors': { path: './audio/ir/outdoors.ogg', blend: 0.6, scalingFactor: 0.2 }\r\n}\r\n\r\n/** @type {Object} Current reverb selection parameter */\r\nconst reverbParams = { Reverb: 'None' }\r\ndbgAudioReverb = dbgAudio.add(reverbParams, 'Reverb', ['None', ...Object.keys(reverbMap)]).name('Conv. Reverb').onChange(name => {\r\n    if (name === 'None') {\r\n        soundEngine.removeConvolutionReverb()\r\n        return\r\n    }\r\n    const preset = reverbMap[name]\r\n    if (!preset) return\r\n    const { path, blend = 0.5, scalingFactor = 1.0 } = preset\r\n    soundEngine.currentReverbBlend = blend\r\n    soundEngine.currentReverbScalingFactor = scalingFactor\r\n    loadAudioFile(new THREE.AudioLoader(), path).then((buffer) => {\r\n        soundEngine.applyConvolutionReverb(buffer)\r\n    }).catch(err => {\r\n        console.error('Failed to load reverb:', err)\r\n        showErrorUI('Reverb Load Failed', `Could not load reverb preset: ${err.message}`, false)\r\n    })\r\n})\r\n\r\n/** @type {Object} Ignition and other controls */\r\nconst controlsPanel = createControls({ initVisible: true, initIgnition: false, initHeadlights: true })\r\n// Subscribe to ignition button press event in controls panel\r\ncontrolsPanel.registerIgnitionCallback((ignitionOn) => {\r\n    console.log('Ignition:', ignitionOn ? 'ON' : 'OFF')\r\n    if (ignitionOn) {\r\n        soundEngine.ignitionOn()\r\n    } else {\r\n        soundEngine.ignitionOff()\r\n    }\r\n})\r\ncontrolsPanel.registerHeadlightsCallback((headlightsOn) => {\r\n    console.log('Headlights:', headlightsOn ? 'ON' : 'OFF')\r\n    anims.lights()\r\n})\r\ncontrolsPanel.registerThrottleCallback((duration) => {\r\n    console.log('Throttle pressed:', duration, 'ms', duration >= ThrottleMap.long ? '(Long)' : duration >= ThrottleMap.medium ? '(Medium)' : '(Short)')\r\n    soundEngine.revEngine(duration)\r\n})\r\nconsole.log('Controls panel created', controlsPanel)\r\n\r\n/** @type {Object} Audio volume meter system */\r\nconst audioMeters = createMixer({ emitters: audioEmitters, initialVisible: true })\r\ndbgAudioMeters = dbgAudio.add(dbgAudioSettings, 'Meters').onChange(v => audioMeters.setVisible(v))\r\n\r\n/** @type {Object} Performance monitoring system (FPS, frame time) */\r\nconst perfMonitor = createPerformanceMonitor({ initialVisible: false })\r\ndbgPerfStats = dbgPerformance.add(dbgPerfSettings, 'Show Stats').onChange(v => perfMonitor.setVisible(v))\r\n\r\n/**\r\n * Audio Emitter Debug Visualizers\r\n * Creates 3D helpers showing emitter positions and directional cones\r\n */\r\n\r\n/** @type {Map<string, THREE.Group>} Map of emitter position helpers */\r\nconst emitterDebuggers = new Map()\r\nObject.entries(audioEmitters).forEach(([pos, emitter]) => {\r\n    if (pos === 'mix') return;\r\n    \r\n    const helperConfig = {\r\n        color: SoloBtnColors[pos.toUpperCase()] || 0xffff00,\r\n        size: 0.4\r\n    }\r\n    \r\n    // Add cone visualization for directional emitters\r\n    if (pos === 'intake') {\r\n        helperConfig.showCone = true\r\n        helperConfig.coneAngle = ConeEmitterSettings.innerAngle\r\n        helperConfig.coneDirection = new THREE.Vector3(0, 0, 1) // Forward\r\n    } else if (pos === 'exhaust') {\r\n        helperConfig.showCone = true\r\n        helperConfig.coneAngle = ConeEmitterSettings.innerAngle\r\n        helperConfig.coneDirection = new THREE.Vector3(0, 0, -1) // Backward\r\n    }\r\n    \r\n    const helper = createAudioEmitterDebugger(emitter, helperConfig)\r\n    helper.visible = false\r\n    carGroup.add(helper)\r\n    emitterDebuggers.set(pos, helper)\r\n})\r\n\r\ndbgAudioEmitters = dbgAudio.add(dbgAudioSettings, 'Emitters').onChange(v => {\r\n    emitterDebuggers.forEach(helper => helper.visible = v)\r\n})\r\n\r\n/**\r\n * Vehicle Debug Controls\r\n */\r\n\r\n/** @type {Array<string>} Available car models (currently only RX-7) */\r\nconst fakeListOfCars = ['Mazda RX-7 FD']\r\ndbgVehCarSelect = dbgVehicle.add({ car: fakeListOfCars[0] }, 'car', fakeListOfCars).name('Car').onChange(v => {})\r\n\r\n/**\r\n * Resource Cleanup & Disposal\r\n * Properly cleans up all Three.js objects, audio nodes, and event listeners\r\n */\r\n\r\n/**\r\n * Disposes all application resources\r\n * Called on page unload or when resetting the scene\r\n * Prevents memory leaks by cleaning up geometries, materials, textures, and audio nodes\r\n */\r\nfunction disposeAll() {\r\n    console.log('Cleaning up resources...')\r\n\r\n    if (animationFrameId) {\r\n        cancelAnimationFrame(animationFrameId)\r\n        animationFrameId = null\r\n    }\r\n\r\n    lineButtons.forEach(btn => {\r\n        if (btn && btn.dispose) {\r\n            btn.dispose()\r\n        }\r\n    })\r\n    lineButtons.length = 0\r\n\r\n    emitterDebuggers.forEach(helper => {\r\n        disposeObject(helper)\r\n    })\r\n    emitterDebuggers.clear()\r\n\r\n    if (controlsPanel && controlsPanel.dispose) {\r\n        controlsPanel.dispose()\r\n    }\r\n\r\n    if (audioMeters && audioMeters.dispose) {\r\n        audioMeters.dispose()\r\n    }\r\n\r\n    if (perfMonitor && perfMonitor.dispose) {\r\n        perfMonitor.dispose()\r\n    }\r\n\r\n    Object.values(audioEmitters).forEach(emitter => {\r\n        disposeAudioEmitter(emitter)\r\n    })\r\n\r\n    if (particleSystem && particleSystem.dispose) {\r\n        particleSystem.dispose()\r\n    }\r\n\r\n    if (currentHDRTexture) {\r\n        disposeTexture(currentHDRTexture)\r\n        currentHDRTexture = null\r\n    }\r\n\r\n    if (carGroup) {\r\n        disposeObject(carGroup)\r\n    }\r\n    if (floor) {\r\n        disposeObject(floor)\r\n    }\r\n\r\n    if (anims.mixerWheels) {\r\n        anims.mixerWheels.stopAllAction()\r\n        anims.mixerWheels = null\r\n    }\r\n    if (anims.mixerLights) {\r\n        anims.mixerLights.stopAllAction()\r\n        anims.mixerLights = null\r\n    }\r\n\r\n    if (hemiLight) {\r\n        scene.remove(hemiLight)\r\n    }\r\n    if (ambientLight) {\r\n        scene.remove(ambientLight)\r\n    }\r\n    directionalLights.forEach(light => {\r\n        scene.remove(light)\r\n        light.dispose()\r\n    })\r\n\r\n    if (renderer) {\r\n        renderer.dispose()\r\n    }\r\n\r\n    if (dbg) {\r\n        dbg.destroy()\r\n    }\r\n\r\n    console.log('Cleanup complete')\r\n}\r\n\r\n/**\r\n * Page Visibility & Performance Optimization\r\n */\r\n\r\n/** @type {number|null} Current animation frame request ID */\r\nlet animationFrameId = null\r\n\r\n/** @type {boolean} Track page visibility for pausing heavy computations */\r\nlet isPageVisible = !document.hidden\r\n\r\n/**\r\n * Pause simulation when tab is not visible to save CPU/GPU resources\r\n * Suspends audio context and reduces computational load\r\n */\r\ndocument.addEventListener('visibilitychange', () => {\r\n    isPageVisible = !document.hidden\r\n    \r\n    if (isPageVisible) {\r\n        console.log('Tab visible - resuming simulation')\r\n        if (audioContext && audioContext.state === 'suspended') {\r\n            audioContext.resume().catch(err => {\r\n                console.warn('Failed to resume audio context:', err)\r\n            })\r\n        }\r\n    } else {\r\n        console.log('Tab hidden - pausing heavy computations')\r\n        audioContext.suspend()\r\n    }\r\n})\r\n\r\nwindow.addEventListener('beforeunload', () => {\r\n    disposeAll()\r\n})\r\n\r\n/**\r\n * Main Animation Loop\r\n * Handles animation updates, particle system, audio mixing, and rendering\r\n */\r\n\r\n/** @type {THREE.Clock} Main animation clock for time tracking */\r\nconst clock = new THREE.Clock()\r\n\r\n/** @type {number} Previous frame elapsed time for delta calculation */\r\nlet previousTime = 0\r\n\r\n/**\r\n * Main render loop tick function\r\n * Updates animations, particle systems, audio, and renders the scene\r\n * Optimizes heavy computations based on page visibility\r\n */\r\nconst tick = () => {\r\n    const elapsedTime = clock.getElapsedTime()\r\n    const deltaTime = elapsedTime - previousTime\r\n    previousTime = elapsedTime\r\n\r\n    if (isPageVisible) {\r\n        if (anims.mixerWheels) {\r\n            anims.mixerWheels.update(deltaTime)\r\n\r\n            switch (driveState) {\r\n                case DriveState.ACCEL:\r\n                    while (anims.mixerWheels.timeScale < 1.0) {\r\n                        anims.mixerWheels.timeScale += deltaTime\r\n                        if (anims.mixerWheels.timeScale >= 1.0) {\r\n                            anims.mixerWheels.timeScale = 1.0\r\n                            driveState = DriveState.DRIVE\r\n                        }\r\n                    }\r\n                    break\r\n                case DriveState.DECEL:\r\n                    while (anims.mixerWheels.timeScale > 0.0) {\r\n                        anims.mixerWheels.timeScale -= deltaTime\r\n                        if (anims.mixerWheels.timeScale <= 0.0) {\r\n                            anims.mixerWheels.timeScale = 0.0\r\n                            driveState = DriveState.STOP\r\n                            anims.mixerWheels.stopAllAction()\r\n                        }\r\n                    }\r\n                    break\r\n                case DriveState.DRIVE:\r\n                    break\r\n                case DriveState.STOP:\r\n                    break\r\n                default:\r\n                    break\r\n            }\r\n        }\r\n\r\n        if (anims.mixerLights) {\r\n            anims.mixerLights.update(deltaTime)\r\n\r\n            if (anims.actLights0 && anims.headLightL && anims.headLightR) {\r\n                const headLightsIntensity = anims.lightsIntensity - (anims.actLights0.time / anims.actLights0.getClip().duration) * anims.lightsIntensity\r\n                anims.headLightL.intensity = anims.headLightR.intensity = headLightsIntensity\r\n            }\r\n        }\r\n\r\n        carGroup.position.z = Math.sin(elapsedTime * 2) * 0.0125\r\n\r\n        particleSystem.update(deltaTime, driveState)\r\n\r\n        if (lineButtons.length > 0) {\r\n            lineButtons.forEach(btn => {\r\n                try {\r\n                    btn.update(camera)\r\n                } catch (e) {\r\n                    // Defensive: ignore update errors for now\r\n                }\r\n            })\r\n        }\r\n\r\n        soundEngine.setEmitterVolumes(soloState)\r\n\r\n        if (controlsPanel && controlsPanel.update) {\r\n            controlsPanel.update()\r\n        }\r\n\r\n        if (audioMeters && audioMeters.update) {\r\n            audioMeters.update()\r\n        }\r\n    }\r\n\r\n    controls.update()\r\n\r\n    perfMonitor.update()\r\n\r\n    renderer.render(scene, camera)\r\n\r\n    animationFrameId = window.requestAnimationFrame(tick)\r\n}\r\n\r\ntick()"],"names":["DriveState","SoloState","SoloBtnColors","EmitterVolMults","ConeEmitterSettings","ThrottleMap","LightingDefaults","EnvironmentPresets","checkWebGLSupport","canvas","gl","requiredExtensions","ext","err","checkWebAudioSupport","showErrorUI","title","message","blocking","existing","overlay","container","titleEl","messageEl","closeBtn","showLoadingUI","spinner","style","newMessage","loadGLTFModel","loader","path","onProgress","resolve","reject","gltf","error","loadAudioFile","buffer","loadHDRTexture","texture","disposeObject","object","i","material","disposeMaterial","prop","value","disposeTexture","disposeAudioEmitter","emitter","dryGain","wetGain","convolver","createDirectionalLight","color","intensity","mapSize","far","bounds","position","light","THREE.DirectionalLight","createDirectionalLights","configs","cfg","colorToHex","c","n","createAudioEmitterDebugger","size","showCone","coneAngle","coneDirection","THREE.Vector3","helper","THREE.Group","coneHeight","coneAngleRad","THREE.MathUtils","coneRadius","geometry","THREE.ConeGeometry","THREE.MeshBasicMaterial","THREE.DoubleSide","cone","THREE.Mesh","defaultDir","quaternion","THREE.Quaternion","tipGeometry","THREE.SphereGeometry","tipMaterial","tip","sphere","createHeadlightSpots","distance","angle","penumbra","decay","leftPosition","rightPosition","targetPosition","left","THREE.SpotLight","right","playPositionalAudio","audioLoader","store","storeKey","loop","refDistance","volume","offset","onEnded","playBuffer","createLineButton","screenAnchor","THREE.Vector2","targetLocalPos","targetObject","label","points","lineGeom","THREE.BufferGeometry","lineMat","THREE.LineBasicMaterial","line","THREE.Line","domButton","raycaster","THREE.Raycaster","isVisible","_ndc","_dir","_startPoint","_targetWorld","_rayDir","_endPoint","_proj","_canvas","_canvasRect","_frameCount","update","camera","hits","posAttr","x","y","setVisible","visible","dispose","MAX_PARTICLES","smokeGeometry","smokePositions","smokeColors","smokeSizes","THREE.BufferAttribute","smokeMaterial","THREE.PointsMaterial","THREE.AdditiveBlending","smokePoints","THREE.Points","particlePool","particle","index","particleSystem","exhaustEmitter","deltaTime","engineState","activeSettings","add","p","radius1","theta","x1","z1","radius2","x2","z2","direction","speed","brightness","activeParticles","activeCount","idx","colorIdx","duration","createMixer","emitters","initialVisible","panel","analysers","ensurePanel","buildRow","pos","row","barContainer","barInner","soloColorKey","ensureAnalyser","analyser","THREE.AudioAnalyser","getEmitterVolume","soloScaling","v","createControls","initVisible","initIgnition","initHeadlights","ignitionBtn","ignitionOn","ignitionCallback","headlightsBtn","headlightsOn","headlightsCallback","throttleBtn","throttlePressStart","throttlePressed","throttleCallback","registerIgnitionCallback","callback","registerHeadlightsCallback","registerThrottleCallback","updateIgnitionButton","startSpan","stopSpan","beams","beamsAnimating","getBeams","setBeamState","on","beam","animateBeams","turnOn","order","step","updateHeadlightsButton","animated","updateThrottleVisibility","handleThrottlePress","pressDuration","colorValue","createPerformanceMonitor","frames","prevTime","fps","frameTime","currentTime","delta","fpsColor","THREE.ColorManagement","driveState","soloState","webglCheck","audioCheck","initState","scene","THREE.Scene","THREE.Color","THREE.FogExp2","dbg","dat.GUI","dbgAudioSettings","dbgAudio","dbgAudioReverb","dbgVehicle","dbgPerformance","dbgPerfSettings","gltfLoader","GLTFLoader","THREE.AudioLoader","rgbeLoader","RGBELoader","HDRCubeTextureLoader","floor","THREE.PlaneGeometry","THREE.MeshStandardMaterial","originalBackground","currentHDRTexture","hdrOptions","hdrParams","name","applyLightingOverride","renderer","baseLightingSnapshot","obj","m","ambientLight","directionalLights","dl","hemiLight","soundEngine","reverbParams","preset","reverbPreset","THREE.EquirectangularReflectionMapping","reverbMapEntry","reverbMap","reverbPath","blend","scalingFactor","carGroup","lineButtons","anims","key","initializeModels","loadingUI","gltfCar","gltfWheels","gltfLights","wheelFL","wheelFR","wheelRR","THREE.AnimationMixer","THREE.AnimationObjectGroup","THREE.LoopOnce","headLightL","headLightR","setupSoloButtons","carScene","intakeSoloBtn","exhaustSoloBtn","interiorSoloBtn","btn","otherBtn","emitterDebuggers","posKey","buttonVisibility","checkSceneReady","THREE.HemisphereLight","THREE.AmbientLight","l","buildLightingSnapshot","resetLightingFromSnapshot","override","ov","sizes","handleResize","THREE.PerspectiveCamera","controls","OrbitControls","THREE.WebGLRenderer","THREE.LinearSRGBColorSpace","THREE.PCFSoftShadowMap","listener","THREE.AudioListener","audioContext","audioEmitters","THREE.PositionalAudio","currSoloState","baseTarget","multiplier","targetVolume","currentVol","revType","engine","loadPromises","promise","reverbBuffer","ctx","sourceNode","em","controlsPanel","audioMeters","perfMonitor","helperConfig","fakeListOfCars","disposeAll","animationFrameId","isPageVisible","clock","THREE.Clock","previousTime","tick","elapsedTime","headLightsIntensity"],"mappings":"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"}