{"version":3,"file":"index-DK59Gwgb.js","sources":["../../src/systems/constants.js","../../src/systems/helpers.js","../../src/systems/exhaust.js","../../src/systems/meters.js","../../src/script.js"],"sourcesContent":["// Centralized constants for the project\r\nexport const DriveState = {\r\n    STOP: 'stop',\r\n    DRIVE: 'drive',\r\n    ACCEL: 'accel',\r\n    DECEL: 'decel'\r\n}\r\n\r\nexport const SoloState = {\r\n    MIX: 'mix',\r\n    INTAKE: 'intake',\r\n    EXHAUST: 'exhaust',\r\n    INTERIOR: 'interior'\r\n}\r\n\r\nexport const SoloBtnColors = {\r\n    MIX: 0xa056aa,\r\n    INTAKE: 0x4e9eff,\r\n    EXHAUST: 0x9cff7f,\r\n    INTERIOR: 0xffe894\r\n}\r\n\r\n// Global per-emitter volume multipliers (useful for balancing perspectives)\r\nexport const EmitterVolMults = {\r\n    MIX: 0.8,       // Applied to each individually during mix solo state\r\n    INTAKE: 0.5,\r\n    EXHAUST: 0.8,\r\n    INTERIOR: 0.3\r\n}\r\n\r\nexport const ConeEmitterSettings = {\r\n    innerAngle: 45.0, // degrees\r\n    outerAngle: 120.0, // degrees\r\n    outerGain: 0.3    // volume multiplier outside outer cone\r\n}\r\n\r\n// Default lighting colors/intensities; central place to tweak base scene look\r\nexport const LightingDefaults = {\r\n    ambient: { color: 0xffffff, intensity: 0.5 },\r\n    hemisphere: { skyColor: 0xffffff, groundColor: 0x8d8d8d, intensity: 0.4 },\r\n    directional: [\r\n        { color: 0xfeffed, intensity: 1.0 },\r\n        { color: 0xfff7f2, intensity: 1.0 },\r\n        { color: 0xf8feff, intensity: 0.2 }\r\n    ]\r\n}\r\n\r\nexport default {\r\n    DriveState,\r\n    SoloState,\r\n    SoloBtnColors,\r\n    EmitterVolMults,\r\n    ConeEmitterSettings,\r\n    LightingDefaults\r\n}\r\n","import * as THREE from 'three'\r\nimport { ConeEmitterSettings } from './constants.js'\r\n// Note: colorToHex is defined below; forward usage inside file is fine.\r\n\r\n/**\r\n * Create a configured directional light\r\n * @param {Object} opts - options\r\n * @param {Number} opts.color - hex color\r\n * @param {Number} opts.intensity - light intensity\r\n * @param {Number} opts.mapSize - shadow map size (number)\r\n * @param {Number} opts.far - shadow camera far\r\n * @param {Object} opts.bounds - {left, right, top, bottom}\r\n * @param {Array} opts.position - [x,y,z]\r\n * @returns {THREE.DirectionalLight}\r\n */\r\nexport function createDirectionalLight({ color = 0xffffff, intensity = 1.0, mapSize = 1024, far = 15, bounds = { left: -7, right: 7, top: 7, bottom: -7 }, position = [5, 3, 4] } = {}) {\r\n    const light = new THREE.DirectionalLight(color, intensity)\r\n    light.castShadow = true\r\n    light.shadow.mapSize.set(mapSize, mapSize)\r\n    light.shadow.camera.far = far\r\n    light.shadow.camera.left = bounds.left\r\n    light.shadow.camera.right = bounds.right\r\n    light.shadow.camera.top = bounds.top\r\n    light.shadow.camera.bottom = bounds.bottom\r\n    light.position.set(...position)\r\n    return light\r\n}\r\n\r\n/**\r\n * Convenience to create multiple directional lights from an array of configs\r\n * @param {Array} configs - array of config objects passed to createDirectionalLight\r\n * @returns {Array} lights\r\n */\r\nexport function createDirectionalLights(configs = []) {\r\n    return configs.map(cfg => createDirectionalLight(cfg))\r\n}\r\n\r\n/**\r\n * Convert a numeric color (e.g. 0xff00aa) to a #RRGGBB string.\r\n * Safely handles already-string inputs (returns them unchanged if they look like a hex color).\r\n * @param {number|string} c\r\n * @returns {string} #RRGGBB\r\n */\r\nexport function colorToHex(c) {\r\n    if (typeof c === 'string') {\r\n        if (c.startsWith('#') && (c.length === 7 || c.length === 9)) return c.slice(0,7)\r\n        // Attempt to parse numeric from string\r\n        try {\r\n            const n = Number(c)\r\n            if (!Number.isNaN(n)) return `#${(n >>> 0).toString(16).padStart(6, '0')}`\r\n        } catch (_) { /* ignore */ }\r\n        return c // fallback\r\n    }\r\n    return `#${(c >>> 0).toString(16).padStart(6, '0')}`\r\n}\r\n\r\n/**\r\n * Create a visual helper for an audio emitter showing its position and details\r\n * @param {THREE.PositionalAudio} emitter - The audio emitter to debug\r\n * @param {Object} opts - options\r\n * @param {number} opts.size - Size of the helper\r\n * @param {number} opts.color - Color of the helper\r\n * @param {boolean} opts.showCone - If true, show a cone instead of sphere (for directional audio)\r\n * @param {number} opts.coneAngle - Cone angle in degrees (if showCone is true, defaults to ConeEmitterSettings.innerAngle)\r\n * @param {THREE.Vector3} opts.coneDirection - Direction the cone points (if showCone is true)\r\n * @returns {THREE.Group} The helper object\r\n */\r\nexport function createAudioEmitterDebugger(emitter, { size = 0.2, color = 0xffff00, showCone = false, coneAngle = ConeEmitterSettings.innerAngle, coneDirection = new THREE.Vector3(0, 0, 1) } = {}) {\r\n    const helper = new THREE.Group()\r\n    \r\n    if (showCone) {\r\n        // Create a cone geometry to visualize directional audio\r\n        const coneHeight = size * 3\r\n        const coneAngleRad = THREE.MathUtils.degToRad(coneAngle)\r\n        const coneRadius = Math.tan(coneAngleRad) * coneHeight\r\n        const geometry = new THREE.ConeGeometry(coneRadius, coneHeight, 16, 1, true)\r\n        const material = new THREE.MeshBasicMaterial({ \r\n            color, \r\n            wireframe: true,\r\n            transparent: true,\r\n            opacity: 0.6,\r\n            side: THREE.DoubleSide\r\n        })\r\n        const cone = new THREE.Mesh(geometry, material)\r\n        \r\n        // Rotate cone to point in the specified direction\r\n        // Default cone points along Y axis, we need to align it with coneDirection\r\n        const defaultDir = new THREE.Vector3(0, -1, 0)\r\n        const quaternion = new THREE.Quaternion()\r\n        quaternion.setFromUnitVectors(defaultDir, coneDirection.clone().normalize())\r\n        cone.quaternion.copy(quaternion)\r\n        \r\n        // Offset cone so its tip is at the emitter position\r\n        cone.position.copy(coneDirection.clone().normalize().multiplyScalar(coneHeight / 2))\r\n        \r\n        helper.add(cone)\r\n        \r\n        // Add a small sphere at the tip (emitter position)\r\n        const tipGeometry = new THREE.SphereGeometry(size * 0.3)\r\n        const tipMaterial = new THREE.MeshBasicMaterial({ \r\n            color, \r\n            transparent: true,\r\n            opacity: 0.9 \r\n        })\r\n        const tip = new THREE.Mesh(tipGeometry, tipMaterial)\r\n        helper.add(tip)\r\n    } else {\r\n        // Sphere at emitter position\r\n        const geometry = new THREE.SphereGeometry(size)\r\n        const material = new THREE.MeshBasicMaterial({ \r\n            color, \r\n            wireframe: true,\r\n            transparent: true,\r\n            opacity: 0.8 \r\n        })\r\n        const sphere = new THREE.Mesh(geometry, material)\r\n        helper.add(sphere)\r\n    }\r\n\r\n    // Match position to emitter\r\n    helper.position.copy(emitter.position)\r\n\r\n    return helper\r\n}\r\n\r\n/**\r\n * Create a pair of headlight SpotLights (left and right) with standard parameters.\r\n * @param {Object} opts - options\r\n * @param {Number} opts.color - hex color\r\n * @param {Number} opts.intensity - intensity\r\n * @param {Number} opts.distance - distance\r\n * @param {Number} opts.angle - cone angle radians\r\n * @param {Number} opts.penumbra - penumbra\r\n * @param {Number} opts.decay - decay\r\n * @param {Array} opts.leftPosition - [x,y,z]\r\n * @param {Array} opts.rightPosition - [x,y,z]\r\n * @param {Array} opts.targetPosition - [x,y,z]\r\n * @returns {Object} { left: SpotLight, right: SpotLight }\r\n */\r\nexport function createHeadlightSpots({ color = 0xFFFFDE, intensity = 3.0, distance = 10, angle = Math.PI / 6, penumbra = 0.5, decay = 1.0, leftPosition = [0.75, 0.76, 1.8], rightPosition = [-0.75, 0.76, 1.8], targetPosition = [0, 0, 10] } = {}) {\r\n    const left = new THREE.SpotLight(color, intensity, distance, angle, penumbra, decay)\r\n    left.position.set(...leftPosition)\r\n    left.target.position.set(...targetPosition)\r\n    left.castShadow = true\r\n    left.shadow.mapSize.width = 1024\r\n    left.shadow.mapSize.height = 1024\r\n    left.shadow.camera.near = 0.5\r\n    left.shadow.camera.far = 20\r\n    left.shadow.camera.fov = 30\r\n\r\n    const right = new THREE.SpotLight(color, intensity, distance, angle, penumbra, decay)\r\n    right.position.set(...rightPosition)\r\n    right.target.position.set(...targetPosition)\r\n    right.castShadow = true\r\n    right.shadow.mapSize.width = 1024\r\n    right.shadow.mapSize.height = 1024\r\n    right.shadow.camera.near = 0.5\r\n    right.shadow.camera.far = 20\r\n    right.shadow.camera.fov = 30\r\n\r\n    return { left, right }\r\n}\r\n\r\n/**\r\n * Load (if needed) and play audio on a THREE.PositionalAudio emitter.\r\n * If a `store` object and `storeKey` are provided, the loaded buffer will be cached there and reused.\r\n * @param {THREE.AudioLoader} audioLoader - instance used to load audio files\r\n * @param {THREE.PositionalAudio} emitter - the positional audio emitter to play the buffer on\r\n * @param {String} path - URL/path to the audio file\r\n * @param {Object} [opts]\r\n * @param {Object} [opts.store] - optional object to cache loaded buffers (e.g., soundEngine)\r\n * @param {String} [opts.storeKey] - key on the store where the buffer will be saved/loaded\r\n * @param {Boolean} [opts.loop=false] - whether to loop the audio\r\n * @param {Number} [opts.refDistance=20] - emitter reference distance\r\n * @param {Number|null} [opts.volume=null] - optional volume to set (0..1)\r\n * @param {Function|null} [opts.onEnded=null] - optional onEnded callback to set on emitter\r\n */\r\nexport function playPositionalAudio(audioLoader, emitter, path, { store = null, storeKey = null, loop = false, refDistance = 20, volume = null, offset = 0, onEnded = null } = {}) {\r\n    const playBuffer = (buffer) => {\r\n        try {\r\n            emitter.stop()\r\n            emitter.setBuffer(buffer)\r\n            emitter.setRefDistance(refDistance)\r\n            emitter.setLoop(loop)\r\n            if (typeof volume === 'number' && emitter.setVolume) emitter.setVolume(volume)\r\n            if (onEnded) emitter.onEnded = onEnded\r\n            emitter.play()\r\n        } catch (e) {\r\n            // Defensive: if emitter is not ready, log and ignore\r\n            // (caller should ensure emitter is attached to listener)\r\n            // console.warn('playPositionalAudio: emitter playback failed', e)\r\n        }\r\n    }\r\n\r\n    if (store && storeKey && store[storeKey]) {\r\n        playBuffer(store[storeKey])\r\n        return\r\n    }\r\n\r\n    audioLoader.load(path, (buffer) => {\r\n        console.log(`Loaded Audio - ${pos}: ${key}`)\r\n        \r\n        if (store && storeKey) store[storeKey] = buffer\r\n        playBuffer(buffer)\r\n    })\r\n}\r\n\r\n/**\r\n * Create a line with a clickable button at the end.\r\n * - screenAnchor: NDC coordinates (x,y) in range [-1,1] for the fixed screen point (e.g. upper-left = [-0.9,0.9])\r\n * - targetLocalPos: THREE.Vector3 position in local space of the target object (e.g. point on car model)\r\n * - targetObject: THREE.Object3D that the local position belongs to (used to compute world position and raycast intersection)\r\n * Returns an object { line, button, update(camera), getClickable() }\r\n */\r\nexport function createLineButton({ screenAnchor = new THREE.Vector2(-0.9, 0.9), targetLocalPos = new THREE.Vector3(0, 0, 0), targetObject = null, label = 'btn', color = 0x00ff00 } = {}) {\r\n    // Line geometry (two points)\r\n    const points = [new THREE.Vector3(), new THREE.Vector3()]\r\n    const lineGeom = new THREE.BufferGeometry().setFromPoints(points)\r\n    const lineMat = new THREE.LineBasicMaterial({ color: color })\r\n    const line = new THREE.Line(lineGeom, lineMat)\r\n    line.set\r\n\r\n    // Create a DOM button that will be positioned at the line's start point\r\n    let domButton = null\r\n    if (typeof document !== 'undefined') {\r\n        domButton = document.createElement('button')\r\n        domButton.color = color\r\n        domButton.dimmed = false\r\n        domButton.className = 'three-linebutton'\r\n        domButton.style.position = 'absolute'\r\n        domButton.style.padding = '4px 12px'\r\n        domButton.style.border = 'none'\r\n        domButton.style.borderRadius = '12px'\r\n    domButton.style.backgroundColor = colorToHex(color)\r\n        domButton.style.color = '#272727ff'\r\n        domButton.style.fontFamily = 'sans-serif'\r\n        domButton.style.fontSize = '14px'\r\n        domButton.style.cursor = 'pointer'\r\n        domButton.style.transform = 'translate(-50%, -50%)'\r\n        domButton.style.boxShadow = '0 2px 2px rgba(255, 255, 255, 0.24)'\r\n        domButton.style.userSelect = 'none'\r\n        domButton.textContent = label\r\n        document.body.appendChild(domButton)\r\n\r\n        // Add hover effect\r\n        domButton.addEventListener('mouseenter', () => {\r\n            domButton.style.backgroundColor = colorToHex(Math.min(color * 4, 0xffffff))\r\n        })\r\n        domButton.addEventListener('mouseleave', () => {\r\n            domButton.style.backgroundColor = domButton.dimmed ? `#444444` : colorToHex(color)\r\n        })\r\n    }\r\n\r\n    // Raycaster used internally to find intersection point on targetObject\r\n    const raycaster = new THREE.Raycaster()\r\n\r\n    // Track visibility state\r\n    let isVisible = true\r\n\r\n    // Update function to be called each frame\r\n    function update(camera) {\r\n        // Compute world start point from screenAnchor (NDC) at z = 0.5\r\n        const ndc = new THREE.Vector3(screenAnchor.x, screenAnchor.y, 0.5)\r\n        ndc.unproject(camera)\r\n        const dir = ndc.clone().sub(camera.position).normalize()\r\n        // set a reasonable distance for the start point along the ray (near camera)\r\n        const startPoint = camera.position.clone().add(dir.clone().multiplyScalar(1.0))\r\n\r\n        // Compute target world position from targetLocalPos / targetObject\r\n        let targetWorld = new THREE.Vector3()\r\n        if (targetObject) {\r\n            targetWorld.copy(targetLocalPos)\r\n            targetObject.localToWorld(targetWorld)\r\n        } else {\r\n            targetWorld.copy(targetLocalPos)\r\n        }\r\n\r\n        // Raycast from camera towards targetWorld to find intersection with targetObject (car)\r\n        const rayDir = targetWorld.clone().sub(camera.position).normalize()\r\n        raycaster.set(camera.position, rayDir)\r\n        let endPoint = targetWorld.clone()\r\n        if (targetObject) {\r\n            const hits = raycaster.intersectObject(targetObject, true)\r\n            if (hits && hits.length > 0) {\r\n                endPoint.copy(hits[0].point)\r\n            } else {\r\n                // fallback: use targetWorld\r\n                endPoint.copy(targetWorld)\r\n            }\r\n        }\r\n\r\n        // Update line geometry positions (startPoint -> endPoint)\r\n        const posAttr = line.geometry.attributes.position\r\n        posAttr.setXYZ(0, startPoint.x, startPoint.y, startPoint.z)\r\n        posAttr.setXYZ(1, endPoint.x, endPoint.y, endPoint.z)\r\n        posAttr.needsUpdate = true\r\n\r\n        // Update DOM button position at the line's start point\r\n        if (domButton) {\r\n            const proj = startPoint.clone().project(camera)\r\n            // Hide if behind camera or offscreen\r\n            if (!isVisible || proj.z > 1 || proj.z < -1 || proj.x < -1.2 || proj.x > 1.2 || proj.y < -1.2 || proj.y > 1.2) {\r\n                domButton.style.display = 'none'\r\n            } else {\r\n                domButton.style.display = ''\r\n                const canvas = document.querySelector('canvas.webgl')\r\n                if (canvas) {\r\n                    const rect = canvas.getBoundingClientRect()\r\n                    const x = (proj.x * 0.5 + 0.5) * rect.width + rect.left\r\n                    const y = (-proj.y * 0.5 + 0.5) * rect.height + rect.top\r\n                    domButton.style.left = `${x}px`\r\n                    domButton.style.top = `${y}px`\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Toggle visibility of both line and DOM button\r\n    function setVisible(visible) {\r\n        isVisible = visible\r\n        line.visible = visible\r\n        if (domButton) {\r\n            domButton.style.display = visible ? '' : 'none'\r\n        }\r\n    }\r\n\r\n    return {\r\n        line,\r\n        button: domButton,\r\n        update,\r\n        setVisible\r\n    }\r\n}\r\n","import * as THREE from 'three'\r\n\r\nconst smokeParticles = []\r\nconst smokeGeometry = new THREE.BufferGeometry()\r\nconst smokePositions = new Float32Array(1000 * 3) // Max 1000 particles, xyz positions\r\nconst smokeColors = new Float32Array(1000 * 4) // RGBA colors\r\nconst smokeSizes = new Float32Array(1000) // Particle sizes\r\n\r\nsmokeGeometry.setAttribute('position', new THREE.BufferAttribute(smokePositions, 3))\r\nsmokeGeometry.setAttribute('color', new THREE.BufferAttribute(smokeColors, 4))\r\nsmokeGeometry.setAttribute('size', new THREE.BufferAttribute(smokeSizes, 1))\r\n\r\nconst smokeMaterial = new THREE.PointsMaterial({\r\n    size: 0.1,\r\n    vertexColors: true,\r\n    transparent: true,\r\n    opacity: 0.5,\r\n    blending: THREE.AdditiveBlending\r\n})\r\n\r\nconst smokePoints = new THREE.Points(smokeGeometry, smokeMaterial)\r\n\r\nexport const particleSystem = {\r\n    emitters: [],\r\n    initialize: () => {\r\n        // Create exhaust emitter for tailpipe\r\n        const exhaustEmitter = {\r\n            enabled: false,\r\n            position: new THREE.Vector3(-0.5, 0.3, -2.0), // Tailpipe position relative to car\r\n            settings: {\r\n                radius_1: 0.02,\r\n                radius_2: 0.1,\r\n                radius_height: 0.2,\r\n                add_time: 0.02,\r\n                elapsed: 0,\r\n                live_time_from: 1.0,\r\n                live_time_to: 1.5,\r\n                opacity_decrease: 0.008,\r\n                rotation_from: 0.5,\r\n                rotation_to: 1.0,\r\n                speed_from: 0.003,\r\n                speed_to: 0.006,\r\n                scale_from: 0.1,\r\n                scale_increase: 0.002,\r\n                color_from: [0.9, 0.9, 0.9],\r\n                color_to: [0.5, 0.5, 0.5],\r\n                color_speed_from: 1.0,\r\n                color_speed_to: 1.0,\r\n                brightness_from: 0.5,\r\n                brightness_to: 0.9,\r\n                opacity: 0.6,\r\n                blend: 0.8,\r\n                texture: 0.5  // Smoke texture\r\n            }\r\n        }\r\n        particleSystem.emitters.push(exhaustEmitter)\r\n    },\r\n    update: (deltaTime, engineState) => {\r\n        // Update emitters and create new particles\r\n        particleSystem.emitters.forEach(emitter => {\r\n            if (engineState !== 'stop') {\r\n                emitter.enabled = true\r\n                emitter.settings.add_time = engineState === 'accel' ? 0.01 : 0.02 // More particles during acceleration  \r\n                emitter.settings.speed_from = engineState === 'accel' ? 0.005 : 0.003\r\n                emitter.settings.speed_to = engineState === 'accel' ? 0.008 : 0.006\r\n            } else {\r\n                emitter.enabled = false\r\n            }\r\n\r\n            if (emitter.enabled) {\r\n                let add = 0\r\n                emitter.settings.elapsed += deltaTime\r\n                add = Math.floor(emitter.settings.elapsed / emitter.settings.add_time)\r\n                emitter.settings.elapsed -= add * emitter.settings.add_time\r\n\r\n                while (add--) {\r\n                    // Create new particle\r\n                    const radius_1 = emitter.settings.radius_1 * Math.sqrt(Math.random())\r\n                    const theta = 2 * Math.PI * Math.random()\r\n                    const x_1 = emitter.position.x + radius_1 * Math.cos(theta)\r\n                    const z_1 = emitter.position.z + radius_1 * Math.sin(theta)\r\n\r\n                    const radius_2 = emitter.settings.radius_2 * Math.sqrt(Math.random())\r\n                    const x_2 = x_1 + radius_2 * Math.cos(theta)\r\n                    const z_2 = z_1 + radius_2 * Math.sin(theta)\r\n\r\n                    const direction = new THREE.Vector3(\r\n                        x_2 - x_1,\r\n                        emitter.settings.radius_height,\r\n                        z_2 - z_1\r\n                    ).normalize()\r\n\r\n                    const speed = Math.random() * (emitter.settings.speed_to - emitter.settings.speed_from) + emitter.settings.speed_from\r\n                    direction.multiplyScalar(speed)\r\n\r\n                    const brightness = Math.random() * (emitter.settings.brightness_to - emitter.settings.brightness_from) + emitter.settings.brightness_from\r\n\r\n                    smokeParticles.push({\r\n                        offset: [x_1, emitter.position.y, z_1],\r\n                        scale: [emitter.settings.scale_from, emitter.settings.scale_from],\r\n                        quaternion: [direction.x, direction.y, direction.z, 3],\r\n                        rotation: Math.random() * (emitter.settings.rotation_to - emitter.settings.rotation_from) + emitter.settings.rotation_from,\r\n                        color: [1, 1, 1, emitter.settings.opacity],\r\n                        blend: emitter.settings.blend,\r\n                        texture: emitter.settings.texture,\r\n                        live: Math.random() * (emitter.settings.live_time_to - emitter.settings.live_time_from) + emitter.settings.live_time_from,\r\n                        scale_increase: emitter.settings.scale_increase,\r\n                        opacity_decrease: emitter.settings.opacity_decrease,\r\n                        color_from: emitter.settings.color_from.map(c => c * brightness),\r\n                        color_to: emitter.settings.color_to.map(c => c * brightness),\r\n                        color_speed: Math.random() * (emitter.settings.color_speed_to - emitter.settings.color_speed_from) + emitter.settings.color_speed_from,\r\n                        color_pr: 0\r\n                    })\r\n                }\r\n            }\r\n        });\r\n\r\n        // Update existing particles\r\n        for (let i = smokeParticles.length - 1; i >= 0; i--) {\r\n            const p = smokeParticles[i]\r\n\r\n            // Update particle position based on quaternion direction\r\n            p.offset[0] += p.quaternion[0]\r\n            p.offset[1] += p.quaternion[1]\r\n            p.offset[2] += p.quaternion[2]\r\n\r\n            // Update scale\r\n            p.scale[0] += p.scale_increase\r\n            p.scale[1] += p.scale_increase\r\n\r\n            // Update color\r\n            p.color_pr += p.color_speed\r\n            if (p.color_pr > 1) p.color_pr = 1\r\n            p.color[0] = p.color_from[0] + (p.color_to[0] - p.color_from[0]) * p.color_pr\r\n            p.color[1] = p.color_from[1] + (p.color_to[1] - p.color_from[1]) * p.color_pr\r\n            p.color[2] = p.color_from[2] + (p.color_to[2] - p.color_from[2]) * p.color_pr\r\n\r\n            // Update opacity\r\n            p.color[3] -= p.opacity_decrease\r\n\r\n            // Remove dead particles\r\n            p.live -= deltaTime\r\n            if (p.live <= 0 || p.color[3] <= 0) {\r\n                smokeParticles.splice(i, 1)\r\n                continue\r\n            }\r\n\r\n            // Update particle attributes in geometry\r\n            const idx = i * 3\r\n            smokePositions[idx] = p.offset[0]\r\n            smokePositions[idx + 1] = p.offset[1]\r\n            smokePositions[idx + 2] = p.offset[2]\r\n\r\n            const colorIdx = i * 4\r\n            smokeColors[colorIdx] = p.color[0]\r\n            smokeColors[colorIdx + 1] = p.color[1]\r\n            smokeColors[colorIdx + 2] = p.color[2]\r\n            smokeColors[colorIdx + 3] = p.color[3]\r\n\r\n            smokeSizes[i] = p.scale[0]\r\n        }\r\n\r\n        // Update geometry attributes\r\n        smokeGeometry.attributes.position.needsUpdate = true\r\n        smokeGeometry.attributes.color.needsUpdate = true\r\n        smokeGeometry.attributes.size.needsUpdate = true\r\n    },\r\n    getMesh: () => {\r\n        return smokePoints\r\n    }\r\n}","import * as THREE from 'three'\r\nimport { SoloBtnColors } from './constants.js'\r\nimport { colorToHex } from './helpers.js'\r\n\r\n// Minimal portable mixer panel for showing emitter volumes\r\nexport function createMixer({ emitters = {}, initialVisible = false } = {}) {\r\n    let visible = initialVisible\r\n    let panel = null\r\n    const analysers = new Map() // Store audio analysers for each emitter\r\n\r\n    function ensurePanel() {\r\n        if (panel) return panel\r\n        panel = document.createElement('div')\r\n        panel.id = 'audio-volume-panel'\r\n        Object.assign(panel.style, {\r\n            position: 'fixed',\r\n            bottom: '10px', // Lower right corner\r\n            right: '10px',\r\n            padding: '8px',\r\n            background: 'rgba(0,0,0,0.6)',\r\n            color: '#fff',\r\n            borderRadius: '6px',\r\n            zIndex: 9999,\r\n            fontFamily: 'monospace',\r\n            fontSize: '12px',\r\n            pointerEvents: 'none',\r\n            display: visible ? '' : 'none'\r\n        })\r\n        document.body.appendChild(panel)\r\n        return panel\r\n    }\r\n\r\n    function buildRow(pos) {\r\n        const row = document.createElement('div')\r\n        row.dataset.pos = pos\r\n        Object.assign(row.style, {\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            marginBottom: '6px',\r\n            pointerEvents: 'auto',\r\n            flexDirection: 'row'\r\n        })\r\n\r\n        const label = document.createElement('div')\r\n        label.className = 'vol-label'\r\n        label.textContent = pos\r\n        Object.assign(label.style, {\r\n            width: '70px',\r\n            textTransform: 'capitalize'\r\n        })\r\n\r\n        const barContainer = document.createElement('div')\r\n        barContainer.className = 'vol-bar-container'\r\n        Object.assign(barContainer.style, {\r\n            width: '64px',\r\n            height: '12px',\r\n            background: 'rgba(255,255,255,0.08)',\r\n            borderRadius: '3px',\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            overflow: 'hidden',\r\n            marginLeft: '8px',\r\n            marginRight: '8px'\r\n        })\r\n\r\n        const barInner = document.createElement('div')\r\n        barInner.className = 'vol-bar'\r\n        Object.assign(barInner.style, {\r\n            width: '0%',\r\n            height: '100%',\r\n            background: '#666', // fallback until mapped color applied\r\n            transition: 'width 0.08s linear'\r\n        })\r\n\r\n        // const value = document.createElement('div')\r\n        // value.className = 'vol-value'\r\n        // Object.assign(value.style, {\r\n        //     marginLeft: '8px',\r\n        //     minWidth: '36px',\r\n        //     textAlign: 'right'\r\n        // })\r\n        // value.textContent = '0%'\r\n\r\n        // Apply color from SoloBtnColors mapping based on position key\r\n        const soloColorKey = pos.toUpperCase()\r\n        if (SoloBtnColors[soloColorKey] !== undefined) {\r\n            barInner.style.background = colorToHex(SoloBtnColors[soloColorKey])\r\n        }\r\n\r\n        barContainer.appendChild(barInner)\r\n        row.appendChild(label)\r\n        row.appendChild(barContainer)\r\n        // row.appendChild(value)\r\n        return row\r\n    }\r\n\r\n    function ensureAnalyser(pos, emitter) {\r\n        if (!analysers.has(pos) && emitter?.getOutput()) {\r\n            const analyser = new THREE.AudioAnalyser(emitter, 32)\r\n            analysers.set(pos, analyser)\r\n        }\r\n        return analysers.get(pos)\r\n    }\r\n\r\n    function getEmitterVolume(pos, emitter) {\r\n        const analyser = ensureAnalyser(pos, emitter)\r\n        if (!analyser) return 0\r\n\r\n        const volume = analyser.getAverageFrequency() / 255 // Normalize to 0-1\r\n        const soloScaling = emitter && emitter.getVolume ? emitter.getVolume() : 0\r\n        return volume * soloScaling\r\n    }\r\n\r\n    function update() {\r\n        const p = ensurePanel()\r\n        Object.entries(emitters).forEach(([pos, emitter]) => {\r\n            // Disabling mix row, as now just using separate assets for mix\r\n            if (pos === 'mix') return\r\n            \r\n            let row = p.querySelector(`[data-pos=\"${pos}\"]`)\r\n            if (!row) {\r\n                row = buildRow(pos)\r\n                p.appendChild(row)\r\n            }\r\n\r\n            const volume = getEmitterVolume(pos, emitter) * 3\r\n            const barInner = row.querySelector('.vol-bar')\r\n            barInner.style.width = `${Math.max(0, Math.min(1, volume)) * 100}%`\r\n            \r\n            // const value = row.querySelector('.vol-value')\r\n            // value.textContent = `${Math.round(volume * 100)}%`\r\n        })\r\n        panel.style.display = visible ? '' : 'none'\r\n    }\r\n\r\n    function setVisible(v) {\r\n        visible = !!v\r\n        if (panel) panel.style.display = visible ? '' : 'none'\r\n    }\r\n\r\n    return {\r\n        update,\r\n        setVisible,\r\n        isVisible: () => visible\r\n    }\r\n}\r\n","import * as THREE from 'three'\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js'\r\nimport { RGBELoader } from 'three/examples/jsm/loaders/RGBELoader.js'\r\nimport { HDRCubeTextureLoader  } from 'three/examples/jsm/loaders/HDRCubeTextureLoader.js'\r\nimport * as dat from 'lil-gui'\r\n\r\nTHREE.ColorManagement.enabled = false\r\n\r\nimport { DriveState, SoloState, SoloBtnColors, EmitterVolMults, ConeEmitterSettings, LightingDefaults } from './systems/constants.js'\r\nimport { colorToHex } from './systems/helpers.js'\r\nvar driveState = DriveState.STOP\r\nvar soloState = SoloState.MIX\r\n\r\nimport { particleSystem } from './systems/exhaust.js'\r\nimport { createDirectionalLights, createHeadlightSpots, playPositionalAudio, createLineButton, createAudioEmitterDebugger } from './systems/helpers.js'\r\nimport { createMixer } from './systems/meters.js'\r\n\r\n/**\r\n * Setup\r\n */\r\n// Canvas\r\nconst canvas = document.querySelector('canvas.webgl')\r\n\r\n// Scene\r\nconst scene = new THREE.Scene()\r\nscene.background = new THREE.Color(0xa0a0a0);\r\nscene.fog = new THREE.FogExp2(0xefd1b5, 0.05);\r\n\r\n// Debug\r\nconst dbg = new dat.GUI()\r\n\r\nconst dbgAudioSettings = {\r\n    'Meters': true,\r\n    'Emitters': false\r\n}\r\nconst dbgAudio = dbg.addFolder('Audio')\r\nlet dbgAudioReverb = null\r\nlet dbgAudioMeters = null\r\nlet dbgAudioEmitters = null\r\nlet dbgAudioMicPersp = null\r\n\r\nconst dbgVehicle = dbg.addFolder('Vehicle')\r\nlet dbgVehLevelSelect = null\r\nlet dbgVehCarSelect = null\r\nlet dbgVehIgnOn = null\r\nlet dbgVehIgnOff = null\r\n\r\n// Axes\r\n// const axes = new THREE.AxesHelper(1)\r\n// axes.visible = false\r\n// scene.add(axes)\r\n// dbgUtils.add(axes, 'visible').name('Axes')\r\n\r\n// Loaders\r\nconst gltfLoader = new GLTFLoader()\r\nconst audioLoader = new THREE.AudioLoader()\r\nconst rgbeLoader = new RGBELoader()\r\nconst hdrCubeLoader = new HDRCubeTextureLoader()\r\n\r\n/**\r\n * Floor\r\n */\r\nconst floor = new THREE.Mesh(\r\n    new THREE.PlaneGeometry(10, 10),\r\n    new THREE.MeshStandardMaterial({\r\n        color: '#444444',\r\n        metalness: 0,\r\n        roughness: 0.5\r\n    })\r\n)\r\nfloor.receiveShadow = true\r\nfloor.rotation.x = - Math.PI * 0.5\r\nscene.add(floor)\r\n\r\n/**\r\n * HDRIs\r\n */\r\n\r\nconst hdris = {\r\n    'Garage': {\r\n        path: './hdri/garage.hdr',\r\n        reverb: 'Garage',\r\n        lighting: {\r\n            ambient: { color: 0xf0f0f0, intensity: 0.2 },\r\n            hemisphere: { skyColor: 0xc0c0c0, groundColor: 0x3a3a3a, intensity: 0.15 },\r\n            directional: [\r\n                { color: 0xbcd4ff, intensity: 1.5 },\r\n                { color: 0xffddaa, intensity: 0.5 },\r\n                { color: 0x888888, intensity: 0.1 }\r\n            ]\r\n        }\r\n    },\r\n    'Track': {\r\n        path: './hdri/track.hdr',\r\n        reverb: 'Outdoors',\r\n        lighting: {\r\n            ambient: { color: 0xfff693, intensity: 0.25 },\r\n            hemisphere: { skyColor: 0xcce6ff, groundColor: 0x5a5a5a, intensity: 0.15 },\r\n            directional: [\r\n                { color: 0xffffff, intensity: 0.1 },\r\n                { color: 0xfff2d1, intensity: 0.1 },\r\n                { color: 0xaaccff, intensity: 0.0 }\r\n            ]\r\n        }\r\n    }\r\n}\r\n\r\n// Keep reference to the original background so \"None\" can restore it\r\nconst originalBackground = scene.background ? scene.background.clone() : new THREE.Color(0xa0a0a0)\r\nlet currentHDRTexture = null\r\n\r\nconst hdrOptions = ['None', ...Object.keys(hdris)]\r\nconst hdrParams = { HDR: 'None' }\r\ndbgVehLevelSelect = dbgVehicle.add(hdrParams, 'HDR', hdrOptions).name('Level Select').onChange(name => {\r\n    if (name === 'None') {\r\n        // Dispose previously loaded HDR texture and restore defaults\r\n        if (currentHDRTexture) {\r\n            try { currentHDRTexture.dispose() } catch (_) {}\r\n            currentHDRTexture = null\r\n        }\r\n        scene.background = originalBackground.clone ? originalBackground.clone() : originalBackground\r\n        scene.environment = null\r\n        floor.visible = true\r\n\r\n        // Reset lighting & atmospheric settings\r\n        applyLightingOverride(null)\r\n        if (scene.fog) {\r\n            scene.fog.color.set(0xefd1b5)\r\n            scene.fog.density = 0.05\r\n        }\r\n        if (typeof renderer.toneMappingExposure === 'number') renderer.toneMappingExposure = baseLightingSnapshot.exposure\r\n\r\n        // Force material refresh (remove stale env-dependent shader variants)\r\n        scene.traverse(obj => {\r\n            if (obj.isMesh && obj.material) {\r\n                if (Array.isArray(obj.material)) obj.material.forEach(m => m.needsUpdate = true)\r\n                else obj.material.needsUpdate = true\r\n            }\r\n        })\r\n\r\n        // Debug log comparison\r\n        console.log('[HDR Reset] Ambient', ambientLight.intensity, ambientLight.color.getHexString())\r\n        directionalLights.forEach((dl,i)=>console.log(`[HDR Reset] Dir${i}`, dl.intensity, dl.color.getHexString()))\r\n        console.log('[HDR Reset] Hemi', hemiLight.intensity, hemiLight.color.getHexString(), hemiLight.groundColor.getHexString())\r\n\r\n        // Remove reverb\r\n        soundEngine.removeConvolutionReverb()\r\n        reverbParams.Reverb = 'None'\r\n        if (dbgAudioReverb) {\r\n            dbgAudioReverb.updateDisplay()\r\n        }\r\n\r\n        return\r\n    }\r\n\r\n    const preset = hdris[name]\r\n    if (!preset) return\r\n    \r\n    // Handle both old string format and new object format\r\n    const path = typeof preset === 'string' ? preset : preset.path\r\n    const reverbPreset = typeof preset === 'object' ? preset.reverb : null\r\n\r\n    rgbeLoader.load(path, (texture) => {\r\n        // Dispose previous texture if any\r\n        if (currentHDRTexture) {\r\n            try { currentHDRTexture.dispose() } catch (_) {}\r\n        }\r\n\r\n        texture.mapping = THREE.EquirectangularReflectionMapping\r\n        currentHDRTexture = texture\r\n\r\n        scene.background = texture\r\n        scene.environment = texture\r\n\r\n        // Hide floor when HDRI is active\r\n        floor.visible = false\r\n\r\n        // Apply lighting override if provided\r\n        if (preset.lighting) {\r\n            applyLightingOverride(preset.lighting)\r\n        }\r\n\r\n        // Auto-select associated reverb if specified\r\n        if (reverbPreset && reverbParams) {\r\n            reverbParams.Reverb = reverbPreset\r\n            // Trigger reverb load by finding and calling the controller's onChange\r\n            if (dbgAudioReverb) {\r\n                dbgAudioReverb.updateDisplay()\r\n                // Manually trigger the reverb loading logic\r\n                const reverbMapEntry = reverbMap[reverbPreset]\r\n                if (reverbMapEntry) {\r\n                    const { path: reverbPath, blend = 0.5, scalingFactor = 1.0 } = reverbMapEntry\r\n                    soundEngine.currentReverbBlend = blend\r\n                    soundEngine.currentReverbScalingFactor = scalingFactor\r\n                    const reverbLoader = new THREE.AudioLoader()\r\n                    reverbLoader.load(reverbPath, (buffer) => {\r\n                        soundEngine.applyConvolutionReverb(buffer)\r\n                    })\r\n                }\r\n            }\r\n        }\r\n    })\r\n})\r\n\r\n\r\n/**\r\n * Objects\r\n */\r\nlet carGroup = new THREE.Group()\r\nscene.add(carGroup)\r\ncarGroup.add(particleSystem.getMesh())\r\n\r\n// Line buttons: will be created after car model loads; store them here\r\nconst lineButtons = []\r\n\r\n// Animation mixers and actions\r\nlet anims = {\r\n    // Wheels\r\n    mixerWheels: null,\r\n    actWheelsRot: null, actTiresRot: null,\r\n\r\n    // Lights\r\n    mixerLights: null,\r\n    actLights0: null, actLights1: null, actLights2: null, actLights3: null, actLights4: null,\r\n    headLightL: null, headLightR: null,\r\n    lightsFlipFlop: true,\r\n    lightsIntensity: 3.0,\r\n    lightsTimeScaleToggle: () => {\r\n        if (anims.lightsFlipFlop) {\r\n            anims.mixerLights.timeScale = 1.5\r\n            for (let i = 0; i < 5; i++) {\r\n                const key = `actLights${i}`\r\n                anims[key].time = 0\r\n            }\r\n            anims.lightsFlipFlop = false\r\n        } else {\r\n            anims.mixerLights.timeScale = -1.5\r\n            for (let i = 0; i < 5; i++) {\r\n                const key = `actLights${i}`\r\n                anims[key].time = anims[key].getClip().duration - anims[key].time\r\n            }\r\n            anims.lightsFlipFlop = true\r\n        }\r\n    },\r\n    lights: () => { anims.mixerLights.stopAllAction(), anims.lightsTimeScaleToggle(), anims.actLights0.play(), anims.actLights1.play(), anims.actLights2.play(), anims.actLights3.play(), anims.actLights4.play() }\r\n}\r\n\r\n// Car\r\ngltfLoader.load('./model/rx7/rx7.gltf',\r\n    (gltfCar) => {\r\n        console.log(\"Loaded Model - RX7\", gltfCar)\r\n\r\n        gltfCar.scene.scale.set(1.0, 1.0, 1.0)\r\n        carGroup.add(gltfCar.scene)\r\n        particleSystem.initialize()\r\n\r\n        // Solo buttons\r\n        let intakeSoloBtn, exhaustSoloBtn, interiorSoloBtn\r\n        intakeSoloBtn = createLineButton({ screenAnchor: new THREE.Vector2(-0.5, -0.8), targetLocalPos: new THREE.Vector3(0, 0.2, 2.1), targetObject: gltfCar.scene, label: 'Intake', color: SoloBtnColors.INTAKE })\r\n        exhaustSoloBtn = createLineButton({ screenAnchor: new THREE.Vector2(0.5, -0.8), targetLocalPos: new THREE.Vector3(-0.5, 0.3, -2.0), targetObject: gltfCar.scene, label: 'Exhaust', color: SoloBtnColors.EXHAUST })\r\n        interiorSoloBtn = createLineButton({ screenAnchor: new THREE.Vector2(0.0, -0.8), targetLocalPos: new THREE.Vector3(0.0, 0.1, -0.2), targetObject: gltfCar.scene, label: 'Interior', color: SoloBtnColors.INTERIOR })\r\n\r\n            // Add lines to scene and store buttons for updates\r\n            ;[intakeSoloBtn, exhaustSoloBtn, interiorSoloBtn].forEach(btn => {\r\n                scene.add(btn.line)\r\n                lineButtons.push(btn)\r\n\r\n                // Solo button click event\r\n                btn.button.addEventListener('click', () => {\r\n                    // Clicked same button again: reset to no solo\r\n                    if (SoloState[btn.button.textContent.toUpperCase()] === soloState) {\r\n                        soloState = SoloState.MIX\r\n\r\n                        // Reset all button styles\r\n                        lineButtons.forEach(otherBtn => {\r\n                            if (otherBtn !== btn) {\r\n                                otherBtn.button.style.backgroundColor = colorToHex(SoloBtnColors[otherBtn.button.textContent.toUpperCase()])\r\n                                otherBtn.button.style.color = `#272727ff`\r\n                                otherBtn.line.visible = true\r\n                                otherBtn.button.dimmed = false\r\n                            }\r\n                        })\r\n\r\n                        // If emitter debuggers are visible, ensure emitterDebuggers are all visible\r\n                        if (dbgAudioSettings['Emitters']) {\r\n                            emitterDebuggers.forEach(helper => helper.visible = true)\r\n                        }\r\n\r\n                    } else {\r\n                        // New solo button selected\r\n                        soloState = SoloState[btn.button.textContent.toUpperCase()]\r\n\r\n                        // Darken background color of other buttons\r\n                        lineButtons.forEach(otherBtn => {\r\n                            if (otherBtn !== btn) {\r\n                                otherBtn.button.style.backgroundColor = `#444444`\r\n                                otherBtn.button.style.color = `#888888`\r\n                                otherBtn.line.visible = false\r\n                                otherBtn.button.dimmed = true\r\n\r\n                                // If emitter debuggers are visible, hide non-solo emitter debuggers\r\n                                if (dbgAudioSettings['Emitters']) {\r\n                                    const posKey = otherBtn.button.textContent.toLowerCase()\r\n                                    const helper = emitterDebuggers.get(posKey)\r\n                                    if (helper) helper.visible = false\r\n                                }\r\n                            } else {\r\n                                otherBtn.button.style.color = `#272727ff`\r\n                                otherBtn.line.visible = true\r\n                                otherBtn.button.dimmed = false\r\n\r\n                                // If emitter debuggers are visible, ensure this one is visible\r\n                                if (dbgAudioSettings['Emitters']) {\r\n                                    const posKey = otherBtn.button.textContent.toLowerCase()\r\n                                    const helper = emitterDebuggers.get(posKey)\r\n                                    if (helper) helper.visible = true\r\n                                }\r\n                            }\r\n                        })\r\n                    }\r\n                })\r\n            })\r\n\r\n        // Line button visibility\r\n        const buttonVisibility = { 'Solo Buttons': true }\r\n        dbgAudioMicPersp = dbgAudio.add(buttonVisibility, 'Solo Buttons').onChange(visible => {\r\n            intakeSoloBtn.setVisible(visible)\r\n            exhaustSoloBtn.setVisible(visible)\r\n            interiorSoloBtn.setVisible(visible)\r\n        })\r\n    }\r\n)\r\n\r\n// Wheels\r\ngltfLoader.load('./model/rx7_wheels/rx7_wheels.gltf',\r\n    (wheelRL) => {\r\n        console.log(\"Loaded Model - Wheel\", wheelRL)\r\n\r\n        // Rear left\r\n        wheelRL.scene.scale.set(1.0, 1.0, 1.0)\r\n        wheelRL.scene.position.set(0, 0, 0)\r\n        carGroup.add(wheelRL.scene)\r\n\r\n        // Front left\r\n        const wheelFL = wheelRL.scene.clone()\r\n        wheelFL.position.set(0, 0, 2.45)\r\n        carGroup.add(wheelFL)\r\n\r\n        // Front right\r\n        const wheelFR = wheelRL.scene.clone()\r\n        wheelFR.position.set(0, 0, 2.45)\r\n        wheelFR.scale.set(-1, 1, 1)\r\n        carGroup.add(wheelFR)\r\n\r\n        // Rear right\r\n        const wheelRR = wheelRL.scene.clone()\r\n        wheelRR.position.set(0, 0, 0)\r\n        wheelRR.scale.set(-1, 1, 1)\r\n        carGroup.add(wheelRR)\r\n\r\n        // Wheel anims\r\n        anims.mixerWheels = new THREE.AnimationMixer(new THREE.AnimationObjectGroup(wheelRL.scene, wheelFL, wheelFR, wheelRR))\r\n        anims.actWheelsRot = anims.mixerWheels.clipAction(wheelRL.animations[0]) // Wheel rotation\r\n        anims.actTiresRot = anims.mixerWheels.clipAction(wheelRL.animations[1]) // Tire rotation\r\n    }\r\n)\r\n\r\n// Headlights\r\ngltfLoader.load('./model/rx7_lights/rx7_lights.gltf',\r\n    (gltfLights) => {\r\n        console.log(\"Loaded Model - Headlights\", gltfLights)\r\n\r\n        gltfLights.scene.scale.set(1.0, 1.0, 1.0)\r\n        carGroup.add(gltfLights.scene)\r\n\r\n        // Animations\r\n        anims.mixerLights = new THREE.AnimationMixer(gltfLights.scene)\r\n        for (let i = 0; i < 5; i++) {\r\n            const key = `actLights${i}`\r\n            anims[key] = anims.mixerLights.clipAction(gltfLights.animations[i])\r\n            anims[key].setLoop(THREE.LoopOnce)\r\n            anims[key].clampWhenFinished = true\r\n        }\r\n\r\n        // Spotlights\r\n        const { left: headLightL, right: headLightR } = createHeadlightSpots({ intensity: anims.lightsIntensity })\r\n        anims.headLightL = headLightL\r\n        anims.headLightR = headLightR\r\n        carGroup.add(anims.headLightL)\r\n        carGroup.add(anims.headLightL.target)\r\n        carGroup.add(anims.headLightR)\r\n        carGroup.add(anims.headLightR.target)\r\n\r\n        // Dbg\r\n        dbgVehicle.add(anims, 'lights').name('Headlights')\r\n    }\r\n)\r\n\r\n\r\n/**\r\n * Lighting (uses defaults from constants)\r\n */\r\nconst hemiLight = new THREE.HemisphereLight(\r\n    LightingDefaults.hemisphere.skyColor,\r\n    LightingDefaults.hemisphere.groundColor,\r\n    LightingDefaults.hemisphere.intensity\r\n)\r\nhemiLight.position.set(0, 100, 0)\r\nscene.add(hemiLight)\r\n\r\nconst ambientLight = new THREE.AmbientLight(\r\n    LightingDefaults.ambient.color,\r\n    LightingDefaults.ambient.intensity\r\n)\r\nscene.add(ambientLight)\r\n\r\nconst directionalLights = createDirectionalLights([\r\n    { color: LightingDefaults.directional[0].color, intensity: LightingDefaults.directional[0].intensity, position: [5, 3, 4] },\r\n    { color: LightingDefaults.directional[1].color, intensity: LightingDefaults.directional[1].intensity, position: [8, 3, -1] },\r\n    { color: LightingDefaults.directional[2].color, intensity: LightingDefaults.directional[2].intensity, position: [-5, 5, -5] }\r\n])\r\ndirectionalLights.forEach(l => scene.add(l))\r\n\r\n// Baseline lighting snapshot (built after renderer init)\r\nlet baseLightingSnapshot = null\r\nfunction buildLightingSnapshot() {\r\n    baseLightingSnapshot = {\r\n        ambient: { color: ambientLight.color.getHex(), intensity: ambientLight.intensity },\r\n        hemi: { sky: hemiLight.color.getHex(), ground: hemiLight.groundColor.getHex(), intensity: hemiLight.intensity },\r\n        directional: directionalLights.map(dl => ({ color: dl.color.getHex(), intensity: dl.intensity })),\r\n        fog: scene.fog ? { color: scene.fog.color.getHex(), density: scene.fog.density } : null,\r\n        exposure: (typeof renderer !== 'undefined' && typeof renderer.toneMappingExposure === 'number') ? renderer.toneMappingExposure : 1.0\r\n    }\r\n}\r\nfunction resetLightingFromSnapshot() {\r\n    if (!baseLightingSnapshot) buildLightingSnapshot()\r\n    ambientLight.color.setHex(baseLightingSnapshot.ambient.color)\r\n    ambientLight.intensity = baseLightingSnapshot.ambient.intensity\r\n    hemiLight.color.setHex(baseLightingSnapshot.hemi.sky)\r\n    hemiLight.groundColor.setHex(baseLightingSnapshot.hemi.ground)\r\n    hemiLight.intensity = baseLightingSnapshot.hemi.intensity\r\n    directionalLights.forEach((dl,i) => {\r\n        dl.color.setHex(baseLightingSnapshot.directional[i].color)\r\n        dl.intensity = baseLightingSnapshot.directional[i].intensity\r\n    })\r\n    if (scene.fog && baseLightingSnapshot.fog) {\r\n        scene.fog.color.setHex(baseLightingSnapshot.fog.color)\r\n        scene.fog.density = baseLightingSnapshot.fog.density\r\n    }\r\n    if (baseLightingSnapshot && typeof renderer !== 'undefined' && typeof renderer.toneMappingExposure === 'number') {\r\n        renderer.toneMappingExposure = baseLightingSnapshot.exposure\r\n    }\r\n}\r\n\r\nfunction applyLightingOverride(override) {\r\n    if (!override) {\r\n        resetLightingFromSnapshot()\r\n        return\r\n    }\r\n    if (override.ambient) {\r\n        if (override.ambient.color !== undefined) ambientLight.color.setHex(override.ambient.color)\r\n        if (override.ambient.intensity !== undefined) ambientLight.intensity = override.ambient.intensity\r\n    }\r\n    if (override.hemisphere) {\r\n        if (override.hemisphere.skyColor !== undefined) hemiLight.color.setHex(override.hemisphere.skyColor)\r\n        if (override.hemisphere.groundColor !== undefined) hemiLight.groundColor.setHex(override.hemisphere.groundColor)\r\n        if (override.hemisphere.intensity !== undefined) hemiLight.intensity = override.hemisphere.intensity\r\n    }\r\n    if (override.directional && Array.isArray(override.directional)) {\r\n        directionalLights.forEach((dl, i) => {\r\n            const ov = override.directional[i]\r\n            if (!ov) return\r\n            if (ov.color !== undefined) dl.color.setHex(ov.color)\r\n            if (ov.intensity !== undefined) dl.intensity = ov.intensity\r\n        })\r\n    }\r\n}\r\n\r\n/**\r\n * Sizes\r\n */\r\nconst sizes = {\r\n    width: window.innerWidth,\r\n    height: window.innerHeight\r\n}\r\n\r\nwindow.addEventListener('resize', () => {\r\n    sizes.width = window.innerWidth\r\n    sizes.height = window.innerHeight\r\n\r\n    camera.aspect = sizes.width / sizes.height\r\n    camera.updateProjectionMatrix()\r\n\r\n    renderer.setSize(sizes.width, sizes.height)\r\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\r\n})\r\n\r\n/**\r\n * Camera\r\n */\r\n// Base camera\r\nconst camera = new THREE.PerspectiveCamera(75, sizes.width / sizes.height, 0.1, 100)\r\ncamera.position.set(4, 2, 3)\r\nscene.add(camera)\r\n\r\n// Controls\r\nconst controls = new OrbitControls(camera, canvas)\r\ncontrols.target.set(0, 0.75, 0)\r\ncontrols.enableDamping = true\r\n\r\n/**\r\n * Renderer\r\n */\r\nconst renderer = new THREE.WebGLRenderer({\r\n    canvas: canvas\r\n})\r\nrenderer.outputColorSpace = THREE.LinearSRGBColorSpace\r\nrenderer.shadowMap.enabled = true\r\nrenderer.shadowMap.type = THREE.PCFSoftShadowMap\r\nrenderer.setSize(sizes.width, sizes.height)\r\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\r\n\r\n// Build baseline lighting snapshot now that renderer exists\r\nbuildLightingSnapshot()\r\nresetLightingFromSnapshot()\r\n\r\n/**\r\n * Audio\r\n */\r\n// Listener\r\nconst listener = new THREE.AudioListener();\r\ncamera.add(listener);\r\n\r\n// Audio emitters for each position\r\nconst audioEmitters = {\r\n    mix: new THREE.PositionalAudio(listener),\r\n    intake: new THREE.PositionalAudio(listener),\r\n    exhaust: new THREE.PositionalAudio(listener),\r\n    interior: new THREE.PositionalAudio(listener)\r\n};\r\n\r\nconsole.log(\"Audio Emitters:\", audioEmitters);\r\n\r\n// Add emitters to car at appropriate positions & starting volume\r\nObject.entries(audioEmitters).forEach(([pos, emitter]) => {\r\n    carGroup.add(emitter);\r\n    switch (pos) {\r\n        case 'intake':\r\n            emitter.position.set(0, 0.2, 2.1); // Front of car\r\n            emitter.setVolume(0);\r\n            // Point intake sound forward (along +Z axis)\r\n            emitter.setDirectionalCone(\r\n                THREE.MathUtils.degToRad(ConeEmitterSettings.innerAngle), \r\n                THREE.MathUtils.degToRad(ConeEmitterSettings.outerAngle), \r\n                ConeEmitterSettings.outerGain\r\n            );\r\n            break;\r\n        case 'exhaust':\r\n            emitter.position.set(-0.5, 0.3, -2.0); // Rear of car\r\n            emitter.setVolume(0);\r\n            // Point exhaust sound backward (along -Z axis)\r\n            // Rotate the emitter 180 degrees around Y axis to point backward\r\n            emitter.rotation.y = Math.PI;\r\n            emitter.setDirectionalCone(\r\n                THREE.MathUtils.degToRad(ConeEmitterSettings.innerAngle), \r\n                THREE.MathUtils.degToRad(ConeEmitterSettings.outerAngle), \r\n                ConeEmitterSettings.outerGain\r\n            );\r\n            break;\r\n        case 'interior':\r\n            emitter.position.set(0.0, 0.5, -0.2); // Inside car\r\n            emitter.setVolume(0);\r\n            break;\r\n        case 'mix':\r\n            emitter.position.set(0, 0, 0); // Center for mix\r\n            emitter.setVolume(1.0);\r\n            break;\r\n        default:\r\n            emitter.position.set(0, 0, 0);\r\n            break;\r\n    }\r\n});\r\n\r\nconst soundEngine = {\r\n    // Buffer storage per position\r\n    buffers: {\r\n        mix: {},\r\n        intake: { ignitionOn: null, idle: null, ignitionOff: null },\r\n        exhaust: { ignitionOn: null, idle: null, ignitionOff: null },\r\n        interior: { ignitionOn: null, idle: null, ignitionOff: null }\r\n    },\r\n\r\n    // Track current active emitter for smooth transitions\r\n    currentEmitter: null,\r\n\r\n    setEmitterVolumes(currSoloState) {\r\n        // Get individual emitters (excluding mix)\r\n        const individualEmitters = ['intake', 'exhaust', 'interior'];\r\n\r\n        individualEmitters.forEach(pos => {\r\n            const emitter = audioEmitters[pos];\r\n            if (!emitter) return;\r\n\r\n            // Base target volume (before global multiplier)\r\n            const baseTarget = (currSoloState === SoloState.MIX)\r\n                ? EmitterVolMults.MIX\r\n                : (pos === currSoloState)\r\n                    ? 1.0\r\n                    : 0.0;\r\n\r\n            // Apply global multiplier\r\n            const multiplier = EmitterVolMults[pos.toUpperCase()] !== undefined ? EmitterVolMults[pos.toUpperCase()] : 1.0\r\n            const targetVolume = Math.max(0, Math.min(1, baseTarget * multiplier))\r\n\r\n            // Smooth volume transition\r\n            const currentVol = emitter.getVolume();\r\n            if (currentVol < targetVolume) {\r\n                emitter.setVolume(Math.min(targetVolume, currentVol + 0.2));\r\n            } else if (currentVol > targetVolume) {\r\n                emitter.setVolume(Math.max(targetVolume, currentVol - 0.2));\r\n            }\r\n        });\r\n\r\n        // Always keep mix emitter silent as we're creating our own mix\r\n        audioEmitters.mix.setVolume(0);\r\n    },\r\n\r\n    ignitionOn: () => {\r\n        // Start ignition for all positions\r\n        Object.entries(audioEmitters).forEach(([pos, emitter]) => {\r\n            if (pos === 'mix') return; // No ignition sound for mix\r\n\r\n            playPositionalAudio(audioLoader, emitter, `./audio/${pos}/ignitionOn.ogg`, {\r\n                store: soundEngine.buffers[pos],\r\n                storeKey: 'ignitionOn',\r\n                loop: false,\r\n                onEnded: () => {\r\n                    // After ignition sound ends, start engine idle loop for this position\r\n                    playPositionalAudio(audioLoader, emitter, `./audio/${pos}/idle.ogg`, {\r\n                        store: soundEngine.buffers[pos],\r\n                        storeKey: 'idle',\r\n                        loop: true,\r\n                        onEnded: () => { }\r\n                    });\r\n                }\r\n            });\r\n        });\r\n\r\n        driveState = DriveState.ACCEL;\r\n        anims.mixerWheels.stopAllAction();\r\n        anims.actWheelsRot.play();\r\n        anims.actTiresRot.play();\r\n        anims.mixerWheels.timeScale = 0.01;\r\n\r\n        dbgVehIgnOn.hide();\r\n        dbgVehIgnOff.show();\r\n    },\r\n\r\n    ignitionOff: () => {\r\n        // Play ignition off for all positions\r\n        Object.entries(audioEmitters).forEach(([pos, emitter]) => {\r\n            if (pos === 'mix') return; // No ignition sound for mix\r\n\r\n            playPositionalAudio(audioLoader, emitter, `./audio/${pos}/ignitionOff.ogg`, {\r\n                store: soundEngine.buffers[pos],\r\n                storeKey: 'ignitionOff',\r\n                loop: false,\r\n                onEnded: () => {\r\n                    emitter.stop();\r\n                }\r\n            });\r\n        });\r\n\r\n        driveState = DriveState.DECEL;\r\n\r\n        dbgVehIgnOn.show();\r\n        dbgVehIgnOff.hide();\r\n    },\r\n\r\n    load() {\r\n        // Cache buffers for all positions\r\n        const engine = this; // Store reference to soundEngine\r\n        Object.keys(engine.buffers).forEach(pos => {\r\n            Object.keys(engine.buffers[pos]).forEach(key => {\r\n                audioLoader.load(`./audio/${pos}/${key}.ogg`,\r\n                    (buffer) => { engine.buffers[pos][key] = buffer });\r\n\r\n                console.log(`Loaded Audio - ${pos}: ${key}`);\r\n            });\r\n        });\r\n    },\r\n\r\n    applyConvolutionReverb(reverbBuffer) {\r\n        // Uses latest selected reverb name stored on soundEngine\r\n        const blend = this.currentReverbBlend ?? 0.5\r\n        Object.values(audioEmitters).forEach(emitter => {\r\n            // Remove existing filter graph if present\r\n            if (emitter._reverbNodes) {\r\n                // Disconnect old nodes\r\n                try {\r\n                    const { dryGain, wetGain, convolver } = emitter._reverbNodes\r\n                    dryGain.disconnect()\r\n                    wetGain.disconnect()\r\n                    convolver.disconnect()\r\n                } catch(_) {}\r\n                emitter._reverbNodes = null\r\n            }\r\n\r\n            const ctx = listener.context\r\n            const convolver = ctx.createConvolver()\r\n            convolver.buffer = reverbBuffer\r\n\r\n            // Gain nodes for wet/dry mix; apply normalization to wet path only\r\n            const wetGain = ctx.createGain()\r\n            const dryGain = ctx.createGain()\r\n            wetGain.gain.value = blend * this.currentReverbScalingFactor\r\n            dryGain.gain.value = (1.0 - blend) * this.currentReverbScalingFactor\r\n\r\n            // PositionalAudio has .panner as its output prior to filters\r\n            const sourceNode = emitter.panner\r\n            if (!sourceNode) {\r\n                console.warn('PositionalAudio panner node missing; cannot apply reverb graph')\r\n                return\r\n            }\r\n\r\n            // Connect graph: source -> dryGain -> destination; source -> convolver -> wetGain -> destination\r\n            sourceNode.connect(dryGain)\r\n            dryGain.connect(ctx.destination)\r\n            sourceNode.connect(convolver)\r\n            convolver.connect(wetGain)\r\n            wetGain.connect(ctx.destination)\r\n\r\n            emitter._reverbNodes = { convolver, wetGain, dryGain }\r\n        })\r\n    },\r\n\r\n    removeConvolutionReverb() {\r\n        // Remove custom filter graph (disconnect reverb nodes)\r\n        Object.values(audioEmitters).forEach(em => {\r\n            if (em._reverbNodes) {\r\n                try {\r\n                    const { dryGain, wetGain, convolver } = em._reverbNodes\r\n                    dryGain.disconnect(); wetGain.disconnect(); convolver.disconnect();\r\n                } catch(_) {}\r\n                em._reverbNodes = null\r\n            }\r\n        })\r\n        this.currentReverbBlend = null\r\n        this.currentReverbScalingFactor = null\r\n    }\r\n}\r\nsoundEngine.load()\r\n\r\n// Convolution reverb presets with blend (0..1 wet mix) and scaling factor (to better match levels between presets)\r\nconst reverbMap = {\r\n    'Garage': { path: './audio/ir/garage.ogg', blend: 0.8, scalingFactor: 0.33 },\r\n    'Outdoors': { path: './audio/ir/outdoors.ogg', blend: 0.6, scalingFactor: 0.2 }\r\n}\r\nconst reverbParams = { Reverb: 'None' }\r\ndbgAudioReverb = dbgAudio.add(reverbParams, 'Reverb', ['None', ...Object.keys(reverbMap)]).name('Conv. Reverb').onChange(name => {\r\n    if (name === 'None') {\r\n        soundEngine.removeConvolutionReverb()\r\n        return\r\n    }\r\n    const preset = reverbMap[name]\r\n    if (!preset) return\r\n    const { path, blend = 0.5, scalingFactor = 1.0 } = preset\r\n    soundEngine.currentReverbBlend = blend\r\n    soundEngine.currentReverbScalingFactor = scalingFactor\r\n    const reverbLoader = new THREE.AudioLoader()\r\n    reverbLoader.load(path, (buffer) => {\r\n        soundEngine.applyConvolutionReverb(buffer)\r\n    })\r\n})\r\n\r\n// Add meters\r\nconst audioMeters = createMixer({ emitters: audioEmitters, initialVisible: true })\r\ndbgAudioMeters = dbgAudio.add(dbgAudioSettings, 'Meters').onChange(v => audioMeters.setVisible(v))\r\n\r\n// Create emitter position debuggers (initially hidden)\r\nconst emitterDebuggers = new Map()\r\nObject.entries(audioEmitters).forEach(([pos, emitter]) => {\r\n    if (pos === 'mix') return;\r\n    \r\n    // Configure helper based on emitter type\r\n    const helperConfig = {\r\n        color: SoloBtnColors[pos.toUpperCase()] || 0xffff00,\r\n        size: 0.4\r\n    }\r\n    \r\n    // Add cone visualization for directional emitters\r\n    if (pos === 'intake') {\r\n        helperConfig.showCone = true\r\n        helperConfig.coneAngle = ConeEmitterSettings.innerAngle\r\n        helperConfig.coneDirection = new THREE.Vector3(0, 0, 1) // Forward\r\n    } else if (pos === 'exhaust') {\r\n        helperConfig.showCone = true\r\n        helperConfig.coneAngle = ConeEmitterSettings.innerAngle\r\n        helperConfig.coneDirection = new THREE.Vector3(0, 0, -1) // Backward\r\n    }\r\n    \r\n    const helper = createAudioEmitterDebugger(emitter, helperConfig)\r\n    helper.visible = false\r\n    carGroup.add(helper)\r\n    emitterDebuggers.set(pos, helper)\r\n})\r\n\r\n// Add debug toggle for emitter position helpers\r\ndbgAudioEmitters = dbgAudio.add(dbgAudioSettings, 'Emitters').onChange(v => {\r\n    emitterDebuggers.forEach(helper => helper.visible = v)\r\n})\r\n\r\n/**\r\n * Debug\r\n */\r\nconst fakeListOfCars = ['Mazda RX-7 FD']\r\ndbgVehCarSelect = dbgVehicle.add({ car: fakeListOfCars[0] }, 'car', fakeListOfCars).name('Car').onChange(v => {})\r\ndbgVehIgnOn = dbgVehicle.add(soundEngine, 'ignitionOn').name('Ignition On')\r\ndbgVehIgnOff = dbgVehicle.add(soundEngine, 'ignitionOff').name('Ignition Off').hide()\r\n\r\n/**\r\n * Main\r\n */\r\nconst clock = new THREE.Clock()\r\nlet previousTime = 0\r\n\r\nconst tick = () => {\r\n    const elapsedTime = clock.getElapsedTime()\r\n    const deltaTime = elapsedTime - previousTime\r\n    previousTime = elapsedTime\r\n\r\n    if (anims.mixerWheels) {\r\n        anims.mixerWheels.update(deltaTime)\r\n\r\n        switch (driveState) {\r\n            case DriveState.ACCEL:\r\n                while (anims.mixerWheels.timeScale < 1.0) {\r\n                    anims.mixerWheels.timeScale += deltaTime // Gradually increase timeScale to 1.0\r\n                    if (anims.mixerWheels.timeScale >= 1.0) {\r\n                        anims.mixerWheels.timeScale = 1.0\r\n                        driveState = DriveState.DRIVE\r\n                    }\r\n                }\r\n                break\r\n            case DriveState.DECEL:\r\n                while (anims.mixerWheels.timeScale > 0.0) {\r\n                    anims.mixerWheels.timeScale -= deltaTime // Gradually decrease timeScale to 0.0\r\n                    if (anims.mixerWheels.timeScale <= 0.0) {\r\n                        anims.mixerWheels.timeScale = 0.0\r\n                        driveState = DriveState.STOP\r\n                        anims.mixerWheels.stopAllAction()\r\n                    }\r\n                }\r\n                break\r\n            case DriveState.DRIVE:\r\n                // Maintain static RPM sounds\r\n                break\r\n            case DriveState.STOP:\r\n                // Play idle sounds\r\n                break\r\n            default:\r\n                // Do nothing, maintain current timeScale\r\n                break\r\n        }\r\n    }\r\n\r\n    if (anims.mixerLights) {\r\n        anims.mixerLights.update(deltaTime)\r\n\r\n        // Set light intensity to headlight time animation progress\r\n        const headLightsIntensity = anims.lightsIntensity - (anims.actLights0.time / anims.actLights0.getClip().duration) * anims.lightsIntensity\r\n        anims.headLightL.intensity = anims.headLightR.intensity = headLightsIntensity\r\n    }\r\n\r\n    // Demo of car moving back and forth slightly\r\n    // #TODO: Hunker car backwards/forwards under acceleration/deceleration\r\n    carGroup.position.z = Math.sin(elapsedTime * 2) * 0.0125\r\n\r\n    // Update particle system\r\n    particleSystem.update(deltaTime, driveState)\r\n\r\n    // Update controls\r\n    controls.update()\r\n\r\n    // Update line buttons so they stay anchored to screen and car\r\n    if (lineButtons.length > 0) {\r\n        lineButtons.forEach(btn => {\r\n            try {\r\n                btn.update(camera)\r\n            } catch (e) {\r\n                // Defensive: ignore update errors for now\r\n            }\r\n        })\r\n    }\r\n\r\n    // Update audio emitter volumes for smooth transitions\r\n    soundEngine.setEmitterVolumes(soloState)\r\n\r\n    audioMeters.update()\r\n\r\n    // Render\r\n    renderer.render(scene, camera)\r\n\r\n    // Call tick again on the next frame\r\n    window.requestAnimationFrame(tick)\r\n}\r\n\r\ntick()"],"names":["DriveState","SoloState","SoloBtnColors","EmitterVolMults","ConeEmitterSettings","LightingDefaults","createDirectionalLight","color","intensity","mapSize","far","bounds","position","light","THREE.DirectionalLight","createDirectionalLights","configs","cfg","colorToHex","c","n","createAudioEmitterDebugger","emitter","size","showCone","coneAngle","coneDirection","THREE.Vector3","helper","THREE.Group","coneHeight","coneAngleRad","THREE.MathUtils","coneRadius","geometry","THREE.ConeGeometry","material","THREE.MeshBasicMaterial","THREE.DoubleSide","cone","THREE.Mesh","defaultDir","quaternion","THREE.Quaternion","tipGeometry","THREE.SphereGeometry","tipMaterial","tip","sphere","createHeadlightSpots","distance","angle","penumbra","decay","leftPosition","rightPosition","targetPosition","left","THREE.SpotLight","right","playPositionalAudio","audioLoader","path","store","storeKey","loop","refDistance","volume","offset","onEnded","playBuffer","buffer","createLineButton","screenAnchor","THREE.Vector2","targetLocalPos","targetObject","label","points","lineGeom","THREE.BufferGeometry","lineMat","THREE.LineBasicMaterial","line","THREE.Line","domButton","raycaster","THREE.Raycaster","isVisible","update","camera","ndc","dir","startPoint","targetWorld","rayDir","endPoint","hits","posAttr","proj","canvas","rect","x","y","setVisible","visible","smokeParticles","smokeGeometry","smokePositions","smokeColors","smokeSizes","THREE.BufferAttribute","smokeMaterial","THREE.PointsMaterial","THREE.AdditiveBlending","smokePoints","THREE.Points","particleSystem","exhaustEmitter","deltaTime","engineState","add","radius_1","theta","x_1","z_1","radius_2","x_2","z_2","direction","speed","brightness","i","p","idx","colorIdx","createMixer","emitters","initialVisible","panel","analysers","ensurePanel","buildRow","pos","row","barContainer","barInner","soloColorKey","ensureAnalyser","analyser","THREE.AudioAnalyser","getEmitterVolume","soloScaling","v","THREE.ColorManagement","driveState","soloState","scene","THREE.Scene","THREE.Color","THREE.FogExp2","dbg","dat.GUI","dbgAudioSettings","dbgAudio","dbgAudioReverb","dbgVehicle","dbgVehIgnOn","dbgVehIgnOff","gltfLoader","GLTFLoader","THREE.AudioLoader","rgbeLoader","RGBELoader","HDRCubeTextureLoader","floor","THREE.PlaneGeometry","THREE.MeshStandardMaterial","hdris","originalBackground","currentHDRTexture","hdrOptions","hdrParams","name","applyLightingOverride","renderer","baseLightingSnapshot","obj","m","ambientLight","directionalLights","dl","hemiLight","soundEngine","reverbParams","preset","reverbPreset","texture","THREE.EquirectangularReflectionMapping","reverbMapEntry","reverbMap","reverbPath","blend","scalingFactor","carGroup","lineButtons","anims","key","gltfCar","intakeSoloBtn","exhaustSoloBtn","interiorSoloBtn","btn","otherBtn","emitterDebuggers","posKey","buttonVisibility","wheelRL","wheelFL","wheelFR","wheelRR","THREE.AnimationMixer","THREE.AnimationObjectGroup","gltfLights","THREE.LoopOnce","headLightL","headLightR","THREE.HemisphereLight","THREE.AmbientLight","l","buildLightingSnapshot","resetLightingFromSnapshot","override","ov","sizes","THREE.PerspectiveCamera","controls","OrbitControls","THREE.WebGLRenderer","THREE.LinearSRGBColorSpace","THREE.PCFSoftShadowMap","listener","THREE.AudioListener","audioEmitters","THREE.PositionalAudio","currSoloState","baseTarget","multiplier","targetVolume","currentVol","engine","reverbBuffer","dryGain","wetGain","convolver","ctx","sourceNode","em","audioMeters","helperConfig","fakeListOfCars","clock","THREE.Clock","previousTime","tick","elapsedTime","headLightsIntensity"],"mappings":"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"}