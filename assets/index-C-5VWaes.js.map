{"version":3,"file":"index-C-5VWaes.js","sources":["../../src/systems/constants.js","../../src/systems/helpers.js","../../src/systems/exhaust.js","../../src/systems/meters.js","../../src/systems/stats.js","../../src/script.js"],"sourcesContent":["// Centralized constants for the project\r\nexport const DriveState = {\r\n    STOP: 'stop',\r\n    DRIVE: 'drive',\r\n    ACCEL: 'accel',\r\n    DECEL: 'decel'\r\n}\r\n\r\nexport const SoloState = {\r\n    MIX: 'mix',\r\n    INTAKE: 'intake',\r\n    EXHAUST: 'exhaust',\r\n    INTERIOR: 'interior'\r\n}\r\n\r\nexport const SoloBtnColors = {\r\n    MIX: 0xa056aa,\r\n    INTAKE: 0x4e9eff,\r\n    EXHAUST: 0x9cff7f,\r\n    INTERIOR: 0xffe894\r\n}\r\n\r\n// Global per-emitter volume multipliers (useful for balancing perspectives)\r\nexport const EmitterVolMults = {\r\n    MIX: 0.8,       // Applied to each individually during mix solo state\r\n    INTAKE: 0.5,\r\n    EXHAUST: 0.8,\r\n    INTERIOR: 0.3\r\n}\r\n\r\nexport const ConeEmitterSettings = {\r\n    innerAngle: 45.0, // degrees\r\n    outerAngle: 120.0, // degrees\r\n    outerGain: 0.3    // volume multiplier outside outer cone\r\n}\r\n\r\n// Default lighting colors/intensities; central place to tweak base scene look\r\nexport const LightingDefaults = {\r\n    ambient: { color: 0xffffff, intensity: 0.5 },\r\n    hemisphere: { skyColor: 0xffffff, groundColor: 0x8d8d8d, intensity: 0.4 },\r\n    directional: [\r\n        { color: 0xfeffed, intensity: 1.0 },\r\n        { color: 0xfff7f2, intensity: 1.0 },\r\n        { color: 0xf8feff, intensity: 0.2 }\r\n    ]\r\n}\r\n\r\n// HDRI environment presets with associated reverb and lighting overrides\r\nexport const EnvironmentPresets = {\r\n    'Garage': {\r\n        path: './hdri/garage.hdr',\r\n        reverb: 'Garage',\r\n        lighting: {\r\n            ambient: { color: 0xf0f0f0, intensity: 0.2 },\r\n            hemisphere: { skyColor: 0xc0c0c0, groundColor: 0x3a3a3a, intensity: 0.15 },\r\n            directional: [\r\n                { color: 0xbcd4ff, intensity: 1.5 },\r\n                { color: 0xffddaa, intensity: 0.5 },\r\n                { color: 0x888888, intensity: 0.1 }\r\n            ]\r\n        }\r\n    },\r\n    'Track': {\r\n        path: './hdri/track.hdr',\r\n        reverb: 'Outdoors',\r\n        lighting: {\r\n            ambient: { color: 0xfff693, intensity: 0.25 },\r\n            hemisphere: { skyColor: 0xcce6ff, groundColor: 0x5a5a5a, intensity: 0.15 },\r\n            directional: [\r\n                { color: 0xffffff, intensity: 0.1 },\r\n                { color: 0xfff2d1, intensity: 0.1 },\r\n                { color: 0xaaccff, intensity: 0.0 }\r\n            ]\r\n        }\r\n    }\r\n}\r\n\r\nexport default {\r\n    DriveState,\r\n    SoloState,\r\n    SoloBtnColors,\r\n    EmitterVolMults,\r\n    ConeEmitterSettings,\r\n    LightingDefaults,\r\n    EnvironmentPresets\r\n}\r\n","import * as THREE from 'three'\r\nimport { ConeEmitterSettings } from './constants.js'\r\n// Note: colorToHex is defined below; forward usage inside file is fine.\r\n\r\n/**\r\n * Check if WebGL is available and supported\r\n * @returns {Object} { available: boolean, error: string|null }\r\n */\r\nexport function checkWebGLSupport() {\r\n    try {\r\n        const canvas = document.createElement('canvas')\r\n        const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl')\r\n        \r\n        if (!gl) {\r\n            return { \r\n                available: false, \r\n                error: 'WebGL is not supported by your browser or graphics driver.' \r\n            }\r\n        }\r\n\r\n        // Check for required extensions\r\n        const requiredExtensions = ['OES_element_index_uint']\r\n        for (const ext of requiredExtensions) {\r\n            if (!gl.getExtension(ext)) {\r\n                return { \r\n                    available: false, \r\n                    error: `WebGL extension ${ext} is not supported.` \r\n                }\r\n            }\r\n        }\r\n\r\n        return { available: true, error: null }\r\n    } catch (err) {\r\n        return { \r\n            available: false, \r\n            error: `WebGL check failed: ${err.message}` \r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Check if Web Audio API is available\r\n * @returns {Object} { available: boolean, error: string|null }\r\n */\r\nexport function checkWebAudioSupport() {\r\n    try {\r\n        const AudioContext = window.AudioContext || window.webkitAudioContext\r\n        if (!AudioContext) {\r\n            return { \r\n                available: false, \r\n                error: 'Web Audio API is not supported by your browser.' \r\n            }\r\n        }\r\n        return { available: true, error: null }\r\n    } catch (err) {\r\n        return { \r\n            available: false, \r\n            error: `Web Audio API check failed: ${err.message}` \r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Create and display an error overlay with a message\r\n * @param {string} title - Error title\r\n * @param {string} message - Error message\r\n * @param {boolean} blocking - Whether this error prevents the app from running\r\n */\r\nexport function showErrorUI(title, message, blocking = true) {\r\n    // Remove existing error overlay if any\r\n    const existing = document.getElementById('error-overlay')\r\n    if (existing) {\r\n        existing.remove()\r\n    }\r\n\r\n    const overlay = document.createElement('div')\r\n    overlay.id = 'error-overlay'\r\n    Object.assign(overlay.style, {\r\n        position: 'fixed',\r\n        top: '0',\r\n        left: '0',\r\n        width: '100%',\r\n        height: '100%',\r\n        backgroundColor: blocking ? 'rgba(0, 0, 0, 0.95)' : 'rgba(0, 0, 0, 0.7)',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        zIndex: '99999',\r\n        fontFamily: 'system-ui, -apple-system, sans-serif',\r\n        color: '#fff',\r\n        padding: '20px',\r\n        boxSizing: 'border-box'\r\n    })\r\n\r\n    const container = document.createElement('div')\r\n    Object.assign(container.style, {\r\n        maxWidth: '500px',\r\n        backgroundColor: '#1a1a1a',\r\n        borderRadius: '12px',\r\n        padding: '32px',\r\n        boxShadow: '0 8px 32px rgba(0, 0, 0, 0.5)',\r\n        border: '1px solid #333'\r\n    })\r\n\r\n    const titleEl = document.createElement('h2')\r\n    titleEl.textContent = title\r\n    Object.assign(titleEl.style, {\r\n        margin: '0 0 16px 0',\r\n        fontSize: '24px',\r\n        fontWeight: '600',\r\n        color: '#ff6b6b'\r\n    })\r\n\r\n    const messageEl = document.createElement('p')\r\n    messageEl.textContent = message\r\n    Object.assign(messageEl.style, {\r\n        margin: '0 0 24px 0',\r\n        fontSize: '16px',\r\n        lineHeight: '1.6',\r\n        color: '#ccc'\r\n    })\r\n\r\n    container.appendChild(titleEl)\r\n    container.appendChild(messageEl)\r\n\r\n    if (!blocking) {\r\n        const closeBtn = document.createElement('button')\r\n        closeBtn.textContent = 'Dismiss'\r\n        Object.assign(closeBtn.style, {\r\n            backgroundColor: '#444',\r\n            color: '#fff',\r\n            border: 'none',\r\n            borderRadius: '6px',\r\n            padding: '12px 24px',\r\n            fontSize: '14px',\r\n            cursor: 'pointer',\r\n            fontWeight: '500'\r\n        })\r\n        closeBtn.addEventListener('click', () => overlay.remove())\r\n        closeBtn.addEventListener('mouseenter', () => closeBtn.style.backgroundColor = '#555')\r\n        closeBtn.addEventListener('mouseleave', () => closeBtn.style.backgroundColor = '#444')\r\n        container.appendChild(closeBtn)\r\n    }\r\n\r\n    overlay.appendChild(container)\r\n    document.body.appendChild(overlay)\r\n}\r\n\r\n/**\r\n * Show a loading overlay with progress\r\n * @param {string} message - Loading message\r\n * @returns {Object} { update: (message) => void, remove: () => void }\r\n */\r\nexport function showLoadingUI(message = 'Loading...') {\r\n    // Remove existing loading overlay if any\r\n    const existing = document.getElementById('loading-overlay')\r\n    if (existing) {\r\n        existing.remove()\r\n    }\r\n\r\n    const overlay = document.createElement('div')\r\n    overlay.id = 'loading-overlay'\r\n    Object.assign(overlay.style, {\r\n        position: 'fixed',\r\n        top: '0',\r\n        left: '0',\r\n        width: '100%',\r\n        height: '100%',\r\n        backgroundColor: 'rgba(0, 0, 0, 0.9)',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        zIndex: '99998',\r\n        fontFamily: 'system-ui, -apple-system, sans-serif',\r\n        color: '#fff'\r\n    })\r\n\r\n    const container = document.createElement('div')\r\n    Object.assign(container.style, {\r\n        textAlign: 'center'\r\n    })\r\n\r\n    const spinner = document.createElement('div')\r\n    Object.assign(spinner.style, {\r\n        width: '50px',\r\n        height: '50px',\r\n        margin: '0 auto 20px',\r\n        border: '4px solid #333',\r\n        borderTop: '4px solid #fff',\r\n        borderRadius: '50%',\r\n        animation: 'spin 1s linear infinite'\r\n    })\r\n\r\n    const messageEl = document.createElement('div')\r\n    messageEl.textContent = message\r\n    Object.assign(messageEl.style, {\r\n        fontSize: '16px',\r\n        color: '#ccc'\r\n    })\r\n\r\n    // Add keyframe animation for spinner\r\n    if (!document.getElementById('spinner-style')) {\r\n        const style = document.createElement('style')\r\n        style.id = 'spinner-style'\r\n        style.textContent = `\r\n            @keyframes spin {\r\n                0% { transform: rotate(0deg); }\r\n                100% { transform: rotate(360deg); }\r\n            }\r\n        `\r\n        document.head.appendChild(style)\r\n    }\r\n\r\n    container.appendChild(spinner)\r\n    container.appendChild(messageEl)\r\n    overlay.appendChild(container)\r\n    document.body.appendChild(overlay)\r\n\r\n    return {\r\n        update: (newMessage) => {\r\n            messageEl.textContent = newMessage\r\n        },\r\n        remove: () => {\r\n            overlay.remove()\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Ensure audio context is resumed (handles autoplay policy)\r\n * @param {AudioContext} audioContext - The audio context to resume\r\n * @returns {Promise<boolean>} Resolves to true if resumed successfully\r\n */\r\nexport async function resumeAudioContext(audioContext) {\r\n    if (!audioContext) return false\r\n\r\n    if (audioContext.state === 'suspended') {\r\n        try {\r\n            await audioContext.resume()\r\n            return true\r\n        } catch (err) {\r\n            console.error('Failed to resume audio context:', err)\r\n            return false\r\n        }\r\n    }\r\n    \r\n    return audioContext.state === 'running'\r\n}\r\n\r\n/**\r\n * Load a GLTF model with error handling\r\n * @param {GLTFLoader} loader - The GLTF loader instance\r\n * @param {string} path - Path to the model\r\n * @param {Function} onProgress - Optional progress callback\r\n * @returns {Promise<Object>} Resolves with loaded GLTF object\r\n */\r\nexport function loadGLTFModel(loader, path, onProgress = null) {\r\n    return new Promise((resolve, reject) => {\r\n        loader.load(\r\n            path,\r\n            (gltf) => {\r\n                console.log(`✓ Loaded model: ${path}`)\r\n                resolve(gltf)\r\n            },\r\n            onProgress,\r\n            (error) => {\r\n                console.error(`✗ Failed to load model: ${path}`, error)\r\n                reject(new Error(`Failed to load model ${path}: ${error.message}`))\r\n            }\r\n        )\r\n    })\r\n}\r\n\r\n/**\r\n * Load an audio file with error handling\r\n * @param {AudioLoader} loader - The audio loader instance\r\n * @param {string} path - Path to the audio file\r\n * @returns {Promise<AudioBuffer>} Resolves with loaded audio buffer\r\n */\r\nexport function loadAudioFile(loader, path) {\r\n    return new Promise((resolve, reject) => {\r\n        loader.load(\r\n            path,\r\n            (buffer) => {\r\n                console.log(`✓ Loaded audio: ${path}`)\r\n                resolve(buffer)\r\n            },\r\n            null,\r\n            (error) => {\r\n                console.error(`✗ Failed to load audio: ${path}`, error)\r\n                reject(new Error(`Failed to load audio ${path}: ${error.message}`))\r\n            }\r\n        )\r\n    })\r\n}\r\n\r\n/**\r\n * Load an HDRI texture with error handling\r\n * @param {RGBELoader} loader - The RGBE loader instance\r\n * @param {string} path - Path to the HDR file\r\n * @returns {Promise<Texture>} Resolves with loaded texture\r\n */\r\nexport function loadHDRTexture(loader, path) {\r\n    return new Promise((resolve, reject) => {\r\n        loader.load(\r\n            path,\r\n            (texture) => {\r\n                console.log(`✓ Loaded HDR: ${path}`)\r\n                resolve(texture)\r\n            },\r\n            null,\r\n            (error) => {\r\n                console.error(`✗ Failed to load HDR: ${path}`, error)\r\n                reject(new Error(`Failed to load HDR ${path}: ${error.message}`))\r\n            }\r\n        )\r\n    })\r\n}\r\n\r\n/**\r\n * Recursively dispose of Three.js object and all its children\r\n * Cleans up geometries, materials, textures, and render targets\r\n * @param {THREE.Object3D} object - Object to dispose\r\n */\r\nexport function disposeObject(object) {\r\n    if (!object) return\r\n\r\n    // Traverse all children first\r\n    if (object.children) {\r\n        for (let i = object.children.length - 1; i >= 0; i--) {\r\n            disposeObject(object.children[i])\r\n        }\r\n    }\r\n\r\n    // Dispose geometry\r\n    if (object.geometry) {\r\n        object.geometry.dispose()\r\n    }\r\n\r\n    // Dispose material(s)\r\n    if (object.material) {\r\n        if (Array.isArray(object.material)) {\r\n            object.material.forEach(material => disposeMaterial(material))\r\n        } else {\r\n            disposeMaterial(object.material)\r\n        }\r\n    }\r\n\r\n    // Dispose render target\r\n    if (object.renderTarget) {\r\n        object.renderTarget.dispose()\r\n    }\r\n\r\n    // Remove from parent\r\n    if (object.parent) {\r\n        object.parent.remove(object)\r\n    }\r\n}\r\n\r\n/**\r\n * Dispose of a material and its textures\r\n * @param {THREE.Material} material - Material to dispose\r\n */\r\nfunction disposeMaterial(material) {\r\n    if (!material) return\r\n\r\n    // Dispose all texture properties\r\n    Object.keys(material).forEach(prop => {\r\n        const value = material[prop]\r\n        if (value && typeof value === 'object' && 'minFilter' in value) {\r\n            // It's a texture\r\n            value.dispose()\r\n        }\r\n    })\r\n\r\n    material.dispose()\r\n}\r\n\r\n/**\r\n * Dispose of an HDR texture with error handling\r\n * @param {THREE.Texture} texture - Texture to dispose\r\n */\r\nexport function disposeTexture(texture) {\r\n    if (!texture) return\r\n    \r\n    try {\r\n        texture.dispose()\r\n    } catch (err) {\r\n        console.error('Failed to dispose texture:', err)\r\n    }\r\n}\r\n\r\n/**\r\n * Stop and disconnect a positional audio emitter, cleaning up its resources\r\n * @param {THREE.PositionalAudio} emitter - Audio emitter to clean up\r\n */\r\nexport function disposeAudioEmitter(emitter) {\r\n    if (!emitter) return\r\n\r\n    try {\r\n        // Stop playback\r\n        if (emitter.isPlaying) {\r\n            emitter.stop()\r\n        }\r\n\r\n        // Disconnect custom reverb nodes if present\r\n        if (emitter._reverbNodes) {\r\n            const { dryGain, wetGain, convolver } = emitter._reverbNodes\r\n            try {\r\n                dryGain.disconnect()\r\n                wetGain.disconnect()\r\n                convolver.disconnect()\r\n            } catch (err) {\r\n                console.warn('Error disconnecting reverb nodes:', err)\r\n            }\r\n            emitter._reverbNodes = null\r\n        }\r\n\r\n        // Disconnect the emitter itself\r\n        emitter.disconnect()\r\n\r\n        // Clear buffer reference\r\n        emitter.buffer = null\r\n    } catch (err) {\r\n        console.error('Failed to dispose audio emitter:', err)\r\n    }\r\n}\r\n\r\n/**\r\n * Clean up an audio analyser\r\n * @param {THREE.AudioAnalyser} analyser - Analyser to clean up\r\n */\r\nexport function disposeAudioAnalyser(analyser) {\r\n    if (!analyser) return\r\n\r\n    try {\r\n        if (analyser.analyser) {\r\n            analyser.analyser.disconnect()\r\n        }\r\n    } catch (err) {\r\n        console.warn('Error disposing audio analyser:', err)\r\n    }\r\n}\r\n\r\n/**\r\n * Create a configured directional light\r\n * @param {Object} opts - options\r\n * @param {Number} opts.color - hex color\r\n * @param {Number} opts.intensity - light intensity\r\n * @param {Number} opts.mapSize - shadow map size (number)\r\n * @param {Number} opts.far - shadow camera far\r\n * @param {Object} opts.bounds - {left, right, top, bottom}\r\n * @param {Array} opts.position - [x,y,z]\r\n * @returns {THREE.DirectionalLight}\r\n */\r\nexport function createDirectionalLight({ color = 0xffffff, intensity = 1.0, mapSize = 1024, far = 15, bounds = { left: -7, right: 7, top: 7, bottom: -7 }, position = [5, 3, 4] } = {}) {\r\n    const light = new THREE.DirectionalLight(color, intensity)\r\n    light.castShadow = true\r\n    light.shadow.mapSize.set(mapSize, mapSize)\r\n    light.shadow.camera.far = far\r\n    light.shadow.camera.left = bounds.left\r\n    light.shadow.camera.right = bounds.right\r\n    light.shadow.camera.top = bounds.top\r\n    light.shadow.camera.bottom = bounds.bottom\r\n    light.position.set(...position)\r\n    return light\r\n}\r\n\r\n/**\r\n * Convenience to create multiple directional lights from an array of configs\r\n * @param {Array} configs - array of config objects passed to createDirectionalLight\r\n * @returns {Array} lights\r\n */\r\nexport function createDirectionalLights(configs = []) {\r\n    return configs.map(cfg => createDirectionalLight(cfg))\r\n}\r\n\r\n/**\r\n * Convert a numeric color (e.g. 0xff00aa) to a #RRGGBB string.\r\n * Safely handles already-string inputs (returns them unchanged if they look like a hex color).\r\n * @param {number|string} c\r\n * @returns {string} #RRGGBB\r\n */\r\nexport function colorToHex(c) {\r\n    if (typeof c === 'string') {\r\n        if (c.startsWith('#') && (c.length === 7 || c.length === 9)) return c.slice(0,7)\r\n        // Attempt to parse numeric from string\r\n        try {\r\n            const n = Number(c)\r\n            if (!Number.isNaN(n)) return `#${(n >>> 0).toString(16).padStart(6, '0')}`\r\n        } catch (_) { /* ignore */ }\r\n        return c // fallback\r\n    }\r\n    return `#${(c >>> 0).toString(16).padStart(6, '0')}`\r\n}\r\n\r\n/**\r\n * Create a visual helper for an audio emitter showing its position and details\r\n * @param {THREE.PositionalAudio} emitter - The audio emitter to debug\r\n * @param {Object} opts - options\r\n * @param {number} opts.size - Size of the helper\r\n * @param {number} opts.color - Color of the helper\r\n * @param {boolean} opts.showCone - If true, show a cone instead of sphere (for directional audio)\r\n * @param {number} opts.coneAngle - Cone angle in degrees (if showCone is true, defaults to ConeEmitterSettings.innerAngle)\r\n * @param {THREE.Vector3} opts.coneDirection - Direction the cone points (if showCone is true)\r\n * @returns {THREE.Group} The helper object\r\n */\r\nexport function createAudioEmitterDebugger(emitter, { size = 0.2, color = 0xffff00, showCone = false, coneAngle = ConeEmitterSettings.innerAngle, coneDirection = new THREE.Vector3(0, 0, 1) } = {}) {\r\n    const helper = new THREE.Group()\r\n    \r\n    if (showCone) {\r\n        // Create a cone geometry to visualize directional audio\r\n        const coneHeight = size * 3\r\n        const coneAngleRad = THREE.MathUtils.degToRad(coneAngle)\r\n        const coneRadius = Math.tan(coneAngleRad) * coneHeight\r\n        const geometry = new THREE.ConeGeometry(coneRadius, coneHeight, 16, 1, true)\r\n        const material = new THREE.MeshBasicMaterial({ \r\n            color, \r\n            wireframe: true,\r\n            transparent: true,\r\n            opacity: 0.6,\r\n            side: THREE.DoubleSide\r\n        })\r\n        const cone = new THREE.Mesh(geometry, material)\r\n        \r\n        // Rotate cone to point in the specified direction\r\n        // Default cone points along Y axis, we need to align it with coneDirection\r\n        const defaultDir = new THREE.Vector3(0, -1, 0)\r\n        const quaternion = new THREE.Quaternion()\r\n        quaternion.setFromUnitVectors(defaultDir, coneDirection.clone().normalize())\r\n        cone.quaternion.copy(quaternion)\r\n        \r\n        // Offset cone so its tip is at the emitter position\r\n        cone.position.copy(coneDirection.clone().normalize().multiplyScalar(coneHeight / 2))\r\n        \r\n        helper.add(cone)\r\n        \r\n        // Add a small sphere at the tip (emitter position)\r\n        const tipGeometry = new THREE.SphereGeometry(size * 0.3)\r\n        const tipMaterial = new THREE.MeshBasicMaterial({ \r\n            color, \r\n            transparent: true,\r\n            opacity: 0.9 \r\n        })\r\n        const tip = new THREE.Mesh(tipGeometry, tipMaterial)\r\n        helper.add(tip)\r\n    } else {\r\n        // Sphere at emitter position\r\n        const geometry = new THREE.SphereGeometry(size)\r\n        const material = new THREE.MeshBasicMaterial({ \r\n            color, \r\n            wireframe: true,\r\n            transparent: true,\r\n            opacity: 0.8 \r\n        })\r\n        const sphere = new THREE.Mesh(geometry, material)\r\n        helper.add(sphere)\r\n    }\r\n\r\n    // Match position to emitter\r\n    helper.position.copy(emitter.position)\r\n\r\n    return helper\r\n}\r\n\r\n/**\r\n * Create a pair of headlight SpotLights (left and right) with standard parameters.\r\n * @param {Object} opts - options\r\n * @param {Number} opts.color - hex color\r\n * @param {Number} opts.intensity - intensity\r\n * @param {Number} opts.distance - distance\r\n * @param {Number} opts.angle - cone angle radians\r\n * @param {Number} opts.penumbra - penumbra\r\n * @param {Number} opts.decay - decay\r\n * @param {Array} opts.leftPosition - [x,y,z]\r\n * @param {Array} opts.rightPosition - [x,y,z]\r\n * @param {Array} opts.targetPosition - [x,y,z]\r\n * @returns {Object} { left: SpotLight, right: SpotLight }\r\n */\r\nexport function createHeadlightSpots({ color = 0xFFFFDE, intensity = 3.0, distance = 10, angle = Math.PI / 6, penumbra = 0.5, decay = 1.0, leftPosition = [0.75, 0.76, 1.8], rightPosition = [-0.75, 0.76, 1.8], targetPosition = [0, 0, 10] } = {}) {\r\n    const left = new THREE.SpotLight(color, intensity, distance, angle, penumbra, decay)\r\n    left.position.set(...leftPosition)\r\n    left.target.position.set(...targetPosition)\r\n    left.castShadow = true\r\n    left.shadow.mapSize.width = 1024\r\n    left.shadow.mapSize.height = 1024\r\n    left.shadow.camera.near = 0.5\r\n    left.shadow.camera.far = 20\r\n    left.shadow.camera.fov = 30\r\n\r\n    const right = new THREE.SpotLight(color, intensity, distance, angle, penumbra, decay)\r\n    right.position.set(...rightPosition)\r\n    right.target.position.set(...targetPosition)\r\n    right.castShadow = true\r\n    right.shadow.mapSize.width = 1024\r\n    right.shadow.mapSize.height = 1024\r\n    right.shadow.camera.near = 0.5\r\n    right.shadow.camera.far = 20\r\n    right.shadow.camera.fov = 30\r\n\r\n    return { left, right }\r\n}\r\n\r\n/**\r\n * Load (if needed) and play audio on a THREE.PositionalAudio emitter.\r\n * If a `store` object and `storeKey` are provided, the loaded buffer will be cached there and reused.\r\n * @param {THREE.AudioLoader} audioLoader - instance used to load audio files\r\n * @param {THREE.PositionalAudio} emitter - the positional audio emitter to play the buffer on\r\n * @param {String} path - URL/path to the audio file\r\n * @param {Object} [opts]\r\n * @param {Object} [opts.store] - optional object to cache loaded buffers (e.g., soundEngine)\r\n * @param {String} [opts.storeKey] - key on the store where the buffer will be saved/loaded\r\n * @param {Boolean} [opts.loop=false] - whether to loop the audio\r\n * @param {Number} [opts.refDistance=20] - emitter reference distance\r\n * @param {Number|null} [opts.volume=null] - optional volume to set (0..1)\r\n * @param {Function|null} [opts.onEnded=null] - optional onEnded callback to set on emitter\r\n */\r\nexport function playPositionalAudio(audioLoader, emitter, path, { store = null, storeKey = null, loop = false, refDistance = 20, volume = null, offset = 0, onEnded = null } = {}) {\r\n    const playBuffer = (buffer) => {\r\n        try {\r\n            emitter.stop()\r\n            emitter.setBuffer(buffer)\r\n            emitter.setRefDistance(refDistance)\r\n            emitter.setLoop(loop)\r\n            if (typeof volume === 'number' && emitter.setVolume) emitter.setVolume(volume)\r\n            if (onEnded) emitter.onEnded = onEnded\r\n            emitter.play()\r\n        } catch (err) {\r\n            console.error('Failed to play positional audio:', err)\r\n        }\r\n    }\r\n\r\n    if (store && storeKey && store[storeKey]) {\r\n        playBuffer(store[storeKey])\r\n        return\r\n    }\r\n\r\n    loadAudioFile(audioLoader, path).then(buffer => {\r\n        if (store && storeKey) store[storeKey] = buffer\r\n        playBuffer(buffer)\r\n    }).catch(err => {\r\n        console.error('Failed to load and play audio:', path, err)\r\n    })\r\n}\r\n\r\n/**\r\n * Create a line with a clickable button at the end.\r\n * - screenAnchor: NDC coordinates (x,y) in range [-1,1] for the fixed screen point (e.g. upper-left = [-0.9,0.9])\r\n * - targetLocalPos: THREE.Vector3 position in local space of the target object (e.g. point on car model)\r\n * - targetObject: THREE.Object3D that the local position belongs to (used to compute world position and raycast intersection)\r\n * Returns an object { line, button, update(camera), getClickable() }\r\n */\r\nexport function createLineButton({ screenAnchor = new THREE.Vector2(-0.9, 0.9), targetLocalPos = new THREE.Vector3(0, 0, 0), targetObject = null, label = 'btn', color = 0x00ff00 } = {}) {\r\n    // Line geometry (two points)\r\n    const points = [new THREE.Vector3(), new THREE.Vector3()]\r\n    const lineGeom = new THREE.BufferGeometry().setFromPoints(points)\r\n    const lineMat = new THREE.LineBasicMaterial({ color: color })\r\n    const line = new THREE.Line(lineGeom, lineMat)\r\n    line.set\r\n\r\n    // Create a DOM button that will be positioned at the line's start point\r\n    let domButton = null\r\n    if (typeof document !== 'undefined') {\r\n        domButton = document.createElement('button')\r\n        domButton.color = color\r\n        domButton.dimmed = false\r\n        domButton.className = 'three-linebutton'\r\n        domButton.style.position = 'absolute'\r\n        domButton.style.padding = '4px 12px'\r\n        domButton.style.border = 'none'\r\n        domButton.style.borderRadius = '12px'\r\n    domButton.style.backgroundColor = colorToHex(color)\r\n        domButton.style.color = '#272727ff'\r\n        domButton.style.fontFamily = 'sans-serif'\r\n        domButton.style.fontSize = '14px'\r\n        domButton.style.cursor = 'pointer'\r\n        domButton.style.transform = 'translate(-50%, -50%)'\r\n        domButton.style.boxShadow = '0 2px 2px rgba(255, 255, 255, 0.24)'\r\n        domButton.style.userSelect = 'none'\r\n        domButton.textContent = label\r\n        document.body.appendChild(domButton)\r\n\r\n        // Add hover effect\r\n        domButton.addEventListener('mouseenter', () => {\r\n            domButton.style.backgroundColor = colorToHex(Math.min(color * 4, 0xffffff))\r\n        })\r\n        domButton.addEventListener('mouseleave', () => {\r\n            domButton.style.backgroundColor = domButton.dimmed ? `#444444` : colorToHex(color)\r\n        })\r\n    }\r\n\r\n    // Raycaster used internally to find intersection point on targetObject\r\n    const raycaster = new THREE.Raycaster()\r\n\r\n    // Track visibility state\r\n    let isVisible = true\r\n    \r\n    // Cache frequently accessed values\r\n    const _ndc = new THREE.Vector3()\r\n    const _dir = new THREE.Vector3()\r\n    const _startPoint = new THREE.Vector3()\r\n    const _targetWorld = new THREE.Vector3()\r\n    const _rayDir = new THREE.Vector3()\r\n    const _endPoint = new THREE.Vector3()\r\n    const _proj = new THREE.Vector3()\r\n    let _canvas = null\r\n    let _canvasRect = null\r\n    let _frameCount = 0\r\n\r\n    // Update function to be called each frame\r\n    function update(camera) {\r\n        // Cache canvas rect every 30 frames to avoid constant DOM queries\r\n        if (_frameCount % 30 === 0 || !_canvas) {\r\n            _canvas = document.querySelector('canvas.webgl')\r\n            if (_canvas) {\r\n                _canvasRect = _canvas.getBoundingClientRect()\r\n            }\r\n        }\r\n        _frameCount++\r\n        \r\n        // Compute world start point from screenAnchor (NDC) at z = 0.5\r\n        _ndc.set(screenAnchor.x, screenAnchor.y, 0.5)\r\n        _ndc.unproject(camera)\r\n        _dir.copy(_ndc).sub(camera.position).normalize()\r\n        // set a reasonable distance for the start point along the ray (near camera)\r\n        _startPoint.copy(camera.position).add(_dir.multiplyScalar(1.0))\r\n\r\n        // Compute target world position from targetLocalPos / targetObject\r\n        if (targetObject) {\r\n            _targetWorld.copy(targetLocalPos)\r\n            targetObject.localToWorld(_targetWorld)\r\n        } else {\r\n            _targetWorld.copy(targetLocalPos)\r\n        }\r\n\r\n        // Raycast from camera towards targetWorld to find intersection with targetObject (car)\r\n        _rayDir.copy(_targetWorld).sub(camera.position).normalize()\r\n        raycaster.set(camera.position, _rayDir)\r\n        _endPoint.copy(_targetWorld)\r\n        \r\n        if (targetObject) {\r\n            const hits = raycaster.intersectObject(targetObject, true)\r\n            if (hits && hits.length > 0) {\r\n                _endPoint.copy(hits[0].point)\r\n            }\r\n        }\r\n\r\n        // Update line geometry positions (startPoint -> endPoint)\r\n        const posAttr = line.geometry.attributes.position\r\n        posAttr.setXYZ(0, _startPoint.x, _startPoint.y, _startPoint.z)\r\n        posAttr.setXYZ(1, _endPoint.x, _endPoint.y, _endPoint.z)\r\n        posAttr.needsUpdate = true\r\n\r\n        // Update DOM button position at the line's start point\r\n        if (domButton && _canvasRect) {\r\n            _proj.copy(_startPoint).project(camera)\r\n            // Hide if behind camera or offscreen\r\n            if (!isVisible || _proj.z > 1 || _proj.z < -1 || _proj.x < -1.2 || _proj.x > 1.2 || _proj.y < -1.2 || _proj.y > 1.2) {\r\n                domButton.style.display = 'none'\r\n            } else {\r\n                domButton.style.display = ''\r\n                const x = (_proj.x * 0.5 + 0.5) * _canvasRect.width + _canvasRect.left\r\n                const y = (-_proj.y * 0.5 + 0.5) * _canvasRect.height + _canvasRect.top\r\n                domButton.style.left = `${x}px`\r\n                domButton.style.top = `${y}px`\r\n            }\r\n        }\r\n    }\r\n\r\n    // Toggle visibility of both line and DOM button\r\n    function setVisible(visible) {\r\n        isVisible = visible\r\n        line.visible = visible\r\n        if (domButton) {\r\n            domButton.style.display = visible ? '' : 'none'\r\n        }\r\n    }\r\n\r\n    // Clean up DOM element and event listeners\r\n    function dispose() {\r\n        if (domButton && domButton.parentElement) {\r\n            domButton.removeEventListener('mouseenter', null)\r\n            domButton.removeEventListener('mouseleave', null)\r\n            domButton.parentElement.removeChild(domButton)\r\n            domButton = null\r\n        }\r\n        if (line.geometry) {\r\n            line.geometry.dispose()\r\n        }\r\n        if (line.material) {\r\n            line.material.dispose()\r\n        }\r\n    }\r\n\r\n    return {\r\n        line,\r\n        button: domButton,\r\n        update,\r\n        setVisible,\r\n        dispose\r\n    }\r\n}\r\n","import * as THREE from 'three'\r\n\r\nconst MAX_PARTICLES = 1000\r\nconst smokeGeometry = new THREE.BufferGeometry()\r\nconst smokePositions = new Float32Array(MAX_PARTICLES * 3) // Max particles, xyz positions\r\nconst smokeColors = new Float32Array(MAX_PARTICLES * 4) // RGBA colors\r\nconst smokeSizes = new Float32Array(MAX_PARTICLES) // Particle sizes\r\n\r\nsmokeGeometry.setAttribute('position', new THREE.BufferAttribute(smokePositions, 3))\r\nsmokeGeometry.setAttribute('color', new THREE.BufferAttribute(smokeColors, 4))\r\nsmokeGeometry.setAttribute('size', new THREE.BufferAttribute(smokeSizes, 1))\r\n\r\nconst smokeMaterial = new THREE.PointsMaterial({\r\n    size: 0.1,\r\n    vertexColors: true,\r\n    transparent: true,\r\n    opacity: 0.5,\r\n    blending: THREE.AdditiveBlending\r\n})\r\n\r\nconst smokePoints = new THREE.Points(smokeGeometry, smokeMaterial)\r\n\r\n/**\r\n * Object Pool for particles to avoid constant allocation/deallocation\r\n */\r\nconst particlePool = {\r\n    // Pool of reusable particle objects\r\n    pool: [],\r\n    // Active particles currently in use\r\n    active: [],\r\n    \r\n    /**\r\n     * Get a particle from the pool or create a new one\r\n     */\r\n    acquire() {\r\n        let particle\r\n        if (this.pool.length > 0) {\r\n            particle = this.pool.pop()\r\n        } else {\r\n            // Create new particle object if pool is empty\r\n            particle = {\r\n                offset: [0, 0, 0],\r\n                scale: [0, 0],\r\n                quaternion: [0, 0, 0, 0],\r\n                rotation: 0,\r\n                color: [1, 1, 1, 1],\r\n                blend: 0,\r\n                texture: 0,\r\n                live: 0,\r\n                scale_increase: 0,\r\n                opacity_decrease: 0,\r\n                color_from: [0, 0, 0],\r\n                color_to: [0, 0, 0],\r\n                color_speed: 0,\r\n                color_pr: 0\r\n            }\r\n        }\r\n        this.active.push(particle)\r\n        return particle\r\n    },\r\n    \r\n    /**\r\n     * Return a particle to the pool for reuse\r\n     */\r\n    release(particle) {\r\n        const index = this.active.indexOf(particle)\r\n        if (index > -1) {\r\n            this.active.splice(index, 1)\r\n            this.pool.push(particle)\r\n        }\r\n    },\r\n    \r\n    /**\r\n     * Get count of active particles\r\n     */\r\n    getActiveCount() {\r\n        return this.active.length\r\n    },\r\n    \r\n    /**\r\n     * Clear all particles\r\n     */\r\n    clear() {\r\n        // Return all active particles to pool\r\n        while (this.active.length > 0) {\r\n            this.pool.push(this.active.pop())\r\n        }\r\n    }\r\n}\r\n\r\nexport const particleSystem = {\r\n    emitters: [],\r\n    enabled: true, // Global enable/disable flag\r\n    visible: true, // Visibility flag for culling\r\n    \r\n    initialize: () => {\r\n        // Create exhaust emitter for tailpipe\r\n        const exhaustEmitter = {\r\n            enabled: false,\r\n            position: new THREE.Vector3(-0.5, 0.3, -2.0), // Tailpipe position relative to car\r\n            settings: {\r\n                radius_1: 0.02,\r\n                radius_2: 0.1,\r\n                radius_height: 0.2,\r\n                add_time: 0.02,\r\n                elapsed: 0,\r\n                live_time_from: 1.0,\r\n                live_time_to: 1.5,\r\n                opacity_decrease: 0.008,\r\n                rotation_from: 0.5,\r\n                rotation_to: 1.0,\r\n                speed_from: 0.003,\r\n                speed_to: 0.006,\r\n                scale_from: 0.1,\r\n                scale_increase: 0.002,\r\n                color_from: [0.9, 0.9, 0.9],\r\n                color_to: [0.5, 0.5, 0.5],\r\n                color_speed_from: 1.0,\r\n                color_speed_to: 1.0,\r\n                brightness_from: 0.5,\r\n                brightness_to: 0.9,\r\n                opacity: 0.6,\r\n                blend: 0.8,\r\n                texture: 0.5  // Smoke texture\r\n            }\r\n        }\r\n        particleSystem.emitters.push(exhaustEmitter)\r\n    },\r\n    update: (deltaTime, engineState) => {\r\n        // Skip particle updates if system is disabled or not visible\r\n        if (!particleSystem.enabled || !particleSystem.visible) {\r\n            return\r\n        }\r\n        \r\n        // Update emitters and create new particles\r\n        particleSystem.emitters.forEach(emitter => {\r\n            if (engineState !== 'stop') {\r\n                emitter.enabled = true\r\n                emitter.settings.add_time = engineState === 'accel' ? 0.01 : 0.02 // More particles during acceleration  \r\n                emitter.settings.speed_from = engineState === 'accel' ? 0.005 : 0.003\r\n                emitter.settings.speed_to = engineState === 'accel' ? 0.008 : 0.006\r\n            } else {\r\n                emitter.enabled = false\r\n            }\r\n\r\n            if (emitter.enabled) {\r\n                let add = 0\r\n                emitter.settings.elapsed += deltaTime\r\n                add = Math.floor(emitter.settings.elapsed / emitter.settings.add_time)\r\n                emitter.settings.elapsed -= add * emitter.settings.add_time\r\n\r\n                while (add--) {\r\n                    // Enforce max particle limit to prevent unbounded memory growth\r\n                    if (particlePool.getActiveCount() >= MAX_PARTICLES) {\r\n                        break\r\n                    }\r\n\r\n                    // Acquire particle from pool\r\n                    const p = particlePool.acquire()\r\n\r\n                    // Initialize particle position\r\n                    const radius_1 = emitter.settings.radius_1 * Math.sqrt(Math.random())\r\n                    const theta = 2 * Math.PI * Math.random()\r\n                    const x_1 = emitter.position.x + radius_1 * Math.cos(theta)\r\n                    const z_1 = emitter.position.z + radius_1 * Math.sin(theta)\r\n\r\n                    const radius_2 = emitter.settings.radius_2 * Math.sqrt(Math.random())\r\n                    const x_2 = x_1 + radius_2 * Math.cos(theta)\r\n                    const z_2 = z_1 + radius_2 * Math.sin(theta)\r\n\r\n                    const direction = new THREE.Vector3(\r\n                        x_2 - x_1,\r\n                        emitter.settings.radius_height,\r\n                        z_2 - z_1\r\n                    ).normalize()\r\n\r\n                    const speed = Math.random() * (emitter.settings.speed_to - emitter.settings.speed_from) + emitter.settings.speed_from\r\n                    direction.multiplyScalar(speed)\r\n\r\n                    const brightness = Math.random() * (emitter.settings.brightness_to - emitter.settings.brightness_from) + emitter.settings.brightness_from\r\n\r\n                    // Reuse particle object instead of creating new one\r\n                    p.offset[0] = x_1\r\n                    p.offset[1] = emitter.position.y\r\n                    p.offset[2] = z_1\r\n                    p.scale[0] = emitter.settings.scale_from\r\n                    p.scale[1] = emitter.settings.scale_from\r\n                    p.quaternion[0] = direction.x\r\n                    p.quaternion[1] = direction.y\r\n                    p.quaternion[2] = direction.z\r\n                    p.quaternion[3] = 3\r\n                    p.rotation = Math.random() * (emitter.settings.rotation_to - emitter.settings.rotation_from) + emitter.settings.rotation_from\r\n                    p.color[0] = 1\r\n                    p.color[1] = 1\r\n                    p.color[2] = 1\r\n                    p.color[3] = emitter.settings.opacity\r\n                    p.blend = emitter.settings.blend\r\n                    p.texture = emitter.settings.texture\r\n                    p.live = Math.random() * (emitter.settings.live_time_to - emitter.settings.live_time_from) + emitter.settings.live_time_from\r\n                    p.scale_increase = emitter.settings.scale_increase\r\n                    p.opacity_decrease = emitter.settings.opacity_decrease\r\n                    p.color_from[0] = emitter.settings.color_from[0] * brightness\r\n                    p.color_from[1] = emitter.settings.color_from[1] * brightness\r\n                    p.color_from[2] = emitter.settings.color_from[2] * brightness\r\n                    p.color_to[0] = emitter.settings.color_to[0] * brightness\r\n                    p.color_to[1] = emitter.settings.color_to[1] * brightness\r\n                    p.color_to[2] = emitter.settings.color_to[2] * brightness\r\n                    p.color_speed = Math.random() * (emitter.settings.color_speed_to - emitter.settings.color_speed_from) + emitter.settings.color_speed_from\r\n                    p.color_pr = 0\r\n                }\r\n            }\r\n        });\r\n\r\n        // Update existing particles (iterate backwards for safe removal)\r\n        const activeParticles = particlePool.active\r\n        for (let i = activeParticles.length - 1; i >= 0; i--) {\r\n            const p = activeParticles[i]\r\n\r\n            // Update particle position based on quaternion direction\r\n            p.offset[0] += p.quaternion[0]\r\n            p.offset[1] += p.quaternion[1]\r\n            p.offset[2] += p.quaternion[2]\r\n\r\n            // Update scale\r\n            p.scale[0] += p.scale_increase\r\n            p.scale[1] += p.scale_increase\r\n\r\n            // Update color\r\n            p.color_pr += p.color_speed\r\n            if (p.color_pr > 1) p.color_pr = 1\r\n            p.color[0] = p.color_from[0] + (p.color_to[0] - p.color_from[0]) * p.color_pr\r\n            p.color[1] = p.color_from[1] + (p.color_to[1] - p.color_from[1]) * p.color_pr\r\n            p.color[2] = p.color_from[2] + (p.color_to[2] - p.color_from[2]) * p.color_pr\r\n\r\n            // Update opacity\r\n            p.color[3] -= p.opacity_decrease\r\n\r\n            // Remove dead particles and return to pool\r\n            p.live -= deltaTime\r\n            if (p.live <= 0 || p.color[3] <= 0) {\r\n                particlePool.release(p)\r\n                continue\r\n            }\r\n\r\n            // Update particle attributes in geometry\r\n            const idx = i * 3\r\n            smokePositions[idx] = p.offset[0]\r\n            smokePositions[idx + 1] = p.offset[1]\r\n            smokePositions[idx + 2] = p.offset[2]\r\n\r\n            const colorIdx = i * 4\r\n            smokeColors[colorIdx] = p.color[0]\r\n            smokeColors[colorIdx + 1] = p.color[1]\r\n            smokeColors[colorIdx + 2] = p.color[2]\r\n            smokeColors[colorIdx + 3] = p.color[3]\r\n\r\n            smokeSizes[i] = p.scale[0]\r\n        }\r\n\r\n        // Only update geometry if we have active particles\r\n        if (particlePool.getActiveCount() > 0) {\r\n            smokeGeometry.attributes.position.needsUpdate = true\r\n            smokeGeometry.attributes.color.needsUpdate = true\r\n            smokeGeometry.attributes.size.needsUpdate = true\r\n        }\r\n    },\r\n    getMesh: () => {\r\n        return smokePoints\r\n    },\r\n    dispose: () => {\r\n        // Clear particle pool\r\n        particlePool.clear()\r\n        \r\n        // Dispose geometry and material\r\n        if (smokeGeometry) {\r\n            smokeGeometry.dispose()\r\n        }\r\n        if (smokeMaterial) {\r\n            smokeMaterial.dispose()\r\n        }\r\n        \r\n        // Clear emitters\r\n        particleSystem.emitters.length = 0\r\n    },\r\n    \r\n    /**\r\n     * Get performance stats\r\n     */\r\n    getStats: () => {\r\n        return {\r\n            activeParticles: particlePool.getActiveCount(),\r\n            pooledParticles: particlePool.pool.length,\r\n            totalAllocated: particlePool.active.length + particlePool.pool.length\r\n        }\r\n    }\r\n}","import * as THREE from 'three'\r\nimport { SoloBtnColors } from './constants.js'\r\nimport { colorToHex } from './helpers.js'\r\n\r\n// Minimal portable mixer panel for showing emitter volumes\r\nexport function createMixer({ emitters = {}, initialVisible = false } = {}) {\r\n    let visible = initialVisible\r\n    let panel = null\r\n    const analysers = new Map() // Store audio analysers for each emitter\r\n\r\n    function ensurePanel() {\r\n        if (panel) return panel\r\n        panel = document.createElement('div')\r\n        panel.id = 'audio-volume-panel'\r\n        Object.assign(panel.style, {\r\n            position: 'fixed',\r\n            bottom: '10px', // Lower right corner\r\n            right: '10px',\r\n            padding: '8px',\r\n            background: 'rgba(0,0,0,0.6)',\r\n            color: '#fff',\r\n            borderRadius: '6px',\r\n            zIndex: 9999,\r\n            fontFamily: 'monospace',\r\n            fontSize: '12px',\r\n            pointerEvents: 'none',\r\n            display: visible ? '' : 'none'\r\n        })\r\n        document.body.appendChild(panel)\r\n        return panel\r\n    }\r\n\r\n    function buildRow(pos) {\r\n        const row = document.createElement('div')\r\n        row.dataset.pos = pos\r\n        Object.assign(row.style, {\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            marginBottom: '6px',\r\n            pointerEvents: 'auto',\r\n            flexDirection: 'row'\r\n        })\r\n\r\n        const label = document.createElement('div')\r\n        label.className = 'vol-label'\r\n        label.textContent = pos\r\n        Object.assign(label.style, {\r\n            width: '70px',\r\n            textTransform: 'capitalize'\r\n        })\r\n\r\n        const barContainer = document.createElement('div')\r\n        barContainer.className = 'vol-bar-container'\r\n        Object.assign(barContainer.style, {\r\n            width: '64px',\r\n            height: '12px',\r\n            background: 'rgba(255,255,255,0.08)',\r\n            borderRadius: '3px',\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            overflow: 'hidden',\r\n            marginLeft: '8px',\r\n            marginRight: '8px'\r\n        })\r\n\r\n        const barInner = document.createElement('div')\r\n        barInner.className = 'vol-bar'\r\n        Object.assign(barInner.style, {\r\n            width: '0%',\r\n            height: '100%',\r\n            background: '#666', // fallback until mapped color applied\r\n            transition: 'width 0.08s linear'\r\n        })\r\n\r\n        // const value = document.createElement('div')\r\n        // value.className = 'vol-value'\r\n        // Object.assign(value.style, {\r\n        //     marginLeft: '8px',\r\n        //     minWidth: '36px',\r\n        //     textAlign: 'right'\r\n        // })\r\n        // value.textContent = '0%'\r\n\r\n        // Apply color from SoloBtnColors mapping based on position key\r\n        const soloColorKey = pos.toUpperCase()\r\n        if (SoloBtnColors[soloColorKey] !== undefined) {\r\n            barInner.style.background = colorToHex(SoloBtnColors[soloColorKey])\r\n        }\r\n\r\n        barContainer.appendChild(barInner)\r\n        row.appendChild(label)\r\n        row.appendChild(barContainer)\r\n        // row.appendChild(value)\r\n        return row\r\n    }\r\n\r\n    function ensureAnalyser(pos, emitter) {\r\n        if (!analysers.has(pos) && emitter?.getOutput()) {\r\n            const analyser = new THREE.AudioAnalyser(emitter, 32)\r\n            analysers.set(pos, analyser)\r\n        }\r\n        return analysers.get(pos)\r\n    }\r\n\r\n    function getEmitterVolume(pos, emitter) {\r\n        const analyser = ensureAnalyser(pos, emitter)\r\n        if (!analyser) return 0\r\n\r\n        const volume = analyser.getAverageFrequency() / 255 // Normalize to 0-1\r\n        const soloScaling = emitter && emitter.getVolume ? emitter.getVolume() : 0\r\n        return volume * soloScaling\r\n    }\r\n\r\n    function update() {\r\n        const p = ensurePanel()\r\n        Object.entries(emitters).forEach(([pos, emitter]) => {\r\n            // Disabling mix row, as now just using separate assets for mix\r\n            if (pos === 'mix') return\r\n            \r\n            let row = p.querySelector(`[data-pos=\"${pos}\"]`)\r\n            if (!row) {\r\n                row = buildRow(pos)\r\n                p.appendChild(row)\r\n            }\r\n\r\n            const volume = getEmitterVolume(pos, emitter) * 3\r\n            const barInner = row.querySelector('.vol-bar')\r\n            barInner.style.width = `${Math.max(0, Math.min(1, volume)) * 100}%`\r\n            \r\n            // const value = row.querySelector('.vol-value')\r\n            // value.textContent = `${Math.round(volume * 100)}%`\r\n        })\r\n        panel.style.display = visible ? '' : 'none'\r\n    }\r\n\r\n    function setVisible(v) {\r\n        visible = !!v\r\n        if (panel) panel.style.display = visible ? '' : 'none'\r\n    }\r\n\r\n    function dispose() {\r\n        // Clean up analysers\r\n        analysers.forEach(analyser => {\r\n            if (analyser && analyser.analyser) {\r\n                try {\r\n                    analyser.analyser.disconnect()\r\n                } catch (err) {\r\n                    console.warn('Error disposing analyser:', err)\r\n                }\r\n            }\r\n        })\r\n        analysers.clear()\r\n\r\n        // Remove DOM panel\r\n        if (panel && panel.parentElement) {\r\n            panel.parentElement.removeChild(panel)\r\n            panel = null\r\n        }\r\n    }\r\n\r\n    return {\r\n        update,\r\n        setVisible,\r\n        isVisible: () => visible,\r\n        dispose\r\n    }\r\n}\r\n","/**\r\n * Lightweight performance monitor for FPS and frame time\r\n */\r\nexport function createPerformanceMonitor({ initialVisible = false } = {}) {\r\n    let visible = initialVisible\r\n    let panel = null\r\n    \r\n    // Performance tracking\r\n    let frames = 0\r\n    let prevTime = performance.now()\r\n    let fps = 0\r\n    let frameTime = 0\r\n\r\n    function ensurePanel() {\r\n        if (panel) return panel\r\n        panel = document.createElement('div')\r\n        panel.id = 'performance-stats'\r\n        Object.assign(panel.style, {\r\n            position: 'fixed',\r\n            bottom: '10px',\r\n            left: '10px',\r\n            padding: '8px',\r\n            background: 'rgba(0,0,0,0.6)',\r\n            color: '#fff',\r\n            borderRadius: '6px',\r\n            zIndex: 9999,\r\n            fontFamily: 'monospace',\r\n            fontSize: '12px',\r\n            pointerEvents: 'none',\r\n            display: visible ? '' : 'none',\r\n            minWidth: '120px'\r\n        })\r\n        document.body.appendChild(panel)\r\n        return panel\r\n    }\r\n\r\n    function update() {\r\n        frames++\r\n        const currentTime = performance.now()\r\n        const delta = currentTime - prevTime\r\n\r\n        // Update FPS every second\r\n        if (delta >= 1000) {\r\n            fps = Math.round((frames * 1000) / delta)\r\n            frameTime = delta / frames\r\n            frames = 0\r\n            prevTime = currentTime\r\n        }\r\n\r\n        // Update panel if visible\r\n        if (visible) {\r\n            const p = ensurePanel()\r\n            \r\n            // Color code FPS\r\n            let fpsColor = '#00ff00' // Green\r\n            if (fps < 60) fpsColor = '#ffff00' // Yellow\r\n            if (fps < 30) fpsColor = '#ff0000' // Red\r\n            \r\n            p.innerHTML = `\r\n                <div style=\"margin-bottom: 4px;\">\r\n                    <span style=\"color: #888;\">FPS:</span> \r\n                    <span style=\"color: ${fpsColor}; font-weight: bold;\">${fps}</span>\r\n                </div>\r\n                <div>\r\n                    <span style=\"color: #888;\">Frame:</span> \r\n                    <span>${frameTime.toFixed(2)}ms</span>\r\n                </div>\r\n            `\r\n        }\r\n    }\r\n\r\n    function setVisible(v) {\r\n        visible = !!v\r\n        if (panel) panel.style.display = visible ? '' : 'none'\r\n    }\r\n\r\n    function dispose() {\r\n        if (panel && panel.parentElement) {\r\n            panel.parentElement.removeChild(panel)\r\n            panel = null\r\n        }\r\n    }\r\n\r\n    return {\r\n        update,\r\n        setVisible,\r\n        isVisible: () => visible,\r\n        dispose,\r\n        getStats: () => ({ fps, frameTime })\r\n    }\r\n}\r\n","import * as THREE from 'three'\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js'\r\nimport { RGBELoader } from 'three/examples/jsm/loaders/RGBELoader.js'\r\nimport { HDRCubeTextureLoader  } from 'three/examples/jsm/loaders/HDRCubeTextureLoader.js'\r\nimport * as dat from 'lil-gui'\r\n\r\nTHREE.ColorManagement.enabled = false\r\n\r\nimport { DriveState, SoloState, SoloBtnColors, EmitterVolMults, ConeEmitterSettings, LightingDefaults, EnvironmentPresets } from './systems/constants.js'\r\nimport { colorToHex, disposeObject, disposeTexture, disposeAudioEmitter, disposeAudioAnalyser, checkWebGLSupport, checkWebAudioSupport, showErrorUI, showLoadingUI, loadGLTFModel, loadAudioFile, loadHDRTexture } from './systems/helpers.js'\r\nvar driveState = DriveState.STOP\r\nvar soloState = SoloState.MIX\r\n\r\nimport { particleSystem } from './systems/exhaust.js'\r\nimport { createDirectionalLights, createHeadlightSpots, playPositionalAudio, createLineButton, createAudioEmitterDebugger } from './systems/helpers.js'\r\nimport { createMixer } from './systems/meters.js'\r\nimport { createPerformanceMonitor } from './systems/stats.js'\r\n\r\n// Import audio context resume helper\r\nimport { resumeAudioContext } from './systems/helpers.js'\r\n\r\n/**\r\n * Feature Detection & Browser Compatibility Check\r\n */\r\n// Check WebGL support\r\nconst webglCheck = checkWebGLSupport()\r\nif (!webglCheck.available) {\r\n    showErrorUI('WebGL Not Supported', webglCheck.error, true)\r\n    throw new Error(webglCheck.error)\r\n}\r\n\r\n// Check Web Audio API support\r\nconst audioCheck = checkWebAudioSupport()\r\nif (!audioCheck.available) {\r\n    showErrorUI('Web Audio Not Supported', audioCheck.error, true)\r\n    throw new Error(audioCheck.error)\r\n}\r\n\r\n/**\r\n * Setup\r\n */\r\n// Initialization state flags to prevent race conditions\r\nconst initState = {\r\n    modelsLoaded: false,\r\n    audioLoaded: false,\r\n    sceneReady: false\r\n}\r\n\r\n// Canvas\r\nconst canvas = document.querySelector('canvas.webgl')\r\n\r\n// Scene\r\nconst scene = new THREE.Scene()\r\nscene.background = new THREE.Color(0xa0a0a0);\r\nscene.fog = new THREE.FogExp2(0xefd1b5, 0.05);\r\n\r\n// Debug\r\nconst dbg = new dat.GUI()\r\n\r\nconst dbgAudioSettings = {\r\n    'Meters': true,\r\n    'Emitters': false\r\n}\r\nconst dbgAudio = dbg.addFolder('Audio')\r\nlet dbgAudioReverb = null\r\nlet dbgAudioMeters = null\r\nlet dbgAudioEmitters = null\r\nlet dbgAudioMicPersp = null\r\n\r\nconst dbgVehicle = dbg.addFolder('Vehicle')\r\nlet dbgVehLevelSelect = null\r\nlet dbgVehCarSelect = null\r\nlet dbgVehIgnOn = null\r\nlet dbgVehIgnOff = null\r\n\r\nconst dbgPerformance = dbg.addFolder('Performance')\r\nconst dbgPerfSettings = {\r\n    'Show Stats': false\r\n}\r\nlet dbgPerfStats = null\r\n\r\n// Axes\r\n// const axes = new THREE.AxesHelper(1)\r\n// axes.visible = false\r\n// scene.add(axes)\r\n// dbgUtils.add(axes, 'visible').name('Axes')\r\n\r\n// Loaders\r\nconst gltfLoader = new GLTFLoader()\r\nconst audioLoader = new THREE.AudioLoader()\r\nconst rgbeLoader = new RGBELoader()\r\nconst hdrCubeLoader = new HDRCubeTextureLoader()\r\n\r\n/**\r\n * Floor\r\n */\r\nconst floor = new THREE.Mesh(\r\n    new THREE.PlaneGeometry(10, 10),\r\n    new THREE.MeshStandardMaterial({\r\n        color: '#444444',\r\n        metalness: 0,\r\n        roughness: 0.5\r\n    })\r\n)\r\nfloor.receiveShadow = true\r\nfloor.rotation.x = - Math.PI * 0.5\r\nscene.add(floor)\r\n\r\n/**\r\n * HDRIs\r\n */\r\n\r\n// Keep reference to the original background so \"None\" can restore it\r\nconst originalBackground = scene.background ? scene.background.clone() : new THREE.Color(0xa0a0a0)\r\nlet currentHDRTexture = null\r\n\r\nconst hdrOptions = ['None', ...Object.keys(EnvironmentPresets)]\r\nconst hdrParams = { HDR: 'None' }\r\ndbgVehLevelSelect = dbgVehicle.add(hdrParams, 'HDR', hdrOptions).name('Level Select').onChange(name => {\r\n    if (name === 'None') {\r\n        // Dispose previously loaded HDR texture and restore defaults\r\n        if (currentHDRTexture) {\r\n            disposeTexture(currentHDRTexture)\r\n            currentHDRTexture = null\r\n        }\r\n        scene.background = originalBackground.clone ? originalBackground.clone() : originalBackground\r\n        scene.environment = null\r\n        floor.visible = true\r\n\r\n        // Reset lighting & atmospheric settings\r\n        applyLightingOverride(null)\r\n        if (scene.fog) {\r\n            scene.fog.color.set(0xefd1b5)\r\n            scene.fog.density = 0.05\r\n        }\r\n        if (typeof renderer.toneMappingExposure === 'number') renderer.toneMappingExposure = baseLightingSnapshot.exposure\r\n\r\n        // Force material refresh (remove stale env-dependent shader variants)\r\n        scene.traverse(obj => {\r\n            if (obj.isMesh && obj.material) {\r\n                if (Array.isArray(obj.material)) obj.material.forEach(m => m.needsUpdate = true)\r\n                else obj.material.needsUpdate = true\r\n            }\r\n        })\r\n\r\n        // Debug log comparison\r\n        console.log('[HDR Reset] Ambient', ambientLight.intensity, ambientLight.color.getHexString())\r\n        directionalLights.forEach((dl,i)=>console.log(`[HDR Reset] Dir${i}`, dl.intensity, dl.color.getHexString()))\r\n        console.log('[HDR Reset] Hemi', hemiLight.intensity, hemiLight.color.getHexString(), hemiLight.groundColor.getHexString())\r\n\r\n        // Remove reverb\r\n        soundEngine.removeConvolutionReverb()\r\n        reverbParams.Reverb = 'None'\r\n        if (dbgAudioReverb) {\r\n            dbgAudioReverb.updateDisplay()\r\n        }\r\n\r\n        return\r\n    }\r\n\r\n    const preset = EnvironmentPresets[name]\r\n    if (!preset) return\r\n    \r\n    // Handle both old string format and new object format\r\n    const path = typeof preset === 'string' ? preset : preset.path\r\n    const reverbPreset = typeof preset === 'object' ? preset.reverb : null\r\n\r\n    loadHDRTexture(rgbeLoader, path).then((texture) => {\r\n        // Dispose previous texture if any\r\n        if (currentHDRTexture) {\r\n            disposeTexture(currentHDRTexture)\r\n        }\r\n\r\n        texture.mapping = THREE.EquirectangularReflectionMapping\r\n        currentHDRTexture = texture\r\n\r\n        scene.background = texture\r\n        scene.environment = texture\r\n\r\n        // Hide floor when HDRI is active\r\n        floor.visible = false\r\n\r\n        // Apply lighting override if provided\r\n        if (preset.lighting) {\r\n            applyLightingOverride(preset.lighting)\r\n        }\r\n\r\n        // Auto-select associated reverb if specified\r\n        if (reverbPreset && reverbParams) {\r\n            reverbParams.Reverb = reverbPreset\r\n            // Trigger reverb load by finding and calling the controller's onChange\r\n            if (dbgAudioReverb) {\r\n                dbgAudioReverb.updateDisplay()\r\n                // Manually trigger the reverb loading logic\r\n                const reverbMapEntry = reverbMap[reverbPreset]\r\n                if (reverbMapEntry) {\r\n                    const { path: reverbPath, blend = 0.5, scalingFactor = 1.0 } = reverbMapEntry\r\n                    soundEngine.currentReverbBlend = blend\r\n                    soundEngine.currentReverbScalingFactor = scalingFactor\r\n                    loadAudioFile(new THREE.AudioLoader(), reverbPath).then((buffer) => {\r\n                        soundEngine.applyConvolutionReverb(buffer)\r\n                    }).catch(err => {\r\n                        console.error('Failed to load reverb:', err)\r\n                        showErrorUI('Reverb Load Failed', `Could not load reverb: ${err.message}`, false)\r\n                    })\r\n                }\r\n            }\r\n        }\r\n    }).catch(err => {\r\n        console.error('Failed to load HDR:', err)\r\n        showErrorUI('HDR Load Failed', `Could not load environment: ${err.message}`, false)\r\n    })\r\n})\r\n\r\n\r\n/**\r\n * Objects\r\n */\r\nlet carGroup = new THREE.Group()\r\nscene.add(carGroup)\r\ncarGroup.add(particleSystem.getMesh())\r\n\r\n// Line buttons: will be created after car model loads; store them here\r\nconst lineButtons = []\r\n\r\n// Animation mixers and actions\r\nlet anims = {\r\n    // Wheels\r\n    mixerWheels: null,\r\n    actWheelsRot: null, actTiresRot: null,\r\n\r\n    // Lights\r\n    mixerLights: null,\r\n    actLights0: null, actLights1: null, actLights2: null, actLights3: null, actLights4: null,\r\n    headLightL: null, headLightR: null,\r\n    lightsFlipFlop: true,\r\n    lightsIntensity: 3.0,\r\n    lightsTimeScaleToggle: () => {\r\n        // Guard against accessing before lights are loaded\r\n        if (!anims.mixerLights) return\r\n\r\n        if (anims.lightsFlipFlop) {\r\n            anims.mixerLights.timeScale = 1.5\r\n            for (let i = 0; i < 5; i++) {\r\n                const key = `actLights${i}`\r\n                if (anims[key]) anims[key].time = 0\r\n            }\r\n            anims.lightsFlipFlop = false\r\n        } else {\r\n            anims.mixerLights.timeScale = -1.5\r\n            for (let i = 0; i < 5; i++) {\r\n                const key = `actLights${i}`\r\n                if (anims[key]) anims[key].time = anims[key].getClip().duration - anims[key].time\r\n            }\r\n            anims.lightsFlipFlop = true\r\n        }\r\n    },\r\n    lights: () => { \r\n        // Guard against accessing before lights are loaded\r\n        if (!anims.mixerLights) return\r\n        \r\n        anims.mixerLights.stopAllAction()\r\n        anims.lightsTimeScaleToggle()\r\n        if (anims.actLights0) anims.actLights0.play()\r\n        if (anims.actLights1) anims.actLights1.play()\r\n        if (anims.actLights2) anims.actLights2.play()\r\n        if (anims.actLights3) anims.actLights3.play()\r\n        if (anims.actLights4) anims.actLights4.play()\r\n    }\r\n}\r\n\r\n/**\r\n * Async initialization to load all models with error handling\r\n */\r\nasync function initializeModels() {\r\n    const loadingUI = showLoadingUI('Loading models...')\r\n    \r\n    try {\r\n        // Load all models in parallel\r\n        loadingUI.update('Loading car model...')\r\n        const [gltfCar, gltfWheels, gltfLights] = await Promise.all([\r\n            loadGLTFModel(gltfLoader, './model/rx7/rx7.gltf'),\r\n            loadGLTFModel(gltfLoader, './model/rx7_wheels/rx7_wheels.gltf'),\r\n            loadGLTFModel(gltfLoader, './model/rx7_lights/rx7_lights.gltf')\r\n        ])\r\n\r\n        loadingUI.update('Setting up scene...')\r\n\r\n        // Setup car\r\n        gltfCar.scene.scale.set(1.0, 1.0, 1.0)\r\n        carGroup.add(gltfCar.scene)\r\n        particleSystem.initialize()\r\n\r\n        // Setup wheels\r\n        gltfWheels.scene.scale.set(1.0, 1.0, 1.0)\r\n        gltfWheels.scene.position.set(0, 0, 0)\r\n        carGroup.add(gltfWheels.scene)\r\n\r\n        const wheelFL = gltfWheels.scene.clone()\r\n        wheelFL.position.set(0, 0, 2.45)\r\n        carGroup.add(wheelFL)\r\n\r\n        const wheelFR = gltfWheels.scene.clone()\r\n        wheelFR.position.set(0, 0, 2.45)\r\n        wheelFR.scale.set(-1, 1, 1)\r\n        carGroup.add(wheelFR)\r\n\r\n        const wheelRR = gltfWheels.scene.clone()\r\n        wheelRR.position.set(0, 0, 0)\r\n        wheelRR.scale.set(-1, 1, 1)\r\n        carGroup.add(wheelRR)\r\n\r\n        // Wheel animations\r\n        anims.mixerWheels = new THREE.AnimationMixer(new THREE.AnimationObjectGroup(gltfWheels.scene, wheelFL, wheelFR, wheelRR))\r\n        anims.actWheelsRot = anims.mixerWheels.clipAction(gltfWheels.animations[0])\r\n        anims.actTiresRot = anims.mixerWheels.clipAction(gltfWheels.animations[1])\r\n\r\n        // Setup lights\r\n        gltfLights.scene.scale.set(1.0, 1.0, 1.0)\r\n        carGroup.add(gltfLights.scene)\r\n\r\n        // Light animations\r\n        anims.mixerLights = new THREE.AnimationMixer(gltfLights.scene)\r\n        for (let i = 0; i < 5; i++) {\r\n            const key = `actLights${i}`\r\n            anims[key] = anims.mixerLights.clipAction(gltfLights.animations[i])\r\n            anims[key].setLoop(THREE.LoopOnce)\r\n            anims[key].clampWhenFinished = true\r\n        }\r\n\r\n        // Spotlights\r\n        const { left: headLightL, right: headLightR } = createHeadlightSpots({ intensity: anims.lightsIntensity })\r\n        anims.headLightL = headLightL\r\n        anims.headLightR = headLightR\r\n        carGroup.add(anims.headLightL)\r\n        carGroup.add(anims.headLightL.target)\r\n        carGroup.add(anims.headLightR)\r\n        carGroup.add(anims.headLightR.target)\r\n\r\n        // Debug UI for headlights\r\n        dbgVehicle.add(anims, 'lights').name('Headlights')\r\n\r\n        // Solo buttons\r\n        setupSoloButtons(gltfCar.scene)\r\n\r\n        // Mark models as loaded\r\n        initState.modelsLoaded = true\r\n\r\n        loadingUI.remove()\r\n        console.log('✓ All models loaded successfully')\r\n    } catch (error) {\r\n        loadingUI.remove()\r\n        console.error('Failed to load models:', error)\r\n        showErrorUI(\r\n            'Failed to Load Models',\r\n            `Could not load required 3D models. Please check your connection and refresh the page.\\n\\nError: ${error.message}`,\r\n            false\r\n        )\r\n    }\r\n}\r\n\r\n/**\r\n * Setup solo buttons for audio perspectives\r\n */\r\nfunction setupSoloButtons(carScene) {\r\n    const intakeSoloBtn = createLineButton({ \r\n        screenAnchor: new THREE.Vector2(-0.5, -0.8), \r\n        targetLocalPos: new THREE.Vector3(0, 0.2, 2.1), \r\n        targetObject: carScene, \r\n        label: 'Intake', \r\n        color: SoloBtnColors.INTAKE \r\n    })\r\n    const exhaustSoloBtn = createLineButton({ \r\n        screenAnchor: new THREE.Vector2(0.5, -0.8), \r\n        targetLocalPos: new THREE.Vector3(-0.5, 0.3, -2.0), \r\n        targetObject: carScene, \r\n        label: 'Exhaust', \r\n        color: SoloBtnColors.EXHAUST \r\n    })\r\n    const interiorSoloBtn = createLineButton({ \r\n        screenAnchor: new THREE.Vector2(0.0, -0.8), \r\n        targetLocalPos: new THREE.Vector3(0.0, 0.1, -0.2), \r\n        targetObject: carScene, \r\n        label: 'Interior', \r\n        color: SoloBtnColors.INTERIOR \r\n    })\r\n\r\n    // Add lines to scene and store buttons for updates\r\n    ;[intakeSoloBtn, exhaustSoloBtn, interiorSoloBtn].forEach(btn => {\r\n        scene.add(btn.line)\r\n        lineButtons.push(btn)\r\n\r\n        // Solo button click event\r\n        btn.button.addEventListener('click', () => {\r\n            // Clicked same button again: reset to no solo\r\n            if (SoloState[btn.button.textContent.toUpperCase()] === soloState) {\r\n                soloState = SoloState.MIX\r\n\r\n                // Reset all button styles\r\n                lineButtons.forEach(otherBtn => {\r\n                    if (otherBtn !== btn) {\r\n                        otherBtn.button.style.backgroundColor = colorToHex(SoloBtnColors[otherBtn.button.textContent.toUpperCase()])\r\n                        otherBtn.button.style.color = `#272727ff`\r\n                        otherBtn.line.visible = true\r\n                        otherBtn.button.dimmed = false\r\n                    }\r\n                })\r\n\r\n                // If emitter debuggers are visible, ensure emitterDebuggers are all visible\r\n                if (dbgAudioSettings['Emitters']) {\r\n                    emitterDebuggers.forEach(helper => helper.visible = true)\r\n                }\r\n            } else {\r\n                // New solo button selected\r\n                soloState = SoloState[btn.button.textContent.toUpperCase()]\r\n\r\n                // Darken background color of other buttons\r\n                lineButtons.forEach(otherBtn => {\r\n                    if (otherBtn !== btn) {\r\n                        otherBtn.button.style.backgroundColor = `#444444`\r\n                        otherBtn.button.style.color = `#888888`\r\n                        otherBtn.line.visible = false\r\n                        otherBtn.button.dimmed = true\r\n\r\n                        // If emitter debuggers are visible, hide non-solo emitter debuggers\r\n                        if (dbgAudioSettings['Emitters']) {\r\n                            const posKey = otherBtn.button.textContent.toLowerCase()\r\n                            const helper = emitterDebuggers.get(posKey)\r\n                            if (helper) helper.visible = false\r\n                        }\r\n                    } else {\r\n                        otherBtn.button.style.color = `#272727ff`\r\n                        otherBtn.line.visible = true\r\n                        otherBtn.button.dimmed = false\r\n\r\n                        // If emitter debuggers are visible, ensure this one is visible\r\n                        if (dbgAudioSettings['Emitters']) {\r\n                            const posKey = otherBtn.button.textContent.toLowerCase()\r\n                            const helper = emitterDebuggers.get(posKey)\r\n                            if (helper) helper.visible = true\r\n                        }\r\n                    }\r\n                })\r\n            }\r\n        })\r\n    })\r\n\r\n    // Line button visibility\r\n    const buttonVisibility = { 'Solo Buttons': true }\r\n    dbgAudioMicPersp = dbgAudio.add(buttonVisibility, 'Solo Buttons').onChange(visible => {\r\n        intakeSoloBtn.setVisible(visible)\r\n        exhaustSoloBtn.setVisible(visible)\r\n        interiorSoloBtn.setVisible(visible)\r\n    })\r\n}\r\n\r\n// Legacy callback-based loading (now replaced by async initializeModels)\r\n// Keeping commented for reference in case of rollback needed\r\n/*\r\n// Car\r\ngltfLoader.load('./model/rx7/rx7.gltf',\r\n    (gltfCar) => {\r\n        console.log(\"Loaded Model - RX7\", gltfCar)\r\n\r\n        gltfCar.scene.scale.set(1.0, 1.0, 1.0)\r\n        carGroup.add(gltfCar.scene)\r\n        particleSystem.initialize()\r\n\r\n        // Solo buttons\r\n        let intakeSoloBtn, exhaustSoloBtn, interiorSoloBtn\r\n        intakeSoloBtn = createLineButton({ screenAnchor: new THREE.Vector2(-0.5, -0.8), targetLocalPos: new THREE.Vector3(0, 0.2, 2.1), targetObject: gltfCar.scene, label: 'Intake', color: SoloBtnColors.INTAKE })\r\n        exhaustSoloBtn = createLineButton({ screenAnchor: new THREE.Vector2(0.5, -0.8), targetLocalPos: new THREE.Vector3(-0.5, 0.3, -2.0), targetObject: gltfCar.scene, label: 'Exhaust', color: SoloBtnColors.EXHAUST })\r\n        interiorSoloBtn = createLineButton({ screenAnchor: new THREE.Vector2(0.0, -0.8), targetLocalPos: new THREE.Vector3(0.0, 0.1, -0.2), targetObject: gltfCar.scene, label: 'Interior', color: SoloBtnColors.INTERIOR })\r\n\r\n            // Add lines to scene and store buttons for updates\r\n            ;[intakeSoloBtn, exhaustSoloBtn, interiorSoloBtn].forEach(btn => {\r\n                scene.add(btn.line)\r\n                lineButtons.push(btn)\r\n\r\n                // Solo button click event\r\n                btn.button.addEventListener('click', () => {\r\n                    // Clicked same button again: reset to no solo\r\n                    if (SoloState[btn.button.textContent.toUpperCase()] === soloState) {\r\n                        soloState = SoloState.MIX\r\n\r\n                        // Reset all button styles\r\n                        lineButtons.forEach(otherBtn => {\r\n                            if (otherBtn !== btn) {\r\n                                otherBtn.button.style.backgroundColor = colorToHex(SoloBtnColors[otherBtn.button.textContent.toUpperCase()])\r\n                                otherBtn.button.style.color = `#272727ff`\r\n                                otherBtn.line.visible = true\r\n                                otherBtn.button.dimmed = false\r\n                            }\r\n                        })\r\n\r\n                        // If emitter debuggers are visible, ensure emitterDebuggers are all visible\r\n                        if (dbgAudioSettings['Emitters']) {\r\n                            emitterDebuggers.forEach(helper => helper.visible = true)\r\n                        }\r\n\r\n                    } else {\r\n                        // New solo button selected\r\n                        soloState = SoloState[btn.button.textContent.toUpperCase()]\r\n\r\n                        // Darken background color of other buttons\r\n                        lineButtons.forEach(otherBtn => {\r\n                            if (otherBtn !== btn) {\r\n                                otherBtn.button.style.backgroundColor = `#444444`\r\n                                otherBtn.button.style.color = `#888888`\r\n                                otherBtn.line.visible = false\r\n                                otherBtn.button.dimmed = true\r\n\r\n                                // If emitter debuggers are visible, hide non-solo emitter debuggers\r\n                                if (dbgAudioSettings['Emitters']) {\r\n                                    const posKey = otherBtn.button.textContent.toLowerCase()\r\n                                    const helper = emitterDebuggers.get(posKey)\r\n                                    if (helper) helper.visible = false\r\n                                }\r\n                            } else {\r\n                                otherBtn.button.style.color = `#272727ff`\r\n                                otherBtn.line.visible = true\r\n                                otherBtn.button.dimmed = false\r\n\r\n                                // If emitter debuggers are visible, ensure this one is visible\r\n                                if (dbgAudioSettings['Emitters']) {\r\n                                    const posKey = otherBtn.button.textContent.toLowerCase()\r\n                                    const helper = emitterDebuggers.get(posKey)\r\n                                    if (helper) helper.visible = true\r\n                                }\r\n                            }\r\n                        })\r\n                    }\r\n                })\r\n            })\r\n\r\n        // Line button visibility\r\n        const buttonVisibility = { 'Solo Buttons': true }\r\n        dbgAudioMicPersp = dbgAudio.add(buttonVisibility, 'Solo Buttons').onChange(visible => {\r\n            intakeSoloBtn.setVisible(visible)\r\n            exhaustSoloBtn.setVisible(visible)\r\n            interiorSoloBtn.setVisible(visible)\r\n        })\r\n    }\r\n)\r\n\r\n// Wheels\r\ngltfLoader.load('./model/rx7_wheels/rx7_wheels.gltf',\r\n    (wheelRL) => {\r\n        console.log(\"Loaded Model - Wheel\", wheelRL)\r\n\r\n        // Rear left\r\n        wheelRL.scene.scale.set(1.0, 1.0, 1.0)\r\n        wheelRL.scene.position.set(0, 0, 0)\r\n        carGroup.add(wheelRL.scene)\r\n\r\n        // Front left\r\n        const wheelFL = wheelRL.scene.clone()\r\n        wheelFL.position.set(0, 0, 2.45)\r\n        carGroup.add(wheelFL)\r\n\r\n        // Front right\r\n        const wheelFR = wheelRL.scene.clone()\r\n        wheelFR.position.set(0, 0, 2.45)\r\n        wheelFR.scale.set(-1, 1, 1)\r\n        carGroup.add(wheelFR)\r\n\r\n        // Rear right\r\n        const wheelRR = wheelRL.scene.clone()\r\n        wheelRR.position.set(0, 0, 0)\r\n        wheelRR.scale.set(-1, 1, 1)\r\n        carGroup.add(wheelRR)\r\n\r\n        // Wheel anims\r\n        anims.mixerWheels = new THREE.AnimationMixer(new THREE.AnimationObjectGroup(wheelRL.scene, wheelFL, wheelFR, wheelRR))\r\n        anims.actWheelsRot = anims.mixerWheels.clipAction(wheelRL.animations[0]) // Wheel rotation\r\n        anims.actTiresRot = anims.mixerWheels.clipAction(wheelRL.animations[1]) // Tire rotation\r\n    }\r\n)\r\n\r\n// Headlights\r\ngltfLoader.load('./model/rx7_lights/rx7_lights.gltf',\r\n    (gltfLights) => {\r\n        console.log(\"Loaded Model - Headlights\", gltfLights)\r\n\r\n        gltfLights.scene.scale.set(1.0, 1.0, 1.0)\r\n        carGroup.add(gltfLights.scene)\r\n\r\n        // Animations\r\n        anims.mixerLights = new THREE.AnimationMixer(gltfLights.scene)\r\n        for (let i = 0; i < 5; i++) {\r\n            const key = `actLights${i}`\r\n            anims[key] = anims.mixerLights.clipAction(gltfLights.animations[i])\r\n            anims[key].setLoop(THREE.LoopOnce)\r\n            anims[key].clampWhenFinished = true\r\n        }\r\n\r\n        // Spotlights\r\n        const { left: headLightL, right: headLightR } = createHeadlightSpots({ intensity: anims.lightsIntensity })\r\n        anims.headLightL = headLightL\r\n        anims.headLightR = headLightR\r\n        carGroup.add(anims.headLightL)\r\n        carGroup.add(anims.headLightL.target)\r\n        carGroup.add(anims.headLightR)\r\n        carGroup.add(anims.headLightR.target)\r\n\r\n        // Dbg\r\n        dbgVehicle.add(anims, 'lights').name('Headlights')\r\n    }\r\n)\r\n*/\r\n\r\n// Call the new async initialization\r\ninitializeModels().then(() => {\r\n    // Check if everything is ready\r\n    checkSceneReady()\r\n}).catch(err => {\r\n    console.error('Critical error during model initialization:', err)\r\n})\r\n\r\n/**\r\n * Check if all async operations are complete and mark scene as ready\r\n */\r\nfunction checkSceneReady() {\r\n    if (initState.modelsLoaded && initState.audioLoaded && !initState.sceneReady) {\r\n        initState.sceneReady = true\r\n        console.log('✓ Scene fully initialized and ready')\r\n    }\r\n}\r\n\r\n/**\r\n * Lighting (uses defaults from constants)\r\n */\r\nconst hemiLight = new THREE.HemisphereLight(\r\n    LightingDefaults.hemisphere.skyColor,\r\n    LightingDefaults.hemisphere.groundColor,\r\n    LightingDefaults.hemisphere.intensity\r\n)\r\nhemiLight.position.set(0, 100, 0)\r\nscene.add(hemiLight)\r\n\r\nconst ambientLight = new THREE.AmbientLight(\r\n    LightingDefaults.ambient.color,\r\n    LightingDefaults.ambient.intensity\r\n)\r\nscene.add(ambientLight)\r\n\r\nconst directionalLights = createDirectionalLights([\r\n    { color: LightingDefaults.directional[0].color, intensity: LightingDefaults.directional[0].intensity, position: [5, 3, 4] },\r\n    { color: LightingDefaults.directional[1].color, intensity: LightingDefaults.directional[1].intensity, position: [8, 3, -1] },\r\n    { color: LightingDefaults.directional[2].color, intensity: LightingDefaults.directional[2].intensity, position: [-5, 5, -5] }\r\n])\r\ndirectionalLights.forEach(l => scene.add(l))\r\n\r\n// Baseline lighting snapshot (built after renderer init)\r\nlet baseLightingSnapshot = null\r\nfunction buildLightingSnapshot() {\r\n    baseLightingSnapshot = {\r\n        ambient: { color: ambientLight.color.getHex(), intensity: ambientLight.intensity },\r\n        hemi: { sky: hemiLight.color.getHex(), ground: hemiLight.groundColor.getHex(), intensity: hemiLight.intensity },\r\n        directional: directionalLights.map(dl => ({ color: dl.color.getHex(), intensity: dl.intensity })),\r\n        fog: scene.fog ? { color: scene.fog.color.getHex(), density: scene.fog.density } : null,\r\n        exposure: (typeof renderer !== 'undefined' && typeof renderer.toneMappingExposure === 'number') ? renderer.toneMappingExposure : 1.0\r\n    }\r\n}\r\nfunction resetLightingFromSnapshot() {\r\n    if (!baseLightingSnapshot) buildLightingSnapshot()\r\n    ambientLight.color.setHex(baseLightingSnapshot.ambient.color)\r\n    ambientLight.intensity = baseLightingSnapshot.ambient.intensity\r\n    hemiLight.color.setHex(baseLightingSnapshot.hemi.sky)\r\n    hemiLight.groundColor.setHex(baseLightingSnapshot.hemi.ground)\r\n    hemiLight.intensity = baseLightingSnapshot.hemi.intensity\r\n    directionalLights.forEach((dl,i) => {\r\n        dl.color.setHex(baseLightingSnapshot.directional[i].color)\r\n        dl.intensity = baseLightingSnapshot.directional[i].intensity\r\n    })\r\n    if (scene.fog && baseLightingSnapshot.fog) {\r\n        scene.fog.color.setHex(baseLightingSnapshot.fog.color)\r\n        scene.fog.density = baseLightingSnapshot.fog.density\r\n    }\r\n    if (baseLightingSnapshot && typeof renderer !== 'undefined' && typeof renderer.toneMappingExposure === 'number') {\r\n        renderer.toneMappingExposure = baseLightingSnapshot.exposure\r\n    }\r\n}\r\n\r\nfunction applyLightingOverride(override) {\r\n    if (!override) {\r\n        resetLightingFromSnapshot()\r\n        return\r\n    }\r\n    if (override.ambient) {\r\n        if (override.ambient.color !== undefined) ambientLight.color.setHex(override.ambient.color)\r\n        if (override.ambient.intensity !== undefined) ambientLight.intensity = override.ambient.intensity\r\n    }\r\n    if (override.hemisphere) {\r\n        if (override.hemisphere.skyColor !== undefined) hemiLight.color.setHex(override.hemisphere.skyColor)\r\n        if (override.hemisphere.groundColor !== undefined) hemiLight.groundColor.setHex(override.hemisphere.groundColor)\r\n        if (override.hemisphere.intensity !== undefined) hemiLight.intensity = override.hemisphere.intensity\r\n    }\r\n    if (override.directional && Array.isArray(override.directional)) {\r\n        directionalLights.forEach((dl, i) => {\r\n            const ov = override.directional[i]\r\n            if (!ov) return\r\n            if (ov.color !== undefined) dl.color.setHex(ov.color)\r\n            if (ov.intensity !== undefined) dl.intensity = ov.intensity\r\n        })\r\n    }\r\n}\r\n\r\n/**\r\n * Sizes\r\n */\r\nconst sizes = {\r\n    width: window.innerWidth,\r\n    height: window.innerHeight\r\n}\r\n\r\n// Store resize handler so we can remove it if needed\r\nconst handleResize = () => {\r\n    sizes.width = window.innerWidth\r\n    sizes.height = window.innerHeight\r\n\r\n    camera.aspect = sizes.width / sizes.height\r\n    camera.updateProjectionMatrix()\r\n\r\n    renderer.setSize(sizes.width, sizes.height)\r\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\r\n}\r\n\r\nwindow.addEventListener('resize', handleResize)\r\n\r\n/**\r\n * Camera\r\n */\r\n// Base camera\r\nconst camera = new THREE.PerspectiveCamera(75, sizes.width / sizes.height, 0.1, 100)\r\ncamera.position.set(4, 2, 3)\r\nscene.add(camera)\r\n\r\n// Controls\r\nconst controls = new OrbitControls(camera, canvas)\r\ncontrols.target.set(0, 0.75, 0)\r\ncontrols.enableDamping = true\r\n\r\n/**\r\n * Renderer\r\n */\r\nconst renderer = new THREE.WebGLRenderer({\r\n    canvas: canvas\r\n})\r\nrenderer.outputColorSpace = THREE.LinearSRGBColorSpace\r\nrenderer.shadowMap.enabled = true\r\nrenderer.shadowMap.type = THREE.PCFSoftShadowMap\r\nrenderer.setSize(sizes.width, sizes.height)\r\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\r\n\r\n// Build baseline lighting snapshot now that renderer exists\r\nbuildLightingSnapshot()\r\nresetLightingFromSnapshot()\r\n\r\n/**\r\n * Audio\r\n */\r\n// Listener\r\nconst listener = new THREE.AudioListener();\r\ncamera.add(listener);\r\n\r\n// Handle audio context state and autoplay policy\r\nconst audioContext = listener.context\r\nlet audioEnabled = false\r\n\r\n// Audio emitters for each position\r\nconst audioEmitters = {\r\n    mix: new THREE.PositionalAudio(listener),\r\n    intake: new THREE.PositionalAudio(listener),\r\n    exhaust: new THREE.PositionalAudio(listener),\r\n    interior: new THREE.PositionalAudio(listener)\r\n};\r\n\r\nconsole.log(\"Audio Emitters:\", audioEmitters);\r\n\r\n// Add emitters to car at appropriate positions & starting volume\r\nObject.entries(audioEmitters).forEach(([pos, emitter]) => {\r\n    carGroup.add(emitter);\r\n    switch (pos) {\r\n        case 'intake':\r\n            emitter.position.set(0, 0.2, 2.1); // Front of car\r\n            emitter.setVolume(0);\r\n            // Point intake sound forward (along +Z axis)\r\n            emitter.setDirectionalCone(\r\n                THREE.MathUtils.degToRad(ConeEmitterSettings.innerAngle), \r\n                THREE.MathUtils.degToRad(ConeEmitterSettings.outerAngle), \r\n                ConeEmitterSettings.outerGain\r\n            );\r\n            break;\r\n        case 'exhaust':\r\n            emitter.position.set(-0.5, 0.3, -2.0); // Rear of car\r\n            emitter.setVolume(0);\r\n            // Point exhaust sound backward (along -Z axis)\r\n            // Rotate the emitter 180 degrees around Y axis to point backward\r\n            emitter.rotation.y = Math.PI;\r\n            emitter.setDirectionalCone(\r\n                THREE.MathUtils.degToRad(ConeEmitterSettings.innerAngle), \r\n                THREE.MathUtils.degToRad(ConeEmitterSettings.outerAngle), \r\n                ConeEmitterSettings.outerGain\r\n            );\r\n            break;\r\n        case 'interior':\r\n            emitter.position.set(0.0, 0.5, -0.2); // Inside car\r\n            emitter.setVolume(0);\r\n            break;\r\n        case 'mix':\r\n            emitter.position.set(0, 0, 0); // Center for mix\r\n            emitter.setVolume(1.0);\r\n            break;\r\n        default:\r\n            emitter.position.set(0, 0, 0);\r\n            break;\r\n    }\r\n});\r\n\r\nconst soundEngine = {\r\n    // Buffer storage per position\r\n    buffers: {\r\n        mix: {},\r\n        intake: { ignitionOn: null, idle: null, ignitionOff: null },\r\n        exhaust: { ignitionOn: null, idle: null, ignitionOff: null },\r\n        interior: { ignitionOn: null, idle: null, ignitionOff: null }\r\n    },\r\n\r\n    // Track current active emitter for smooth transitions\r\n    currentEmitter: null,\r\n\r\n    setEmitterVolumes(currSoloState) {\r\n        // Get individual emitters (excluding mix)\r\n        const individualEmitters = ['intake', 'exhaust', 'interior'];\r\n\r\n        individualEmitters.forEach(pos => {\r\n            const emitter = audioEmitters[pos];\r\n            if (!emitter) return;\r\n\r\n            // Base target volume (before global multiplier)\r\n            const baseTarget = (currSoloState === SoloState.MIX)\r\n                ? EmitterVolMults.MIX\r\n                : (pos === currSoloState)\r\n                    ? 1.0\r\n                    : 0.0;\r\n\r\n            // Apply global multiplier\r\n            const multiplier = EmitterVolMults[pos.toUpperCase()] !== undefined ? EmitterVolMults[pos.toUpperCase()] : 1.0\r\n            const targetVolume = Math.max(0, Math.min(1, baseTarget * multiplier))\r\n\r\n            // Smooth volume transition\r\n            const currentVol = emitter.getVolume();\r\n            if (currentVol < targetVolume) {\r\n                emitter.setVolume(Math.min(targetVolume, currentVol + 0.2));\r\n            } else if (currentVol > targetVolume) {\r\n                emitter.setVolume(Math.max(targetVolume, currentVol - 0.2));\r\n            }\r\n        });\r\n\r\n        // Always keep mix emitter silent as we're creating our own mix\r\n        audioEmitters.mix.setVolume(0);\r\n    },\r\n\r\n    ignitionOn: () => {\r\n        // Resume audio context on first user interaction (handles autoplay policy)\r\n        if (audioContext.state === 'suspended') {\r\n            audioContext.resume().then(() => {\r\n                audioEnabled = true\r\n                console.log('Audio context enabled via user interaction')\r\n            }).catch(err => {\r\n                console.error('Failed to resume audio context:', err)\r\n            })\r\n        }\r\n\r\n        // Start ignition for all positions\r\n        Object.entries(audioEmitters).forEach(([pos, emitter]) => {\r\n            if (pos === 'mix') return; // No ignition sound for mix\r\n\r\n            playPositionalAudio(audioLoader, emitter, `./audio/${pos}/ignitionOn.ogg`, {\r\n                store: soundEngine.buffers[pos],\r\n                storeKey: 'ignitionOn',\r\n                loop: false,\r\n                onEnded: () => {\r\n                    // After ignition sound ends, start engine idle loop for this position\r\n                    playPositionalAudio(audioLoader, emitter, `./audio/${pos}/idle.ogg`, {\r\n                        store: soundEngine.buffers[pos],\r\n                        storeKey: 'idle',\r\n                        loop: true,\r\n                        onEnded: () => { }\r\n                    });\r\n                }\r\n            });\r\n        });\r\n\r\n        driveState = DriveState.ACCEL;\r\n        \r\n        // Guard against accessing animation mixers before models are loaded\r\n        if (anims.mixerWheels) {\r\n            anims.mixerWheels.stopAllAction();\r\n            anims.actWheelsRot.play();\r\n            anims.actTiresRot.play();\r\n            anims.mixerWheels.timeScale = 0.01;\r\n        }\r\n\r\n        // Guard against accessing debug UI before it's initialized\r\n        if (dbgVehIgnOn) dbgVehIgnOn.hide();\r\n        if (dbgVehIgnOff) dbgVehIgnOff.show();\r\n    },\r\n\r\n    ignitionOff: () => {\r\n        // Play ignition off for all positions\r\n        Object.entries(audioEmitters).forEach(([pos, emitter]) => {\r\n            if (pos === 'mix') return; // No ignition sound for mix\r\n\r\n            playPositionalAudio(audioLoader, emitter, `./audio/${pos}/ignitionOff.ogg`, {\r\n                store: soundEngine.buffers[pos],\r\n                storeKey: 'ignitionOff',\r\n                loop: false,\r\n                onEnded: () => {\r\n                    emitter.stop();\r\n                }\r\n            });\r\n        });\r\n\r\n        driveState = DriveState.DECEL;\r\n\r\n        // Guard against accessing debug UI before it's initialized\r\n        if (dbgVehIgnOn) dbgVehIgnOn.show();\r\n        if (dbgVehIgnOff) dbgVehIgnOff.hide();\r\n    },\r\n\r\n    load() {\r\n        // Cache buffers for all positions\r\n        const engine = this\r\n        const loadPromises = []\r\n        \r\n        Object.keys(engine.buffers).forEach(pos => {\r\n            Object.keys(engine.buffers[pos]).forEach(key => {\r\n                const promise = loadAudioFile(audioLoader, `./audio/${pos}/${key}.ogg`)\r\n                    .then(buffer => {\r\n                        engine.buffers[pos][key] = buffer\r\n                    })\r\n                    .catch(err => {\r\n                        console.error(`Failed to load audio ${pos}/${key}:`, err)\r\n                        // Non-blocking error for individual audio files\r\n                    })\r\n                loadPromises.push(promise)\r\n            })\r\n        })\r\n\r\n        // Wait for all audio to load\r\n        Promise.all(loadPromises).then(() => {\r\n            initState.audioLoaded = true\r\n            console.log('✓ All audio files loaded')\r\n            checkSceneReady()\r\n        }).catch(() => {\r\n            initState.audioLoaded = true // Mark as loaded even with errors\r\n            showErrorUI(\r\n                'Audio Load Warning',\r\n                'Some audio files failed to load. The experience may be incomplete.',\r\n                false\r\n            )\r\n            checkSceneReady()\r\n        })\r\n    },\r\n\r\n    applyConvolutionReverb(reverbBuffer) {\r\n        // Uses latest selected reverb name stored on soundEngine\r\n        const blend = this.currentReverbBlend ?? 0.5\r\n        Object.values(audioEmitters).forEach(emitter => {\r\n            // Remove existing filter graph if present\r\n            if (emitter._reverbNodes) {\r\n                // Disconnect old nodes\r\n                try {\r\n                    const { dryGain, wetGain, convolver } = emitter._reverbNodes\r\n                    dryGain.disconnect()\r\n                    wetGain.disconnect()\r\n                    convolver.disconnect()\r\n                } catch(_) {}\r\n                emitter._reverbNodes = null\r\n            }\r\n\r\n            const ctx = listener.context\r\n            const convolver = ctx.createConvolver()\r\n            convolver.buffer = reverbBuffer\r\n\r\n            // Gain nodes for wet/dry mix; apply normalization to wet path only\r\n            const wetGain = ctx.createGain()\r\n            const dryGain = ctx.createGain()\r\n            wetGain.gain.value = blend * this.currentReverbScalingFactor\r\n            dryGain.gain.value = (1.0 - blend) * this.currentReverbScalingFactor\r\n\r\n            // PositionalAudio has .panner as its output prior to filters\r\n            const sourceNode = emitter.panner\r\n            if (!sourceNode) {\r\n                console.warn('PositionalAudio panner node missing; cannot apply reverb graph')\r\n                return\r\n            }\r\n\r\n            // Connect graph: source -> dryGain -> destination; source -> convolver -> wetGain -> destination\r\n            sourceNode.connect(dryGain)\r\n            dryGain.connect(ctx.destination)\r\n            sourceNode.connect(convolver)\r\n            convolver.connect(wetGain)\r\n            wetGain.connect(ctx.destination)\r\n\r\n            emitter._reverbNodes = { convolver, wetGain, dryGain }\r\n        })\r\n    },\r\n\r\n    removeConvolutionReverb() {\r\n        // Remove custom filter graph (disconnect reverb nodes)\r\n        Object.values(audioEmitters).forEach(em => {\r\n            if (em._reverbNodes) {\r\n                try {\r\n                    const { dryGain, wetGain, convolver } = em._reverbNodes\r\n                    dryGain.disconnect()\r\n                    wetGain.disconnect()\r\n                    convolver.disconnect()\r\n                } catch (err) {\r\n                    console.warn('Error disconnecting reverb nodes:', err)\r\n                }\r\n                em._reverbNodes = null\r\n            }\r\n        })\r\n        this.currentReverbBlend = null\r\n        this.currentReverbScalingFactor = null\r\n    }\r\n}\r\nsoundEngine.load()\r\n\r\n// Convolution reverb presets with blend (0..1 wet mix) and scaling factor (to better match levels between presets)\r\nconst reverbMap = {\r\n    'Garage': { path: './audio/ir/garage.ogg', blend: 0.8, scalingFactor: 0.33 },\r\n    'Outdoors': { path: './audio/ir/outdoors.ogg', blend: 0.6, scalingFactor: 0.2 }\r\n}\r\nconst reverbParams = { Reverb: 'None' }\r\ndbgAudioReverb = dbgAudio.add(reverbParams, 'Reverb', ['None', ...Object.keys(reverbMap)]).name('Conv. Reverb').onChange(name => {\r\n    if (name === 'None') {\r\n        soundEngine.removeConvolutionReverb()\r\n        return\r\n    }\r\n    const preset = reverbMap[name]\r\n    if (!preset) return\r\n    const { path, blend = 0.5, scalingFactor = 1.0 } = preset\r\n    soundEngine.currentReverbBlend = blend\r\n    soundEngine.currentReverbScalingFactor = scalingFactor\r\n    loadAudioFile(new THREE.AudioLoader(), path).then((buffer) => {\r\n        soundEngine.applyConvolutionReverb(buffer)\r\n    }).catch(err => {\r\n        console.error('Failed to load reverb:', err)\r\n        showErrorUI('Reverb Load Failed', `Could not load reverb preset: ${err.message}`, false)\r\n    })\r\n})\r\n\r\n// Add meters\r\nconst audioMeters = createMixer({ emitters: audioEmitters, initialVisible: true })\r\ndbgAudioMeters = dbgAudio.add(dbgAudioSettings, 'Meters').onChange(v => audioMeters.setVisible(v))\r\n\r\n// Add performance monitor\r\nconst perfMonitor = createPerformanceMonitor({ initialVisible: false })\r\ndbgPerfStats = dbgPerformance.add(dbgPerfSettings, 'Show Stats').onChange(v => perfMonitor.setVisible(v))\r\n\r\n// Create emitter position debuggers (initially hidden)\r\nconst emitterDebuggers = new Map()\r\nObject.entries(audioEmitters).forEach(([pos, emitter]) => {\r\n    if (pos === 'mix') return;\r\n    \r\n    // Configure helper based on emitter type\r\n    const helperConfig = {\r\n        color: SoloBtnColors[pos.toUpperCase()] || 0xffff00,\r\n        size: 0.4\r\n    }\r\n    \r\n    // Add cone visualization for directional emitters\r\n    if (pos === 'intake') {\r\n        helperConfig.showCone = true\r\n        helperConfig.coneAngle = ConeEmitterSettings.innerAngle\r\n        helperConfig.coneDirection = new THREE.Vector3(0, 0, 1) // Forward\r\n    } else if (pos === 'exhaust') {\r\n        helperConfig.showCone = true\r\n        helperConfig.coneAngle = ConeEmitterSettings.innerAngle\r\n        helperConfig.coneDirection = new THREE.Vector3(0, 0, -1) // Backward\r\n    }\r\n    \r\n    const helper = createAudioEmitterDebugger(emitter, helperConfig)\r\n    helper.visible = false\r\n    carGroup.add(helper)\r\n    emitterDebuggers.set(pos, helper)\r\n})\r\n\r\n// Add debug toggle for emitter position helpers\r\ndbgAudioEmitters = dbgAudio.add(dbgAudioSettings, 'Emitters').onChange(v => {\r\n    emitterDebuggers.forEach(helper => helper.visible = v)\r\n})\r\n\r\n/**\r\n * Debug\r\n */\r\nconst fakeListOfCars = ['Mazda RX-7 FD']\r\ndbgVehCarSelect = dbgVehicle.add({ car: fakeListOfCars[0] }, 'car', fakeListOfCars).name('Car').onChange(v => {})\r\ndbgVehIgnOn = dbgVehicle.add(soundEngine, 'ignitionOn').name('Ignition On')\r\ndbgVehIgnOff = dbgVehicle.add(soundEngine, 'ignitionOff').name('Ignition Off').hide()\r\n\r\n/**\r\n * Cleanup & Resource Management\r\n */\r\nfunction disposeAll() {\r\n    console.log('Cleaning up resources...')\r\n\r\n    // Stop animation loop\r\n    if (animationFrameId) {\r\n        cancelAnimationFrame(animationFrameId)\r\n        animationFrameId = null\r\n    }\r\n\r\n    // Clean up line buttons\r\n    lineButtons.forEach(btn => {\r\n        if (btn && btn.dispose) {\r\n            btn.dispose()\r\n        }\r\n    })\r\n    lineButtons.length = 0\r\n\r\n    // Clean up emitter debuggers\r\n    emitterDebuggers.forEach(helper => {\r\n        disposeObject(helper)\r\n    })\r\n    emitterDebuggers.clear()\r\n\r\n    // Clean up audio meters\r\n    if (audioMeters && audioMeters.dispose) {\r\n        audioMeters.dispose()\r\n    }\r\n\r\n    // Clean up performance monitor\r\n    if (perfMonitor && perfMonitor.dispose) {\r\n        perfMonitor.dispose()\r\n    }\r\n\r\n    // Clean up audio emitters\r\n    Object.values(audioEmitters).forEach(emitter => {\r\n        disposeAudioEmitter(emitter)\r\n    })\r\n\r\n    // Clean up particle system\r\n    if (particleSystem && particleSystem.dispose) {\r\n        particleSystem.dispose()\r\n    }\r\n\r\n    // Dispose current HDR texture\r\n    if (currentHDRTexture) {\r\n        disposeTexture(currentHDRTexture)\r\n        currentHDRTexture = null\r\n    }\r\n\r\n    // Dispose scene objects\r\n    if (carGroup) {\r\n        disposeObject(carGroup)\r\n    }\r\n    if (floor) {\r\n        disposeObject(floor)\r\n    }\r\n\r\n    // Clean up animation mixers\r\n    if (anims.mixerWheels) {\r\n        anims.mixerWheels.stopAllAction()\r\n        anims.mixerWheels = null\r\n    }\r\n    if (anims.mixerLights) {\r\n        anims.mixerLights.stopAllAction()\r\n        anims.mixerLights = null\r\n    }\r\n\r\n    // Dispose lights\r\n    if (hemiLight) {\r\n        scene.remove(hemiLight)\r\n    }\r\n    if (ambientLight) {\r\n        scene.remove(ambientLight)\r\n    }\r\n    directionalLights.forEach(light => {\r\n        scene.remove(light)\r\n        light.dispose()\r\n    })\r\n\r\n    // Dispose renderer\r\n    if (renderer) {\r\n        renderer.dispose()\r\n    }\r\n\r\n    // Dispose debug UI\r\n    if (dbg) {\r\n        dbg.destroy()\r\n    }\r\n\r\n    console.log('Cleanup complete')\r\n}\r\n\r\n// Store animation frame ID so we can cancel it\r\nlet animationFrameId = null\r\n\r\n// Track page visibility for performance optimization\r\nlet isPageVisible = !document.hidden\r\n\r\n// Pause simulation when tab is not visible\r\ndocument.addEventListener('visibilitychange', () => {\r\n    isPageVisible = !document.hidden\r\n    \r\n    if (isPageVisible) {\r\n        console.log('Tab visible - resuming simulation')\r\n        // Resume audio context if it was suspended\r\n        if (audioContext && audioContext.state === 'suspended') {\r\n            audioContext.resume().catch(err => {\r\n                console.warn('Failed to resume audio context:', err)\r\n            })\r\n        }\r\n    } else {\r\n        console.log('Tab hidden - pausing heavy computations')\r\n        audioContext.suspend()\r\n    }\r\n})\r\n\r\n// Clean up on page unload\r\nwindow.addEventListener('beforeunload', () => {\r\n    disposeAll()\r\n})\r\n\r\n/**\r\n * Main\r\n */\r\nconst clock = new THREE.Clock()\r\nlet previousTime = 0\r\n\r\nconst tick = () => {\r\n    const elapsedTime = clock.getElapsedTime()\r\n    const deltaTime = elapsedTime - previousTime\r\n    previousTime = elapsedTime\r\n\r\n    // Skip heavy computations when tab is not visible (but keep rendering for smooth resume)\r\n    if (isPageVisible) {\r\n        // Update animation mixers\r\n        if (anims.mixerWheels) {\r\n            anims.mixerWheels.update(deltaTime)\r\n\r\n            switch (driveState) {\r\n                case DriveState.ACCEL:\r\n                    while (anims.mixerWheels.timeScale < 1.0) {\r\n                        anims.mixerWheels.timeScale += deltaTime // Gradually increase timeScale to 1.0\r\n                        if (anims.mixerWheels.timeScale >= 1.0) {\r\n                            anims.mixerWheels.timeScale = 1.0\r\n                            driveState = DriveState.DRIVE\r\n                        }\r\n                    }\r\n                    break\r\n                case DriveState.DECEL:\r\n                    while (anims.mixerWheels.timeScale > 0.0) {\r\n                        anims.mixerWheels.timeScale -= deltaTime // Gradually decrease timeScale to 0.0\r\n                        if (anims.mixerWheels.timeScale <= 0.0) {\r\n                            anims.mixerWheels.timeScale = 0.0\r\n                            driveState = DriveState.STOP\r\n                            anims.mixerWheels.stopAllAction()\r\n                        }\r\n                    }\r\n                    break\r\n                case DriveState.DRIVE:\r\n                    // Maintain static RPM sounds\r\n                    break\r\n                case DriveState.STOP:\r\n                    // Play idle sounds\r\n                    break\r\n                default:\r\n                    // Do nothing, maintain current timeScale\r\n                    break\r\n            }\r\n        }\r\n\r\n        if (anims.mixerLights) {\r\n            anims.mixerLights.update(deltaTime)\r\n\r\n            // Set light intensity to headlight time animation progress\r\n            // Guard against accessing actions before they're initialized\r\n            if (anims.actLights0 && anims.headLightL && anims.headLightR) {\r\n                const headLightsIntensity = anims.lightsIntensity - (anims.actLights0.time / anims.actLights0.getClip().duration) * anims.lightsIntensity\r\n                anims.headLightL.intensity = anims.headLightR.intensity = headLightsIntensity\r\n            }\r\n        }\r\n\r\n        // Demo of car moving back and forth slightly\r\n        // #TODO: Hunker car backwards/forwards under acceleration/deceleration\r\n        carGroup.position.z = Math.sin(elapsedTime * 2) * 0.0125\r\n\r\n        // Update particle system\r\n        particleSystem.update(deltaTime, driveState)\r\n\r\n        // Update line buttons so they stay anchored to screen and car\r\n        if (lineButtons.length > 0) {\r\n            lineButtons.forEach(btn => {\r\n                try {\r\n                    btn.update(camera)\r\n                } catch (e) {\r\n                    // Defensive: ignore update errors for now\r\n                }\r\n            })\r\n        }\r\n\r\n        // Update audio emitter volumes for smooth transitions\r\n        soundEngine.setEmitterVolumes(soloState)\r\n\r\n        // Guard against accessing meters before initialization\r\n        if (audioMeters && audioMeters.update) {\r\n            audioMeters.update()\r\n        }\r\n    }\r\n\r\n    // Always update controls for smooth camera interaction\r\n    controls.update()\r\n\r\n    // Update performance monitor\r\n    perfMonitor.update()\r\n\r\n    // Render\r\n    renderer.render(scene, camera)\r\n\r\n    // Call tick again on the next frame\r\n    animationFrameId = window.requestAnimationFrame(tick)\r\n}\r\n\r\ntick()"],"names":["DriveState","SoloState","SoloBtnColors","EmitterVolMults","ConeEmitterSettings","LightingDefaults","EnvironmentPresets","checkWebGLSupport","canvas","gl","requiredExtensions","ext","err","checkWebAudioSupport","showErrorUI","title","message","blocking","existing","overlay","container","titleEl","messageEl","closeBtn","showLoadingUI","spinner","style","newMessage","loadGLTFModel","loader","path","onProgress","resolve","reject","gltf","error","loadAudioFile","buffer","loadHDRTexture","texture","disposeObject","object","i","material","disposeMaterial","prop","value","disposeTexture","disposeAudioEmitter","emitter","dryGain","wetGain","convolver","createDirectionalLight","color","intensity","mapSize","far","bounds","position","light","THREE.DirectionalLight","createDirectionalLights","configs","cfg","colorToHex","c","n","createAudioEmitterDebugger","size","showCone","coneAngle","coneDirection","THREE.Vector3","helper","THREE.Group","coneHeight","coneAngleRad","THREE.MathUtils","coneRadius","geometry","THREE.ConeGeometry","THREE.MeshBasicMaterial","THREE.DoubleSide","cone","THREE.Mesh","defaultDir","quaternion","THREE.Quaternion","tipGeometry","THREE.SphereGeometry","tipMaterial","tip","sphere","createHeadlightSpots","distance","angle","penumbra","decay","leftPosition","rightPosition","targetPosition","left","THREE.SpotLight","right","playPositionalAudio","audioLoader","store","storeKey","loop","refDistance","volume","offset","onEnded","playBuffer","createLineButton","screenAnchor","THREE.Vector2","targetLocalPos","targetObject","label","points","lineGeom","THREE.BufferGeometry","lineMat","THREE.LineBasicMaterial","line","THREE.Line","domButton","raycaster","THREE.Raycaster","isVisible","_ndc","_dir","_startPoint","_targetWorld","_rayDir","_endPoint","_proj","_canvas","_canvasRect","_frameCount","update","camera","hits","posAttr","x","y","setVisible","visible","dispose","MAX_PARTICLES","smokeGeometry","smokePositions","smokeColors","smokeSizes","THREE.BufferAttribute","smokeMaterial","THREE.PointsMaterial","THREE.AdditiveBlending","smokePoints","THREE.Points","particlePool","particle","index","particleSystem","exhaustEmitter","deltaTime","engineState","add","p","radius_1","theta","x_1","z_1","radius_2","x_2","z_2","direction","speed","brightness","activeParticles","idx","colorIdx","createMixer","emitters","initialVisible","panel","analysers","ensurePanel","buildRow","pos","row","barContainer","barInner","soloColorKey","ensureAnalyser","analyser","THREE.AudioAnalyser","getEmitterVolume","soloScaling","v","createPerformanceMonitor","frames","prevTime","fps","frameTime","currentTime","delta","fpsColor","THREE.ColorManagement","driveState","soloState","webglCheck","audioCheck","initState","scene","THREE.Scene","THREE.Color","THREE.FogExp2","dbg","dat.GUI","dbgAudioSettings","dbgAudio","dbgAudioReverb","dbgVehicle","dbgVehIgnOn","dbgVehIgnOff","dbgPerformance","dbgPerfSettings","gltfLoader","GLTFLoader","THREE.AudioLoader","rgbeLoader","RGBELoader","HDRCubeTextureLoader","floor","THREE.PlaneGeometry","THREE.MeshStandardMaterial","originalBackground","currentHDRTexture","hdrOptions","hdrParams","name","applyLightingOverride","renderer","baseLightingSnapshot","obj","m","ambientLight","directionalLights","dl","hemiLight","soundEngine","reverbParams","preset","reverbPreset","THREE.EquirectangularReflectionMapping","reverbMapEntry","reverbMap","reverbPath","blend","scalingFactor","carGroup","lineButtons","anims","key","initializeModels","loadingUI","gltfCar","gltfWheels","gltfLights","wheelFL","wheelFR","wheelRR","THREE.AnimationMixer","THREE.AnimationObjectGroup","THREE.LoopOnce","headLightL","headLightR","setupSoloButtons","carScene","intakeSoloBtn","exhaustSoloBtn","interiorSoloBtn","btn","otherBtn","emitterDebuggers","posKey","buttonVisibility","checkSceneReady","THREE.HemisphereLight","THREE.AmbientLight","l","buildLightingSnapshot","resetLightingFromSnapshot","override","ov","sizes","handleResize","THREE.PerspectiveCamera","controls","OrbitControls","THREE.WebGLRenderer","THREE.LinearSRGBColorSpace","THREE.PCFSoftShadowMap","listener","THREE.AudioListener","audioContext","audioEmitters","THREE.PositionalAudio","currSoloState","baseTarget","multiplier","targetVolume","currentVol","engine","loadPromises","promise","reverbBuffer","ctx","sourceNode","em","audioMeters","perfMonitor","helperConfig","fakeListOfCars","disposeAll","animationFrameId","isPageVisible","clock","THREE.Clock","previousTime","tick","elapsedTime","headLightsIntensity"],"mappings":"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"}